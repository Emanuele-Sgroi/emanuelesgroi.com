/**
 * NOTE: This file is massive! All question sets here (and their Q&A pairs) were generated by AI
 * to help with knowledge retention across a variety of technical topics.
 *
 * This File Contains the questions used in Dev Quiz.
 * It holds arrays of question objects, each representing a specific technical area.
 *
 * Each question object has the following structure:
 * - `id`: A unique identifier for the question.
 * - `topic`: The subject or category of the question (e.g., React, JavaScript, Node.js).
 * - `question`: The text of the question being asked.
 * - `language`: (Optional) A string indicating the programming language for code-related questions.
 * - `code`: (Optional) A boolean indicating if the question involves code.
 * - `options`: An array of possible answers, each with a `text` property and an optional `code` property.
 * - `answer`: The correct answer for the question.
 * - `explanation`: An explanation of why the answer is correct, with optional code examples.
 *
 * The question sets cover various topics including (but not limited to):
 * - Core Concepts (OOP, Data Structures, Algorithms)
 * - JavaScript (Hoisting, Closures, Prototypes)
 * - TypeScript (Types, Generics, Compiler Options)
 * - Node.js (Event Loop, Modules, File System)
 * - Database (SQL vs. NoSQL, indexing, normalization, queries)
 * - Cloud (AWS, Azure, GCP basics, IaC, serverless)
 * - HTML (Semantic elements, forms, HTML5 APIs)
 * - CSS (Styling, layout, responsive design, preprocessors)
 * - React (Hooks, Virtual DOM, Lifecycle)
 * - Next.js (SSR, SSG, API routes)
 * - React Native (Mobile development with React)
 * - API (HTTP methods, REST, GraphQL, authentication)
 * - Blockchain (Consensus mechanisms, smart contracts, dApp development)
 */

// CORE CONCEPTS
export const coreConceptsQuestions = [
  // 1
  {
    id: 1,
    topic: "Core Concepts",
    question: "What is encapsulation in Object-Oriented Programming?",
    code: false,
    language: false,
    options: [
      { text: "Wrapping data and methods into a single unit", code: false },
      { text: "Reusing code through inheritance", code: false },
      { text: "Overriding a method in a subclass", code: false },
      { text: "Hiding data in global variables", code: false },
    ],
    answer: "Wrapping data and methods into a single unit",
    explanation: {
      text: "Encapsulation is the concept of binding data and the functions that manipulate it into one unit, typically a class.",
      code: false,
    },
  },
  // 2
  {
    id: 2,
    topic: "Core Concepts",
    question:
      "Which principle of OOP allows objects of different types to be treated through the same interface?",
    code: false,
    language: false,
    options: [
      { text: "Polymorphism", code: false },
      { text: "Encapsulation", code: false },
      { text: "Inheritance", code: false },
      { text: "Abstraction", code: false },
    ],
    answer: "Polymorphism",
    explanation: {
      text: "Polymorphism allows a single interface to represent different types, enabling flexibility and reusability.",
      code: false,
    },
  },
  // 3
  {
    id: 3,
    topic: "Core Concepts",
    question: "Which of the following best describes abstraction in OOP?",
    code: false,
    language: false,
    options: [
      {
        text: "Hiding implementation details and showing only functionality",
        code: false,
      },
      { text: "Reusing code from a parent class", code: false },
      {
        text: "Creating multiple classes with similar properties",
        code: false,
      },
      { text: "Restricting access to certain class members", code: false },
    ],
    answer: "Hiding implementation details and showing only functionality",
    explanation: {
      text: "Abstraction focuses on exposing only the necessary parts of an object, hiding the complex logic behind the scenes.",
      code: false,
    },
  },
  // 4
  {
    id: 4,
    topic: "Core Concepts",
    question:
      "Which keyword is used in many languages to implement inheritance?",
    code: false,
    language: false,
    options: [
      { text: "extends", code: false },
      { text: "inherits", code: false },
      { text: "instanceof", code: false },
      { text: "parent", code: false },
    ],
    answer: "extends",
    explanation: {
      text: "The 'extends' keyword is commonly used to denote that a class is inheriting from another class.",
      code: false,
    },
  },
  // 5
  {
    id: 5,
    topic: "Core Concepts",
    question: "Which of the following is NOT an OOP principle?",
    code: false,
    language: false,
    options: [
      { text: "Encapsulation", code: false },
      { text: "Composition", code: false },
      { text: "Abstraction", code: false },
      { text: "Polymorphism", code: false },
    ],
    answer: "Composition",
    explanation: {
      text: "While composition is a design pattern often used in OOP, it's not considered one of the four fundamental principles (which are: Encapsulation, Abstraction, Inheritance, and Polymorphism).",
      code: false,
    },
  },
  // 6
  {
    id: 6,
    topic: "Core Concepts",
    question:
      "Which SOLID principle states that a class should have only one reason to change?",
    code: false,
    language: false,
    options: [
      { text: "Single Responsibility Principle", code: false },
      { text: "Open/Closed Principle", code: false },
      { text: "Dependency Inversion Principle", code: false },
      { text: "Liskov Substitution Principle", code: false },
    ],
    answer: "Single Responsibility Principle",
    explanation: {
      text: "The Single Responsibility Principle (SRP) says a class should have only one reason to change, meaning it should only have one job or responsibility.",
      code: false,
    },
  },
  // 7
  {
    id: 7,
    topic: "Core Concepts",
    question: "Which of these best represents polymorphism?",
    code: `class Animal {
    speak() {
      return "Generic sound";
    }
  }
  class Dog extends Animal {
    speak() {
      return "Woof";
   }
  }
  class Cat extends Animal {
   speak() {
      return "Meow";
    }
  }
  const animals = [new Dog(), new Cat()];
  animals.map(a => a.speak());`,
    language: "javascript",
    options: [
      { text: `["Generic sound", "Generic sound"]`, code: false },
      { text: `["Woof", "Meow"]`, code: false },
      { text: `["Woof", "Generic sound"]`, code: false },
      { text: `["Meow", "Woof"]`, code: false },
    ],
    answer: `["Woof", "Meow"]`,
    explanation: {
      text: "Each subclass overrides the `speak` method, demonstrating polymorphism by responding differently to the same method call.",
      code: false,
    },
  },
  // 8
  {
    id: 8,
    topic: "Core Concepts",
    question: "What is method overriding in OOP?",
    code: false,
    language: false,
    options: [
      {
        text: "Defining a method in the subclass with the same signature as in the parent class",
        code: false,
      },
      {
        text: "Changing the name of a method in the parent class",
        code: false,
      },
      {
        text: "Creating multiple methods with the same name but different parameters",
        code: false,
      },
      { text: "Hiding implementation details in a class", code: false },
    ],
    answer:
      "Defining a method in the subclass with the same signature as in the parent class",
    explanation: {
      text: "Method overriding occurs when a subclass provides its own implementation of a method that is already defined in its parent class.",
      code: false,
    },
  },
  // 9
  {
    id: 9,
    topic: "Core Concepts",
    question: "Which of the following demonstrates constructor overloading?",
    code: `class Person {
  constructor(name) {
    this.name = name;
  }
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
}`,
    language: "javascript",
    options: [
      { text: "It shows constructor overloading", code: false },
      { text: "It will throw an error", code: false },
      { text: "Only the second constructor will be used", code: false },
      { text: "Both constructors will be merged", code: false },
    ],
    answer: "It will throw an error",
    explanation: {
      text: "JavaScript does not support multiple constructors in a class. This code will throw an error.",
      code: false,
    },
  },
  // 10
  {
    id: 10,
    topic: "Core Concepts",
    question:
      "Which concept encourages using objects to contain other objects instead of inheritance?",
    code: false,
    language: false,
    options: [
      { text: "Composition", code: false },
      { text: "Abstraction", code: false },
      { text: "Polymorphism", code: false },
      { text: "Encapsulation", code: false },
    ],
    answer: "Composition",
    explanation: {
      text: "Composition involves constructing complex objects by combining simpler ones. It's often preferred over inheritance to increase flexibility.",
      code: false,
    },
  },
  // 11
  {
    id: 11,
    topic: "Core Concepts",
    question: "In which situation is inheritance preferred over composition?",
    code: false,
    language: false,
    options: [
      {
        text: "When objects share a strict parent-child relationship",
        code: false,
      },
      { text: "When behavior needs to change at runtime", code: false },
      { text: "When avoiding tight coupling", code: false },
      { text: "When promoting code reuse with loose coupling", code: false },
    ],
    answer: "When objects share a strict parent-child relationship",
    explanation: {
      text: "Inheritance is best used when there's a clear 'is-a' relationship, like Dog is an Animal.",
      code: false,
    },
  },
  // 12
  {
    id: 12,
    topic: "Core Concepts",
    question: "What is the Liskov Substitution Principle?",
    code: false,
    language: false,
    options: [
      {
        text: "Subtypes should be replaceable with their base types without altering correctness",
        code: false,
      },
      {
        text: "Every class should be open for extension but closed for modification",
        code: false,
      },
      { text: "A class should have only one reason to change", code: false },
      {
        text: "High-level modules should not depend on low-level modules",
        code: false,
      },
    ],
    answer:
      "Subtypes should be replaceable with their base types without altering correctness",
    explanation: {
      text: "LSP is the 'L' in SOLID and ensures that derived classes can stand in for base classes without breaking the program.",
      code: false,
    },
  },
  // CORE CONCEPTS — DATA STRUCTURES (IDs 13–22)
  {
    id: 13,
    topic: "Core Concepts",
    question:
      "What is the time complexity of accessing an element in an array by index?",
    code: false,
    language: false,
    options: [
      { text: "O(1)", code: false },
      { text: "O(n)", code: false },
      { text: "O(log n)", code: false },
      { text: "O(n^2)", code: false },
    ],
    answer: "O(1)",
    explanation: {
      text: "Accessing an array element by index is a constant-time operation because the memory location is directly calculated.",
    },
  },
  {
    id: 14,
    topic: "Core Concepts",
    question: "Which data structure uses FIFO (First-In, First-Out) ordering?",
    code: false,
    language: false,
    options: [
      { text: "Stack", code: false },
      { text: "Queue", code: false },
      { text: "Linked List", code: false },
      { text: "Set", code: false },
    ],
    answer: "Queue",
    explanation: {
      text: "A queue processes elements in the order they were added, following the FIFO principle.",
    },
  },
  {
    id: 15,
    topic: "Core Concepts",
    question: "What will the following JavaScript code output?",
    language: "javascript",
    code: `const stack = [];
stack.push(1);
stack.push(2);
stack.push(3);
stack.pop();
console.log(stack);`,
    options: [
      { text: "[1, 2, 3]", code: false },
      { text: "[1, 2]", code: false },
      { text: "[2, 3]", code: false },
      { text: "[1, 3]", code: false },
    ],
    answer: "[1, 2]",
    explanation: {
      text: "`pop()` removes the last element from the stack, leaving [1, 2].",
    },
  },
  {
    id: 16,
    topic: "Core Concepts",
    question: "Which data structure is typically used to implement recursion?",
    code: false,
    language: false,
    options: [
      { text: "Queue", code: false },
      { text: "Stack", code: false },
      { text: "Heap", code: false },
      { text: "Set", code: false },
    ],
    answer: "Stack",
    explanation: {
      text: "Function calls in recursion are stored in the call stack, which follows LIFO (Last-In, First-Out).",
    },
  },
  {
    id: 17,
    topic: "Core Concepts",
    question: "What is a hash table best used for?",
    code: false,
    language: false,
    options: [
      { text: "Sorting data", code: false },
      { text: "Efficient searching, insertion, and deletion", code: false },
      { text: "Storing data in order", code: false },
      { text: "Recursive computations", code: false },
    ],
    answer: "Efficient searching, insertion, and deletion",
    explanation: {
      text: "Hash tables offer near constant time for these operations with a good hash function.",
    },
  },
  {
    id: 18,
    topic: "Core Concepts",
    question: "Which of the following is a linear data structure?",
    code: false,
    language: false,
    options: [
      { text: "Graph", code: false },
      { text: "Binary Tree", code: false },
      { text: "Linked List", code: false },
      { text: "Hash Table", code: false },
    ],
    answer: "Linked List",
    explanation: {
      text: "A linked list is a linear structure where elements are connected in a sequence.",
    },
  },
  {
    id: 19,
    topic: "Core Concepts",
    question: "What is the main disadvantage of a linked list over an array?",
    code: false,
    language: false,
    options: [
      { text: "More memory usage", code: false },
      { text: "Fixed size", code: false },
      { text: "Slower element insertion", code: false },
      { text: "Random access is possible", code: false },
    ],
    answer: "More memory usage",
    explanation: {
      text: "Each node in a linked list stores a reference to the next node, increasing memory use.",
    },
  },
  {
    id: 20,
    topic: "Core Concepts",
    question: "What is the output of the following code?",
    language: "javascript",
    code: `const map = new Map();
map.set('a', 1);
map.set('b', 2);
console.log(map.get('a'));`,
    options: [
      { text: "undefined", code: false },
      { text: "1", code: false },
      { text: "'a'", code: false },
      { text: "null", code: false },
    ],
    answer: "1",
    explanation: {
      text: "The `.get()` method retrieves the value associated with the key 'a', which is 1.",
    },
  },
  {
    id: 21,
    topic: "Core Concepts",
    question: "Which data structure allows duplicate elements?",
    code: false,
    language: false,
    options: [
      { text: "Set", code: false },
      { text: "Map", code: false },
      { text: "Array", code: false },
      { text: "Tree", code: false },
    ],
    answer: "Array",
    explanation: {
      text: "Unlike sets, arrays can contain duplicate values.",
    },
  },
  {
    id: 22,
    topic: "Core Concepts",
    question:
      "Which traversal method visits nodes in the order: left, root, right?",
    code: false,
    language: false,
    options: [
      { text: "Pre-order", code: false },
      { text: "Post-order", code: false },
      { text: "In-order", code: false },
      { text: "Level-order", code: false },
    ],
    answer: "In-order",
    explanation: {
      text: "In-order traversal of a binary tree visits nodes in the order left → root → right.",
    },
  },

  // CORE CONCEPTS — ALGORITHMS (IDs 23–30)

  {
    id: 23,
    topic: "Core Concepts",
    question: "What is the time complexity of binary search in a sorted array?",
    code: false,
    language: false,
    options: [
      { text: "O(n)", code: false },
      { text: "O(log n)", code: false },
      { text: "O(n log n)", code: false },
      { text: "O(1)", code: false },
    ],
    answer: "O(log n)",
    explanation: {
      text: "Binary search repeatedly divides the array in half, resulting in logarithmic time complexity.",
    },
  },
  {
    id: 24,
    topic: "Core Concepts",
    question:
      "Which algorithm is commonly used for sorting and has an average time complexity of O(n log n)?",
    code: false,
    language: false,
    options: [
      { text: "Bubble Sort", code: false },
      { text: "Selection Sort", code: false },
      { text: "Merge Sort", code: false },
      { text: "Insertion Sort", code: false },
    ],
    answer: "Merge Sort",
    explanation: {
      text: "Merge sort is a divide-and-conquer algorithm with consistent O(n log n) time complexity in all cases.",
    },
  },
  {
    id: 25,
    topic: "Core Concepts",
    question: "What is the worst-case time complexity of quicksort?",
    code: false,
    language: false,
    options: [
      { text: "O(n log n)", code: false },
      { text: "O(n)", code: false },
      { text: "O(n^2)", code: false },
      { text: "O(log n)", code: false },
    ],
    answer: "O(n^2)",
    explanation: {
      text: "Quicksort can degrade to O(n^2) if the pivot selection is poor, e.g., always picking the largest or smallest element.",
    },
  },
  {
    id: 26,
    topic: "Core Concepts",
    question:
      "Which algorithm is used to find the shortest path in a weighted graph with non-negative weights?",
    code: false,
    language: false,
    options: [
      { text: "DFS", code: false },
      { text: "BFS", code: false },
      { text: "Dijkstra's Algorithm", code: false },
      { text: "Prim's Algorithm", code: false },
    ],
    answer: "Dijkstra's Algorithm",
    explanation: {
      text: "Dijkstra's algorithm efficiently finds the shortest path from a source node to all others in a weighted graph.",
    },
  },
  {
    id: 27,
    topic: "Core Concepts",
    question: "Which of the following is an example of a greedy algorithm?",
    code: false,
    language: false,
    options: [
      { text: "Merge Sort", code: false },
      { text: "Binary Search", code: false },
      { text: "Dijkstra's Algorithm", code: false },
      { text: "Depth-First Search", code: false },
    ],
    answer: "Dijkstra's Algorithm",
    explanation: {
      text: "Dijkstra's algorithm is greedy because it always chooses the nearest unvisited node at each step.",
    },
  },
  {
    id: 28,
    topic: "Core Concepts",
    question: "What does the Big O notation describe?",
    code: false,
    language: false,
    options: [
      { text: "Memory usage of an algorithm", code: false },
      { text: "The exact number of steps an algorithm takes", code: false },
      { text: "The execution speed in seconds", code: false },
      { text: "The upper bound of an algorithm's growth rate", code: false },
    ],
    answer: "The upper bound of an algorithm's growth rate",
    explanation: {
      text: "Big O describes the upper limit on the time (or space) an algorithm could take relative to input size.",
    },
  },
  {
    id: 29,
    topic: "Core Concepts",
    question: "What is the base case in a recursive algorithm?",
    code: false,
    language: false,
    options: [
      { text: "The case with the highest input value", code: false },
      { text: "The first case the function tries", code: false },
      { text: "The condition that stops recursion", code: false },
      { text: "The last case before the loop starts again", code: false },
    ],
    answer: "The condition that stops recursion",
    explanation: {
      text: "The base case prevents infinite recursion by defining when the recursive function should stop.",
    },
  },
  {
    id: 30,
    topic: "Core Concepts",
    question: "What is the output of this recursive factorial function?",
    language: "javascript",
    code: `function factorial(n) {
  if (n === 0) return 1;
  return n * factorial(n - 1);
}
console.log(factorial(3));`,
    options: [
      { text: "0", code: false },
      { text: "6", code: false },
      { text: "3", code: false },
      { text: "1", code: false },
    ],
    answer: "6",
    explanation: {
      text: "`factorial(3)` evaluates as 3 * 2 * 1, which equals 6.",
    },
  },

  // CORE CONCEPTS — BIG O (IDs 31–36)

  {
    id: 31,
    topic: "Core Concepts",
    question:
      "What is the time complexity of searching for an element in an unsorted array?",
    code: false,
    language: false,
    options: [
      { text: "O(1)", code: false },
      { text: "O(log n)", code: false },
      { text: "O(n)", code: false },
      { text: "O(n log n)", code: false },
    ],
    answer: "O(n)",
    explanation: {
      text: "In the worst case, every element must be checked in an unsorted array, resulting in O(n) time.",
      code: false,
    },
  },
  {
    id: 32,
    topic: "Core Concepts",
    question:
      "Which of the following Big O notations represents the best possible efficiency?",
    code: false,
    language: false,
    options: [
      { text: "O(n)", code: false },
      { text: "O(n log n)", code: false },
      { text: "O(log n)", code: false },
      { text: "O(1)", code: false },
    ],
    answer: "O(1)",
    explanation: {
      text: "O(1) means the operation takes the same time regardless of input size — the most efficient.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "Core Concepts",
    question: "Which algorithm has the worst-case time complexity of O(n²)?",
    code: false,
    language: false,
    options: [
      { text: "Binary Search", code: false },
      { text: "Bubble Sort", code: false },
      { text: "Merge Sort", code: false },
      { text: "Quick Sort", code: false },
    ],
    answer: "Bubble Sort",
    explanation: {
      text: "Bubble sort compares every pair, which in the worst case requires O(n²) operations.",
      code: false,
    },
  },
  {
    id: 34,
    topic: "Core Concepts",
    question: "What does O(n log n) represent in time complexity?",
    code: false,
    language: false,
    options: [
      { text: "A linear search algorithm", code: false },
      { text: "A divide-and-conquer approach", code: false },
      { text: "An exponential algorithm", code: false },
      { text: "A recursive algorithm with linear depth", code: false },
    ],
    answer: "A divide-and-conquer approach",
    explanation: {
      text: "Algorithms like merge sort divide the input and perform linear work per level — resulting in O(n log n).",
      code: false,
    },
  },
  {
    id: 35,
    topic: "Core Concepts",
    question:
      "Which of the following growth rates increases the fastest as n increases?",
    code: false,
    language: false,
    options: [
      { text: "O(log n)", code: false },
      { text: "O(n)", code: false },
      { text: "O(n log n)", code: false },
      { text: "O(2ⁿ)", code: false },
    ],
    answer: "O(2ⁿ)",
    explanation: {
      text: "Exponential growth (O(2ⁿ)) increases rapidly and is typically seen in brute-force or recursive algorithms without pruning.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "Core Concepts",
    question: "What is the time complexity of this loop?",
    language: "javascript",
    code: `for (let i = 1; i < n; i *= 2) {
  console.log(i);
}`,
    options: [
      { text: "O(n)", code: false },
      { text: "O(log n)", code: false },
      { text: "O(n log n)", code: false },
      { text: "O(1)", code: false },
    ],
    answer: "O(log n)",
    explanation: {
      text: "The loop doubles `i` each time, resulting in logarithmic iterations relative to `n`.",
      code: false,
    },
  },

  // CORE CONCEPTS — PROGRAMMING PARADIGMS (IDs 37–41)

  {
    id: 37,
    topic: "Core Concepts",
    question:
      "Which of the following best describes the functional programming paradigm?",
    code: false,
    language: false,
    options: [
      { text: "Programs are built using objects and methods", code: false },
      {
        text: "Programs avoid state and side effects, relying on pure functions",
        code: false,
      },
      { text: "Programs use goto statements for control flow", code: false },
      { text: "Programs are written in machine code", code: false },
    ],
    answer: "Programs avoid state and side effects, relying on pure functions",
    explanation: {
      text: "Functional programming emphasizes pure functions, immutability, and avoiding shared state.",
      code: false,
    },
  },
  {
    id: 38,
    topic: "Core Concepts",
    question:
      "Which programming paradigm focuses on modeling real-world entities?",
    code: false,
    language: false,
    options: [
      { text: "Functional Programming", code: false },
      { text: "Procedural Programming", code: false },
      { text: "Object-Oriented Programming", code: false },
      { text: "Logic Programming", code: false },
    ],
    answer: "Object-Oriented Programming",
    explanation: {
      text: "OOP structures programs around objects, which represent real-world entities with properties and behaviours.",
      code: false,
    },
  },
  {
    id: 39,
    topic: "Core Concepts",
    question:
      "In which paradigm is the program structure typically a sequence of instructions and function calls?",
    code: false,
    language: false,
    options: [
      { text: "Functional", code: false },
      { text: "Object-Oriented", code: false },
      { text: "Procedural", code: false },
      { text: "Declarative", code: false },
    ],
    answer: "Procedural",
    explanation: {
      text: "Procedural programming organizes code into procedures or routines that are executed in sequence.",
      code: false,
    },
  },
  {
    id: 40,
    topic: "Core Concepts",
    question:
      "Which of the following is an example of declarative programming?",
    code: false,
    language: false,
    options: [
      { text: "Writing a for loop to print numbers", code: false },
      { text: "Using SQL to query a database", code: false },
      { text: "Creating a class to represent a user", code: false },
      {
        text: "Defining a recursive function to calculate factorial",
        code: false,
      },
    ],
    answer: "Using SQL to query a database",
    explanation: {
      text: "Declarative programming focuses on describing *what* should be done, not *how* — like in SQL.",
      code: false,
    },
  },
  {
    id: 41,
    topic: "Core Concepts",
    question:
      "Which of these features is *not* typically associated with functional programming?",
    code: false,
    language: false,
    options: [
      { text: "Immutability", code: false },
      { text: "First-class functions", code: false },
      { text: "Stateful operations", code: false },
      { text: "Pure functions", code: false },
    ],
    answer: "Stateful operations",
    explanation: {
      text: "Functional programming discourages mutable state and favors stateless operations.",
      code: false,
    },
  },

  // CORE CONCEPTS — CONCURRENCY & ASYNC (IDs 42–46)

  {
    id: 42,
    topic: "Core Concepts",
    question: "What is the main benefit of asynchronous programming?",
    code: false,
    language: false,
    options: [
      { text: "It simplifies the code structure", code: false },
      { text: "It guarantees faster execution time", code: false },
      {
        text: "It allows programs to handle multiple tasks without blocking",
        code: false,
      },
      { text: "It ensures data integrity in all scenarios", code: false },
    ],
    answer: "It allows programs to handle multiple tasks without blocking",
    explanation: {
      text: "Asynchronous programming improves responsiveness by allowing non-blocking operations, especially in I/O-heavy tasks.",
      code: false,
    },
  },
  {
    id: 43,
    topic: "Core Concepts",
    question: "Which JavaScript feature enables asynchronous programming?",
    code: false,
    language: false,
    options: [
      { text: "setTimeout", code: false },
      { text: "Promises", code: false },
      { text: "Loops", code: false },
      { text: "Hoisting", code: false },
    ],
    answer: "Promises",
    explanation: {
      text: "Promises are a core feature for handling asynchronous operations in JavaScript, along with async/await.",
      code: false,
    },
  },
  {
    id: 44,
    topic: "Core Concepts",
    question: "What does concurrency mean in programming?",
    code: false,
    language: false,
    options: [
      { text: "Running multiple programs on multiple computers", code: false },
      {
        text: "Handling multiple tasks at the same time, possibly interleaved",
        code: false,
      },
      { text: "Executing code line by line", code: false },
      { text: "Using multiple programming languages", code: false },
    ],
    answer: "Handling multiple tasks at the same time, possibly interleaved",
    explanation: {
      text: "Concurrency is about structuring a program to handle multiple operations, often via task switching or threads.",
      code: false,
    },
  },
  {
    id: 45,
    topic: "Core Concepts",
    question: "What is the output of the following async JavaScript code?",
    language: "javascript",
    code: `console.log("Start");

setTimeout(() => {
  console.log("Timeout");
}, 0);

Promise.resolve().then(() => {
  console.log("Promise");
});

console.log("End");`,
    options: [
      { text: `"Start" → "Timeout" → "Promise" → "End"`, code: false },
      { text: `"Start" → "Promise" → "End" → "Timeout"`, code: false },
      { text: `"Start" → "End" → "Promise" → "Timeout"`, code: false },
      { text: `"Start" → "End" → "Timeout" → "Promise"`, code: false },
    ],
    answer: `"Start" → "End" → "Promise" → "Timeout"`,
    explanation: {
      text: `The call stack runs synchronously: "Start" and "End" print first. Promises (microtasks) resolve before timeouts (macrotasks), so "Promise" comes before "Timeout".`,
      code: false,
    },
  },
  {
    id: 46,
    topic: "Core Concepts",
    question:
      "Which of the following is a common issue in concurrent programming?",
    code: false,
    language: false,
    options: [
      { text: "Hoisting", code: false },
      { text: "Deadlock", code: false },
      { text: "Garbage collection", code: false },
      { text: "Immutable variables", code: false },
    ],
    answer: "Deadlock",
    explanation: {
      text: "Deadlock occurs when two or more tasks are waiting for each other to release resources, causing the program to freeze.",
      code: false,
    },
  },

  // CORE CONCEPTS — MISCELLANEOUS (IDs 47–50)

  {
    id: 47,
    topic: "Core Concepts",
    question: "What is the difference between a compiler and an interpreter?",
    code: false,
    language: false,
    options: [
      {
        text: "A compiler executes code line by line, an interpreter does not",
        code: false,
      },
      {
        text: "A compiler translates the whole code at once, an interpreter executes it line by line",
        code: false,
      },
      { text: "They are the same thing", code: false },
      { text: "An interpreter is used only in Java", code: false },
    ],
    answer:
      "A compiler translates the whole code at once, an interpreter executes it line by line",
    explanation: {
      text: "Compilers translate entire programs into machine code before execution, while interpreters execute code line-by-line.",
      code: false,
    },
  },
  {
    id: 48,
    topic: "Core Concepts",
    question:
      "Which of the following best defines 'abstraction' in computer science?",
    code: false,
    language: false,
    options: [
      {
        text: "Hiding irrelevant details and showing only the essential features",
        code: false,
      },
      { text: "Breaking code into multiple functions", code: false },
      { text: "Using third-party libraries", code: false },
      { text: "Writing pseudocode before implementation", code: false },
    ],
    answer: "Hiding irrelevant details and showing only the essential features",
    explanation: {
      text: "Abstraction allows developers to work with complex systems more easily by focusing on high-level logic.",
      code: false,
    },
  },
  {
    id: 49,
    topic: "Core Concepts",
    question:
      "Which of these is *not* a common characteristic of good software architecture?",
    code: false,
    language: false,
    options: [
      { text: "Scalability", code: false },
      { text: "Tight coupling", code: false },
      { text: "Maintainability", code: false },
      { text: "Modularity", code: false },
    ],
    answer: "Tight coupling",
    explanation: {
      text: "Tight coupling makes software harder to modify and maintain. Good architecture aims for loose coupling.",
      code: false,
    },
  },
  {
    id: 50,
    topic: "Core Concepts",
    question: "What does 'DRY' stand for in software development?",
    code: false,
    language: false,
    options: [
      { text: "Don't Repeat Yourself", code: false },
      { text: "Don't Render Yourself", code: false },
      { text: "Do Repeat Yourself", code: false },
      { text: "Deploy Reusable YAML", code: false },
    ],
    answer: "Don't Repeat Yourself",
    explanation: {
      text: "DRY is a principle that encourages reducing repetition to make code more maintainable and scalable.",
      code: false,
    },
  },
  // CORE CONCEPTS — BONUS QUESTIONS (IDs 51–52)

  // Very Easy
  {
    id: 51,
    topic: "Core Concepts",
    question: "What does 'bug' mean in programming?",
    code: false,
    language: false,
    options: [
      { text: "A virus in the system", code: false },
      { text: "A mistake or flaw in the code", code: false },
      { text: "An intentional feature", code: false },
      { text: "A security patch", code: false },
    ],
    answer: "A mistake or flaw in the code",
    explanation: {
      text: "A bug is an error, flaw, or fault in a program that causes it to behave unexpectedly or incorrectly.",
      code: false,
    },
  },

  //  Hard
  {
    id: 52,
    topic: "Core Concepts",
    question:
      "What is the difference between concurrency and parallelism, and in which scenario would you use a message-passing architecture instead of shared memory?",
    code: false,
    language: false,
    options: [
      {
        text: "Concurrency runs tasks simultaneously on multiple cores; use message-passing for I/O-heavy operations",
        code: false,
      },
      {
        text: "Concurrency deals with multiple tasks conceptually at once; parallelism runs them literally at once; use message-passing when avoiding race conditions",
        code: false,
      },
      {
        text: "Parallelism and concurrency are synonyms; use shared memory when debugging",
        code: false,
      },
      {
        text: "Concurrency requires hardware threads; message-passing is only used in web apps",
        code: false,
      },
    ],
    answer:
      "Concurrency deals with multiple tasks conceptually at once; parallelism runs them literally at once; use message-passing when avoiding race conditions",
    explanation: {
      text: `Concurrency is about dealing with lots of things at once (structure), while parallelism is about doing lots of things at once (execution). Message-passing architectures like the Actor Model are useful in distributed systems and multi-threaded apps where shared memory could lead to race conditions or deadlocks.`,
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//REACT QUESTIONS

export const reactQuestions = [
  // REACT — HOOKS (IDs 1–10)
  {
    id: 1,
    topic: "React",
    question: "What is the primary purpose of the useState hook in React?",
    code: false,
    language: false,
    options: [
      { text: "To directly manipulate the DOM", code: false },
      { text: "To manage state in a functional component", code: false },
      { text: "To handle side effects", code: false },
      { text: "To fetch data from an API", code: false },
    ],
    answer: "To manage state in a functional component",
    explanation: {
      text: "useState allows functional components to have local state variables.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "React",
    question: "What does the useEffect hook do?",
    code: false,
    language: false,
    options: [
      { text: "Renders components asynchronously", code: false },
      { text: "Applies styling to components", code: false },
      {
        text: "Handles side effects like data fetching or subscriptions",
        code: false,
      },
      { text: "Creates reusable components", code: false },
    ],
    answer: "Handles side effects like data fetching or subscriptions",
    explanation: {
      text: "useEffect runs after the render and is commonly used for side effects like API calls or setting up event listeners.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "React",
    question: "What is the output of the following code?",
    language: "javascript",
    code: `const [count, setCount] = useState(0);
setCount(count + 1);
console.log(count);`,
    options: [
      { text: "0", code: false },
      { text: "1", code: false },
      { text: "undefined", code: false },
      { text: "It throws an error", code: false },
    ],
    answer: "0",
    explanation: {
      text: "React state updates are asynchronous. The console logs the old value before the state is updated.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "React",
    question:
      "Which hook would you use to keep a mutable value around that doesn’t cause a re-render when updated?",
    code: false,
    language: false,
    options: [
      { text: "useMemo", code: false },
      { text: "useState", code: false },
      { text: "useCallback", code: false },
      { text: "useRef", code: false },
    ],
    answer: "useRef",
    explanation: {
      text: "useRef holds a mutable reference that persists across renders but doesn’t cause re-render when changed.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "React",
    question: "What is the purpose of useMemo?",
    code: false,
    language: false,
    options: [
      { text: "To memoize expensive computations", code: false },
      { text: "To memoize component renders", code: false },
      { text: "To store refs across renders", code: false },
      { text: "To debounce API calls", code: false },
    ],
    answer: "To memoize expensive computations",
    explanation: {
      text: "useMemo caches the result of a computation and recomputes only if dependencies change.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "React",
    question: "What is the difference between useMemo and useCallback?",
    code: false,
    language: false,
    options: [
      {
        text: "useMemo returns a memoized function; useCallback returns a memoized value",
        code: false,
      },
      { text: "useMemo is used for DOM manipulation", code: false },
      {
        text: "useCallback memoizes functions; useMemo memoizes computed values",
        code: false,
      },
      { text: "There is no difference", code: false },
    ],
    answer: "useCallback memoizes functions; useMemo memoizes computed values",
    explanation: {
      text: "useCallback is a specialized version of useMemo that is used for memoizing functions.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "React",
    question: "What is the output of this code?",
    language: "javascript",
    code: `const [count, setCount] = useState(0);

useEffect(() => {
  setCount(count + 1);
}, []);

console.log(count);`,
    options: [
      { text: "0", code: false },
      { text: "1", code: false },
      { text: "2", code: false },
      { text: "It causes an infinite loop", code: false },
    ],
    answer: "0",
    explanation: {
      text: "The effect runs after the first render, but count is 0 at the time of render, so console logs 0.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "React",
    question:
      "Which hook is best suited for managing global state within a component tree?",
    code: false,
    language: false,
    options: [
      { text: "useState", code: false },
      { text: "useMemo", code: false },
      { text: "useEffect", code: false },
      { text: "useContext", code: false },
    ],
    answer: "useContext",
    explanation: {
      text: "useContext is used to access shared state and avoid prop drilling across deeply nested components.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "React",
    question:
      "What happens if you call a hook conditionally inside a component?",
    code: false,
    language: false,
    options: [
      { text: "React will optimize it", code: false },
      { text: "It will throw an error or behave unexpectedly", code: false },
      { text: "It creates a new hook instance", code: false },
      { text: "It runs only if the condition is true", code: false },
    ],
    answer: "It will throw an error or behave unexpectedly",
    explanation: {
      text: "Hooks must be called in the same order every render. Conditional calls can break the rules of hooks.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "React",
    question: "What is the purpose of the dependency array in useEffect?",
    code: false,
    language: false,
    options: [
      { text: "To specify what variables trigger the effect", code: false },
      { text: "To track memory leaks", code: false },
      { text: "To define component props", code: false },
      { text: "To store previous render state", code: false },
    ],
    answer: "To specify what variables trigger the effect",
    explanation: {
      text: "The dependency array tells React when to re-run the effect based on which values have changed.",
      code: false,
    },
  },

  // REACT — COMPONENT TYPES (IDs 11–15)
  {
    id: 11,
    topic: "React",
    question:
      "What is the main difference between a class component and a functional component in React?",
    code: false,
    language: false,
    options: [
      { text: "Class components can't manage state", code: false },
      { text: "Functional components are used for routing only", code: false },
      {
        text: "Class components use lifecycle methods, functional components use hooks",
        code: false,
      },
      { text: "Functional components must return a string", code: false },
    ],
    answer:
      "Class components use lifecycle methods, functional components use hooks",
    explanation: {
      text: "Class components manage side effects with lifecycle methods like componentDidMount, while functional components use hooks like useEffect.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "React",
    question: "Which of the following is a valid functional component?",
    language: "javascript",
    code: `function MyComponent() {
  return <div>Hello World</div>;
}`,
    options: [
      { text: "Yes, this is a valid functional component", code: false },
      { text: "No, functional components must use class keyword", code: false },
      { text: "No, it must return a string", code: false },
      {
        text: "No, React does not support functions as components",
        code: false,
      },
    ],
    answer: "Yes, this is a valid functional component",
    explanation: {
      text: "Functional components are JavaScript functions that return JSX.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "React",
    question: "What is a prop in React?",
    code: false,
    language: false,
    options: [
      { text: "A special kind of state variable", code: false },
      { text: "An internal configuration object", code: false },
      {
        text: "An immutable value passed from parent to child component",
        code: false,
      },
      { text: "A built-in React hook", code: false },
    ],
    answer: "An immutable value passed from parent to child component",
    explanation: {
      text: "Props are used to pass data from one component to another. They are read-only and cannot be modified by the child.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "React",
    question: "What is the purpose of 'defaultProps' in a class component?",
    code: false,
    language: false,
    options: [
      { text: "To define initial state", code: false },
      { text: "To set fallback values for props", code: false },
      { text: "To define class methods", code: false },
      { text: "To handle user authentication", code: false },
    ],
    answer: "To set fallback values for props",
    explanation: {
      text: "defaultProps provides default values for props if none are passed to the component.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "React",
    question: "What is the role of the 'key' prop in a list of React elements?",
    code: false,
    language: false,
    options: [
      { text: "To define a unique ID for styling", code: false },
      { text: "To help React identify which items have changed", code: false },
      { text: "To optimize API calls", code: false },
      { text: "To create unique CSS classes", code: false },
    ],
    answer: "To help React identify which items have changed",
    explanation: {
      text: "Keys help React identify which elements in a list have changed, been added, or removed. It improves rendering performance.",
      code: false,
    },
  },

  // REACT — LIFECYCLE (IDs 16–19)

  {
    id: 16,
    topic: "React",
    question:
      "Which lifecycle method is invoked immediately after a component is inserted into the DOM?",
    code: false,
    language: false,
    options: [
      { text: "componentDidUpdate", code: false },
      { text: "componentWillMount", code: false },
      { text: "componentDidMount", code: false },
      { text: "render", code: false },
    ],
    answer: "componentDidMount",
    explanation: {
      text: "componentDidMount is called once after the initial render, making it ideal for API calls or subscriptions.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "React",
    question:
      "What is the correct way to replicate componentDidMount in a functional component?",
    language: "javascript",
    code: `useEffect(() => {
  // logic here
}, []);`,
    options: [
      { text: "By using useState", code: false },
      {
        text: "By using useEffect with an empty dependency array",
        code: false,
      },
      { text: "By calling useEffect inside componentDidMount", code: false },
      { text: "By using useMemo", code: false },
    ],
    answer: "By using useEffect with an empty dependency array",
    explanation: {
      text: "useEffect with an empty dependency array runs only once after the initial render, just like componentDidMount.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "React",
    question:
      "Which lifecycle method is commonly used for cleanup in a class component?",
    code: false,
    language: false,
    options: [
      { text: "componentDidMount", code: false },
      { text: "componentWillUnmount", code: false },
      { text: "componentDidUpdate", code: false },
      { text: "getDerivedStateFromProps", code: false },
    ],
    answer: "componentWillUnmount",
    explanation: {
      text: "componentWillUnmount is used to perform cleanup such as removing timers or unsubscribing from services before a component is removed.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "React",
    question: "When does useEffect run by default?",
    code: false,
    language: false,
    options: [
      { text: "Only once after initial render", code: false },
      { text: "After every re-render", code: false },
      { text: "Only before the component unmounts", code: false },
      { text: "After state updates but not props", code: false },
    ],
    answer: "After every re-render",
    explanation: {
      text: "By default, useEffect runs after every render unless you provide a dependency array to control when it runs.",
      code: false,
    },
  },

  // REACT — JSX & RENDERING (IDs 20–23)

  {
    id: 20,
    topic: "React",
    question:
      "What is the correct way to render a list of items in React using JSX?",
    language: "javascript",
    code: `{items.map(item => (
  <li key={item.id}>{item.name}</li>
))}`,
    options: [
      { text: "Using a for loop directly inside JSX", code: false },
      { text: "Using map and assigning a key to each element", code: false },
      { text: "Using while loop in JSX return", code: false },
      { text: "Using forEach with a return statement", code: false },
    ],
    answer: "Using map and assigning a key to each element",
    explanation: {
      text: "map is the most common way to render lists in JSX. Keys help React track changes to each item.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "React",
    question:
      "Which of the following is the correct way to conditionally render content in JSX?",
    language: "javascript",
    code: `{isLoggedIn ? <p>Welcome!</p> : <p>Please log in.</p>}`,
    options: [
      { text: "if (isLoggedIn) return <p>Welcome!</p>", code: false },
      { text: "Using ternary or && operators inside JSX", code: false },
      { text: "Use an if statement inside JSX", code: false },
      { text: "Wrap the JSX in a for loop", code: false },
    ],
    answer: "Using ternary or && operators inside JSX",
    explanation: {
      text: "Ternary expressions and logical && are standard for conditional rendering inside JSX.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "React",
    question: "What is the purpose of using a fragment (`<>...</>`) in JSX?",
    code: false,
    language: false,
    options: [
      { text: "To create comments in JSX", code: false },
      {
        text: "To group multiple elements without adding extra nodes to the DOM",
        code: false,
      },
      { text: "To bind multiple events", code: false },
      { text: "To create loops", code: false },
    ],
    answer: "To group multiple elements without adding extra nodes to the DOM",
    explanation: {
      text: "Fragments let you return multiple elements from a component without adding extra HTML elements.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "React",
    question:
      "Why is it important to provide a unique 'key' prop when rendering lists?",
    code: false,
    language: false,
    options: [
      { text: "It improves accessibility", code: false },
      {
        text: "It allows React to optimize rendering and reordering",
        code: false,
      },
      { text: "It's used for styling elements", code: false },
      { text: "It prevents runtime errors", code: false },
    ],
    answer: "It allows React to optimize rendering and reordering",
    explanation: {
      text: "Keys help React identify which elements have changed, improving performance and avoiding unnecessary re-renders.",
      code: false,
    },
  },

  // REACT — STATE MANAGEMENT (IDs 24–27)

  {
    id: 24,
    topic: "React",
    question: "What does 'lifting state up' mean in React?",
    code: false,
    language: false,
    options: [
      { text: "Storing state inside Redux", code: false },
      {
        text: "Moving state to a common ancestor to share between components",
        code: false,
      },
      { text: "Deleting unused state variables", code: false },
      { text: "Using local storage to persist state", code: false },
    ],
    answer: "Moving state to a common ancestor to share between components",
    explanation: {
      text: "Lifting state up means moving shared state to the closest common parent so multiple components can access or update it.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "React",
    question: "What problem does prop drilling refer to?",
    code: false,
    language: false,
    options: [
      { text: "Passing props in incorrect order", code: false },
      { text: "Sending props in class components only", code: false },
      {
        text: "Passing props through many nested components unnecessarily",
        code: false,
      },
      { text: "Reusing props between different pages", code: false },
    ],
    answer: "Passing props through many nested components unnecessarily",
    explanation: {
      text: "Prop drilling can lead to hard-to-maintain code when props are passed down multiple levels for deeply nested components.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "React",
    question: "Which hook is commonly used to avoid prop drilling?",
    code: false,
    language: false,
    options: [
      { text: "useRef", code: false },
      { text: "useContext", code: false },
      { text: "useCallback", code: false },
      { text: "useMemo", code: false },
    ],
    answer: "useContext",
    explanation: {
      text: "useContext allows sharing data across components without passing props manually at every level.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "React",
    question:
      "What happens if you call setState with the same value as the current state?",
    code: false,
    language: false,
    options: [
      { text: "React will force a re-render", code: false },
      { text: "React throws an error", code: false },
      { text: "React skips re-rendering", code: false },
      { text: "React resets the component", code: false },
    ],
    answer: "React skips re-rendering",
    explanation: {
      text: "React performs a shallow comparison and skips re-rendering if the new state is equal to the current one.",
      code: false,
    },
  },

  // REACT — PERFORMANCE (IDs 28–30)

  {
    id: 28,
    topic: "React",
    question:
      "Which hook helps memoize a function to avoid unnecessary re-creations on re-renders?",
    code: false,
    language: false,
    options: [
      { text: "useMemo", code: false },
      { text: "useRef", code: false },
      { text: "useCallback", code: false },
      { text: "useEffect", code: false },
    ],
    answer: "useCallback",
    explanation: {
      text: "useCallback returns a memoized version of the callback that only changes if one of the dependencies has changed.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "React",
    question: "What is the purpose of React.memo?",
    code: false,
    language: false,
    options: [
      { text: "To cache API responses", code: false },
      {
        text: "To memoize functional components and avoid unnecessary re-renders",
        code: false,
      },
      { text: "To delay rendering until needed", code: false },
      { text: "To make components load lazily", code: false },
    ],
    answer: "To memoize functional components and avoid unnecessary re-renders",
    explanation: {
      text: "React.memo is a higher-order component that prevents functional components from re-rendering if their props haven’t changed.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "React",
    question: "What is the main benefit of using PureComponent in React?",
    code: false,
    language: false,
    options: [
      { text: "It allows class components to access hooks", code: false },
      { text: "It adds support for animations", code: false },
      {
        text: "It prevents re-renders when props and state haven't changed",
        code: false,
      },
      { text: "It provides better support for context", code: false },
    ],
    answer: "It prevents re-renders when props and state haven't changed",
    explanation: {
      text: "PureComponent performs a shallow comparison of props and state, improving performance by preventing unnecessary renders.",
      code: false,
    },
  },

  // REACT — FORMS & EVENTS (IDs 31–33)

  {
    id: 31,
    topic: "React",
    question: "What is a controlled component in React?",
    code: false,
    language: false,
    options: [
      { text: "A component with built-in validation", code: false },
      {
        text: "A form element whose value is controlled by React state",
        code: false,
      },
      { text: "A component rendered conditionally", code: false },
      { text: "A component that only works with Redux", code: false },
    ],
    answer: "A form element whose value is controlled by React state",
    explanation: {
      text: "Controlled components use React state as the single source of truth for form inputs, making them predictable and easy to manage.",
      code: false,
    },
  },
  {
    id: 32,
    topic: "React",
    question: "Which event handler is used to handle form submission in React?",
    code: false,
    language: false,
    options: [
      { text: "onClick", code: false },
      { text: "onChange", code: false },
      { text: "onSubmit", code: false },
      { text: "onInput", code: false },
    ],
    answer: "onSubmit",
    explanation: {
      text: "The onSubmit event is triggered when a form is submitted, usually via a submit button or pressing Enter inside a field.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "React",
    question:
      "How can you prevent the default form submission behavior in React?",
    language: "javascript",
    code: `const handleSubmit = (e) => {
  e.preventDefault();
  // handle logic here
};`,
    options: [
      { text: "By returning false from the event handler", code: false },
      { text: "By using e.preventDefault()", code: false },
      { text: "By calling e.stopPropagation()", code: false },
      { text: "By removing the submit button", code: false },
    ],
    answer: "By using e.preventDefault()",
    explanation: {
      text: "Calling `e.preventDefault()` stops the browser from performing the default form submission action, allowing custom logic instead.",
      code: false,
    },
  },

  // REACT — BEST PRACTICES (IDs 34–36)

  {
    id: 34,
    topic: "React",
    question:
      "Why should you include all dependencies in the useEffect dependency array?",
    code: false,
    language: false,
    options: [
      { text: "To avoid linting errors only", code: false },
      {
        text: "To ensure the effect always runs when dependencies change",
        code: false,
      },
      { text: "To prevent the app from rendering", code: false },
      { text: "It's optional and mostly ignored by React", code: false },
    ],
    answer: "To ensure the effect always runs when dependencies change",
    explanation: {
      text: "Including all dependencies ensures the effect re-runs when any value it relies on changes, avoiding stale closures and bugs.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "React",
    question:
      "Why is it recommended to use unique and stable keys when rendering lists in React?",
    code: false,
    language: false,
    options: [
      {
        text: "To prevent performance issues and maintain element identity",
        code: false,
      },
      { text: "To style list items uniquely", code: false },
      { text: "To avoid server errors", code: false },
      { text: "To reduce bundle size", code: false },
    ],
    answer: "To prevent performance issues and maintain element identity",
    explanation: {
      text: "React uses keys to track elements between renders. Unique keys help avoid bugs and unnecessary re-renders.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "React",
    question:
      "What is a good alternative to deeply nested component trees with many props?",
    code: false,
    language: false,
    options: [
      { text: "Use render props", code: false },
      { text: "Use HOC for everything", code: false },
      { text: "Use dangerouslySetInnerHTML", code: false },
      { text: "Avoid using child components", code: false },
    ],
    answer: "Use render props",
    explanation: {
      text: "Render props are a pattern for sharing logic and composing components without deeply nesting or excessive prop drilling.",
      code: false,
    },
  },

  // REACT — ADVANCED CONCEPTS (IDs 37–41)

  {
    id: 37,
    topic: "React",
    question: "What is a custom hook in React?",
    code: false,
    language: false,
    options: [
      { text: "A hook provided by React", code: false },
      {
        text: "A function that uses hooks to encapsulate reusable logic",
        code: false,
      },
      { text: "A third-party library for managing state", code: false },
      { text: "A built-in React feature to style components", code: false },
    ],
    answer: "A function that uses hooks to encapsulate reusable logic",
    explanation: {
      text: "Custom hooks allow logic reuse across components by combining built-in hooks into reusable functions.",
      code: false,
    },
  },
  {
    id: 38,
    topic: "React",
    question: "What is a Higher-Order Component (HOC)?",
    code: false,
    language: false,
    options: [
      { text: "A component that renders only once", code: false },
      { text: "A component that uses Redux", code: false },
      {
        text: "A function that takes a component and returns a new enhanced component",
        code: false,
      },
      { text: "A type of error boundary", code: false },
    ],
    answer:
      "A function that takes a component and returns a new enhanced component",
    explanation: {
      text: "HOCs are functions that enhance components with extra functionality, often used for cross-cutting concerns like authentication or logging.",
      code: false,
    },
  },
  {
    id: 39,
    topic: "React",
    question: "What is the render props pattern in React?",
    code: false,
    language: false,
    options: [
      { text: "A way to define inline styles in JSX", code: false },
      {
        text: "A pattern where a component shares logic by using a prop whose value is a function",
        code: false,
      },
      { text: "A way to define custom events", code: false },
      { text: "A performance optimization technique", code: false },
    ],
    answer:
      "A pattern where a component shares logic by using a prop whose value is a function",
    explanation: {
      text: "Render props allow components to share code by passing a function that returns JSX — giving great flexibility.",
      code: false,
    },
  },
  {
    id: 40,
    topic: "React",
    question: "What is an error boundary in React?",
    code: false,
    language: false,
    options: [
      {
        text: "A way to catch and handle JavaScript errors in the component tree",
        code: false,
      },
      { text: "A tool to prevent prop drilling", code: false },
      { text: "A built-in hook for error management", code: false },
      { text: "A type of React Fragment", code: false },
    ],
    answer: "A way to catch and handle JavaScript errors in the component tree",
    explanation: {
      text: "Error boundaries are class components that implement `componentDidCatch` and `getDerivedStateFromError` to handle rendering errors gracefully.",
      code: false,
    },
  },
  {
    id: 41,
    topic: "React",
    question:
      "Which lifecycle method is used by error boundaries to catch errors?",
    code: false,
    language: false,
    options: [
      { text: "componentDidMount", code: false },
      { text: "getSnapshotBeforeUpdate", code: false },
      { text: "componentDidCatch", code: false },
      { text: "shouldComponentUpdate", code: false },
    ],
    answer: "componentDidCatch",
    explanation: {
      text: "`componentDidCatch(error, info)` is used to catch JavaScript errors anywhere in a child component tree and display a fallback UI.",
      code: false,
    },
  },

  // REACT — REACT + ECOSYSTEM (IDs 42–52)

  {
    id: 42,
    topic: "React",
    question: "What is the main purpose of Redux in a React application?",
    code: false,
    language: false,
    options: [
      { text: "To style components", code: false },
      {
        text: "To manage application-level state in a predictable way",
        code: false,
      },
      { text: "To handle routing", code: false },
      { text: "To handle asynchronous API calls", code: false },
    ],
    answer: "To manage application-level state in a predictable way",
    explanation: {
      text: "Redux centralizes state in a single store and uses actions and reducers to update that state in a predictable way.",
      code: false,
    },
  },
  {
    id: 43,
    topic: "React",
    question: "What does the `useSelector` hook do in Redux with React?",
    code: false,
    language: false,
    options: [
      { text: "Dispatch an action to the store", code: false },
      { text: "Connect a component to the store", code: false },
      { text: "Read data from the Redux store", code: false },
      { text: "Create a new reducer", code: false },
    ],
    answer: "Read data from the Redux store",
    explanation: {
      text: "`useSelector` allows you to extract data from the Redux store state using a selector function.",
      code: false,
    },
  },
  {
    id: 44,
    topic: "React",
    question: "What is the role of `useDispatch` in Redux?",
    code: false,
    language: false,
    options: [
      { text: "It replaces useEffect", code: false },
      { text: "It allows dispatching actions to the Redux store", code: false },
      { text: "It creates global state", code: false },
      { text: "It binds components to reducers", code: false },
    ],
    answer: "It allows dispatching actions to the Redux store",
    explanation: {
      text: "`useDispatch` provides a reference to the dispatch function so you can trigger actions from your components.",
      code: false,
    },
  },
  {
    id: 45,
    topic: "React",
    question: "What library is commonly used for routing in React?",
    code: false,
    language: false,
    options: [
      { text: "React Router", code: false },
      { text: "React DOM", code: false },
      { text: "Redux Router", code: false },
      { text: "Axios", code: false },
    ],
    answer: "React Router",
    explanation: {
      text: "React Router enables navigation and route-based rendering in single-page React applications.",
      code: false,
    },
  },
  {
    id: 46,
    topic: "React",
    question:
      "How do you define a route with dynamic parameters using React Router v6?",
    language: "jsx",
    code: `<Route path="/user/:id" element={<UserPage />} />`,
    options: [
      { text: `<Route path="/user/{id}" />`, code: false },
      { text: `<Route path="/user/:id" />`, code: false },
      { text: `<Route dynamic="/user/id" />`, code: false },
      { text: `<DynamicRoute to="/user/:id" />`, code: false },
    ],
    answer: `<Route path="/user/:id" />`,
    explanation: {
      text: "The colon (`:`) in the path indicates a dynamic segment in React Router.",
      code: false,
    },
  },
  {
    id: 47,
    topic: "React",
    question: "What does React Suspense enable?",
    code: false,
    language: false,
    options: [
      { text: "Automatic error handling", code: false },
      { text: "Optimized CSS loading", code: false },
      { text: "Component lazy loading and fallback UI", code: false },
      { text: "Server-side data fetching", code: false },
    ],
    answer: "Component lazy loading and fallback UI",
    explanation: {
      text: "React Suspense lets you wait for components to load (e.g. via `lazy`) and show a fallback UI meanwhile.",
      code: false,
    },
  },
  {
    id: 48,
    topic: "React",
    question:
      "Which method is used to fetch data in a React component before rendering (on server side)?",
    code: false,
    language: false,
    options: [
      { text: "useEffect", code: false },
      { text: "componentDidMount", code: false },
      { text: "getServerSideProps", code: false },
      { text: "React Query", code: false },
    ],
    answer: "getServerSideProps",
    explanation: {
      text: "getServerSideProps is a Next.js method that fetches data server-side before the component is rendered.",
      code: false,
    },
  },
  {
    id: 49,
    topic: "React",
    question:
      "Which testing library is commonly used to test React components?",
    code: false,
    language: false,
    options: [
      { text: "Jest", code: false },
      { text: "Mocha", code: false },
      { text: "React Testing Library", code: false },
      { text: "Enzyme", code: false },
    ],
    answer: "React Testing Library",
    explanation: {
      text: "React Testing Library encourages testing components in a way that resembles user interaction, focusing on behavior over implementation.",
      code: false,
    },
  },
  {
    id: 50,
    topic: "React",
    question: "What is a thunk in Redux?",
    code: false,
    language: false,
    options: [
      { text: "A way to throttle events", code: false },
      { text: "A middleware to handle asynchronous logic", code: false },
      { text: "A hook for managing state", code: false },
      { text: "A component factory function", code: false },
    ],
    answer: "A middleware to handle asynchronous logic",
    explanation: {
      text: "Redux Thunk allows writing functions that return another function (instead of actions), useful for async operations like API calls.",
      code: false,
    },
  },
  {
    id: 51,
    topic: "React",
    question:
      "Which React feature can you use with `React.lazy()` to dynamically load a component?",
    code: false,
    language: false,
    options: [
      { text: "Error Boundary", code: false },
      { text: "Suspense", code: false },
      { text: "StrictMode", code: false },
      { text: "useMemo", code: false },
    ],
    answer: "Suspense",
    explanation: {
      text: "`React.lazy()` lets you load components dynamically, and Suspense provides a fallback UI while loading.",
      code: false,
    },
  },
  {
    id: 52,
    topic: "React",
    question:
      "Which hook can you use to perform data fetching and caching in React?",
    code: false,
    language: false,
    options: [
      { text: "useCallback", code: false },
      { text: "useRef", code: false },
      { text: "useMemo", code: false },
      { text: "useSWR", code: false },
    ],
    answer: "useSWR",
    explanation: {
      text: "useSWR is a React hook library for data fetching, caching, and revalidation. It's commonly used with REST APIs.",
      code: false,
    },
  },

  // REACT — MISCELLANEOUS (IDs 53–55)

  {
    id: 53,
    topic: "React",
    question: "What is the virtual DOM in React?",
    code: false,
    language: false,
    options: [
      { text: "A direct representation of the HTML DOM", code: false },
      {
        text: "An in-memory representation of the real DOM used for efficient updates",
        code: false,
      },
      { text: "A browser API for animations", code: false },
      { text: "A feature only used in server-side rendering", code: false },
    ],
    answer:
      "An in-memory representation of the real DOM used for efficient updates",
    explanation: {
      text: "React creates a virtual DOM to track changes and update the real DOM efficiently by applying diffs instead of full re-renders.",
      code: false,
    },
  },
  {
    id: 54,
    topic: "React",
    question: "What is reconciliation in React?",
    code: false,
    language: false,
    options: [
      { text: "React's way of resolving state conflicts", code: false },
      {
        text: "The process of comparing the old and new virtual DOM trees to apply updates",
        code: false,
      },
      { text: "A lifecycle hook for cleaning up memory", code: false },
      { text: "An API to fetch data on the server", code: false },
    ],
    answer:
      "The process of comparing the old and new virtual DOM trees to apply updates",
    explanation: {
      text: "Reconciliation is the diffing process React uses to update only the parts of the DOM that changed — improving performance.",
      code: false,
    },
  },
  {
    id: 55,
    topic: "React",
    question: "What is React Fiber?",
    code: false,
    language: false,
    options: [
      { text: "A state management library for React", code: false },
      { text: "The old rendering engine of React", code: false },
      {
        text: "The new reconciliation engine in React that supports incremental rendering",
        code: false,
      },
      { text: "A CSS-in-JS library", code: false },
    ],
    answer:
      "The new reconciliation engine in React that supports incremental rendering",
    explanation: {
      text: "React Fiber is a complete rewrite of React’s core that enables asynchronous rendering and better scheduling of work.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// NEXT JS QUESTIONS

export const nextQuestions = [
  // NEXT.JS — APP ROUTER (IDs 1–10)
  {
    id: 1,
    topic: "Next.js",
    question:
      "What is the purpose of the `app/` directory in the Next.js App Router?",
    code: false,
    language: false,
    options: [
      { text: "To store static assets like images", code: false },
      {
        text: "To define the routing structure and file-based layouts",
        code: false,
      },
      { text: "To configure Webpack and Babel", code: false },
      { text: "To manage environment variables", code: false },
    ],
    answer: "To define the routing structure and file-based layouts",
    explanation: {
      text: "The `app/` directory introduces a new routing system in Next.js based on React Server Components and file-based layouts.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "Next.js",
    question: "What is a layout in the Next.js App Router?",
    code: false,
    language: false,
    options: [
      { text: "A configuration file for SEO metadata", code: false },
      {
        text: "A shared component that wraps pages and persists between route changes",
        code: false,
      },
      { text: "A utility for defining API routes", code: false },
      { text: "A stylesheet file for global styles", code: false },
    ],
    answer:
      "A shared component that wraps pages and persists between route changes",
    explanation: {
      text: "Layouts in the App Router allow you to define UI that is shared across multiple pages, and they persist across navigation.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "Next.js",
    question: "How do you mark a component as client-side in the App Router?",
    code: false,
    language: false,
    options: [
      { text: "By placing it in the `pages/` directory", code: false },
      {
        text: "By using the `use client` directive at the top of the file",
        code: false,
      },
      { text: "By importing it in `_app.js`", code: false },
      { text: "By wrapping it in a `<ClientOnly>` component", code: false },
    ],
    answer: "By using the `use client` directive at the top of the file",
    explanation: {
      text: "Components that include `use client` at the top are treated as client components and can use hooks like `useState` or `useEffect`.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "Next.js",
    question:
      "Which file is used to display a loading UI while a route is being rendered?",
    code: false,
    language: false,
    options: [
      { text: "loading.tsx", code: false },
      { text: "fallback.tsx", code: false },
      { text: "pending.tsx", code: false },
      { text: "wait.tsx", code: false },
    ],
    answer: "loading.tsx",
    explanation: {
      text: "The `loading.tsx` file provides a way to show a loading state while a route segment is being lazily rendered.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "Next.js",
    question: "How do you fetch server-side data in the App Router?",
    code: false,
    language: false,
    options: [
      { text: "By using getServerSideProps", code: false },
      { text: "By calling fetch() inside a Server Component", code: false },
      { text: "By using SWR hook only", code: false },
      { text: "By using useEffect", code: false },
    ],
    answer: "By calling fetch() inside a Server Component",
    explanation: {
      text: "Server Components in the App Router can fetch data directly using `fetch()` since they run on the server.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "Next.js",
    question:
      "What is the default caching behavior of fetch in a Server Component?",
    code: false,
    language: false,
    options: [
      { text: "No cache", code: false },
      { text: "Cached globally and revalidated", code: false },
      { text: "Cached per user session", code: false },
      { text: "Automatically invalidated on every request", code: false },
    ],
    answer: "Cached globally and revalidated",
    explanation: {
      text: "Next.js caches the result of `fetch` by default in Server Components to improve performance and can revalidate it based on configuration.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "Next.js",
    question: "What does the `error.tsx` file do in the App Router?",
    code: false,
    language: false,
    options: [
      { text: "Displays 404 pages only", code: false },
      { text: "Logs errors to the console", code: false },
      { text: "Handles runtime errors and renders a fallback UI", code: false },
      { text: "Shows compile-time warnings", code: false },
    ],
    answer: "Handles runtime errors and renders a fallback UI",
    explanation: {
      text: "The `error.tsx` file allows you to render a custom error fallback for runtime errors within a route segment.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "Next.js",
    question:
      "Which hook should you use to access the current pathname in a client component?",
    code: false,
    language: false,
    options: [
      { text: "useLocation", code: false },
      { text: "usePathname", code: false },
      { text: "useRoute", code: false },
      { text: "useURL", code: false },
    ],
    answer: "usePathname",
    explanation: {
      text: "`usePathname()` is a Next.js App Router hook that gives you the current route path inside a client component.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "Next.js",
    question: "How are dynamic routes defined in the App Router?",
    code: false,
    language: false,
    options: [
      { text: "[slug]/page.tsx", code: false },
      { text: "$slug/page.tsx", code: false },
      { text: ":slug/page.tsx", code: false },
      { text: "{slug}/page.tsx", code: false },
    ],
    answer: "[slug]/page.tsx",
    explanation: {
      text: "In the App Router, dynamic routes use the `[param]` file-naming convention just like in the Pages Router.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "Next.js",
    question: "What is a Server Action in the Next.js App Router?",
    code: false,
    language: false,
    options: [
      { text: "A new kind of API route defined in `pages/api`", code: false },
      {
        text: "A function that runs server-side and can be invoked from a client component",
        code: false,
      },
      { text: "A utility for lazy loading components", code: false },
      { text: "A new event listener system", code: false },
    ],
    answer:
      "A function that runs server-side and can be invoked from a client component",
    explanation: {
      text: "Server Actions allow developers to define functions that run on the server and are triggered from the client without a traditional API route.",
      code: false,
    },
  },

  // NEXT.JS — PAGES ROUTER (IDs 11–13)

  {
    id: 11,
    topic: "Next.js",
    question: "What is the purpose of `getStaticProps` in the Pages Router?",
    code: false,
    language: false,
    options: [
      { text: "To fetch data on the client after the page loads", code: false },
      {
        text: "To fetch data at build time for static generation",
        code: false,
      },
      { text: "To generate server-side dynamic routes", code: false },
      { text: "To fetch data in a layout", code: false },
    ],
    answer: "To fetch data at build time for static generation",
    explanation: {
      text: "`getStaticProps` allows you to fetch data at build time and pre-render the page as a static HTML file.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "Next.js",
    question: "Where do you define `getServerSideProps` in the Pages Router?",
    code: false,
    language: false,
    options: [
      { text: "In `next.config.js`", code: false },
      { text: "Inside the `_document.js` file", code: false },
      { text: "As an export in a page component", code: false },
      { text: "Inside the `public/` folder", code: false },
    ],
    answer: "As an export in a page component",
    explanation: {
      text: "`getServerSideProps` is defined as a named export inside a page component file and is used to fetch data on each request.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "Next.js",
    question:
      "Which of the following files is used to customise the HTML structure in the Pages Router?",
    code: false,
    language: false,
    options: [
      { text: "_document.js", code: false },
      { text: "_app.js", code: false },
      { text: "layout.js", code: false },
      { text: "global.js", code: false },
    ],
    answer: "_document.js",
    explanation: {
      text: "The `_document.js` file allows you to augment the default HTML structure, such as modifying `<html>` or `<body>` tags.",
      code: false,
    },
  },

  // NEXT.JS — GENERAL CONCEPTS (IDs 14–20)

  {
    id: 14,
    topic: "Next.js",
    question: "What is the difference between SSR and SSG in Next.js?",
    code: false,
    language: false,
    options: [
      {
        text: "SSR pre-renders on build, SSG renders at request time",
        code: false,
      },
      {
        text: "SSG is client-side rendering, SSR is static generation",
        code: false,
      },
      {
        text: "SSR renders on every request, SSG pre-renders at build time",
        code: false,
      },
      {
        text: "They are the same in Next.js",
        code: false,
      },
    ],
    answer: "SSR renders on every request, SSG pre-renders at build time",
    explanation: {
      text: "SSR (Server-Side Rendering) fetches data and renders HTML on each request, while SSG (Static Site Generation) does so at build time.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "Next.js",
    question: "Which command is used to generate a static build in Next.js?",
    code: false,
    language: false,
    options: [
      { text: "next dev", code: false },
      { text: "next export", code: false },
      { text: "next build", code: false },
      { text: "next start", code: false },
    ],
    answer: "next export",
    explanation: {
      text: "`next export` outputs a static HTML version of the site — useful when deploying to static hosting environments like Netlify.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "Next.js",
    question: "What is Incremental Static Regeneration (ISR)?",
    code: false,
    language: false,
    options: [
      { text: "A way to load static files on demand", code: false },
      {
        text: "A method to update static pages without a full rebuild",
        code: false,
      },
      {
        text: "A tool to regenerate node_modules",
        code: false,
      },
      { text: "A legacy feature replaced by middleware", code: false },
    ],
    answer: "A method to update static pages without a full rebuild",
    explanation: {
      text: "ISR allows you to serve static content and update it in the background as traffic comes in, without needing a full rebuild.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "Next.js",
    question: "What is the benefit of using the Next.js Image component?",
    code: false,
    language: false,
    options: [
      { text: "It loads images synchronously", code: false },
      {
        text: "It provides automatic image optimization and lazy loading",
        code: false,
      },
      { text: "It works only with static images", code: false },
      { text: "It replaces all `<img>` tags automatically", code: false },
    ],
    answer: "It provides automatic image optimization and lazy loading",
    explanation: {
      text: "The `<Image />` component optimises images with lazy loading, compression, and responsive sizing by default.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "Next.js",
    question: "How can you define environment variables in a Next.js app?",
    code: false,
    language: false,
    options: [
      { text: "In a `.env.local` or `.env` file", code: false },
      { text: "In the `package.json`", code: false },
      { text: "Using the `config.json` file", code: false },
      { text: "Only through Vercel UI", code: false },
    ],
    answer: "In a `.env.local` or `.env` file",
    explanation: {
      text: "Next.js supports environment variables using `.env` files like `.env.local`, `.env.production`, and others.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "Next.js",
    question: "What does `next start` do?",
    code: false,
    language: false,
    options: [
      { text: "Launches the dev server", code: false },
      { text: "Starts a production-ready server after building", code: false },
      { text: "Triggers a new build", code: false },
      { text: "Uploads assets to the cloud", code: false },
    ],
    answer: "Starts a production-ready server after building",
    explanation: {
      text: "`next start` is used to serve the production build of your Next.js app, after running `next build`.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "Next.js",
    question:
      "Which directory should you use to define custom fonts and images?",
    code: false,
    language: false,
    options: [
      { text: "assets/", code: false },
      { text: "resources/", code: false },
      { text: "public/", code: false },
      { text: "static/", code: false },
    ],
    answer: "public/",
    explanation: {
      text: "The `public/` folder in Next.js is used to serve static files such as images, fonts, and documents accessible via `/filename`.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// JAVASCRIPT QUESTIONS

export const javascriptQuestions = [
  // JAVASCRIPT — HOISTING & SCOPING (IDs 1–5)
  {
    id: 1,
    topic: "JavaScript",
    question: "What will this code output?",
    language: "javascript",
    code: `console.log(myVar);
var myVar = 5;`,
    options: [
      { text: "5", code: false },
      { text: "undefined", code: false },
      { text: "ReferenceError", code: false },
      { text: "null", code: false },
    ],
    answer: "undefined",
    explanation: {
      text: "Variable declarations with `var` are hoisted but not initialized. So `myVar` is `undefined` at the time of the `console.log`.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "JavaScript",
    question: "What will this code output?",
    language: "javascript",
    code: `console.log(myVar);
let myVar = 5;`,
    options: [
      { text: "undefined", code: false },
      { text: "5", code: false },
      { text: "ReferenceError", code: false },
      { text: "null", code: false },
    ],
    answer: "ReferenceError",
    explanation: {
      text: "`let` and `const` are hoisted but not accessible before their declaration due to the temporal dead zone (TDZ).",
      code: false,
    },
  },
  {
    id: 3,
    topic: "JavaScript",
    question:
      "What is the scope of a variable declared using `var` inside a function?",
    code: false,
    language: false,
    options: [
      { text: "Block scope", code: false },
      { text: "Global scope", code: false },
      { text: "Function scope", code: false },
      { text: "Module scope", code: false },
    ],
    answer: "Function scope",
    explanation: {
      text: "`var` declarations are function-scoped, meaning they are only accessible within the function in which they are declared.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "JavaScript",
    question: "Which variables are block-scoped?",
    code: false,
    language: false,
    options: [
      { text: "`var`", code: false },
      { text: "`let` and `const`", code: false },
      { text: "`const` only", code: false },
      { text: "`let` only", code: false },
    ],
    answer: "`let` and `const`",
    explanation: {
      text: "Both `let` and `const` are block-scoped, meaning they are only accessible within the block they are defined in.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "JavaScript",
    question: "What is the result of this code?",
    language: "javascript",
    code: `function test() {
  if (true) {
    var x = 5;
  }
  console.log(x);
}
test();`,
    options: [
      { text: "undefined", code: false },
      { text: "ReferenceError", code: false },
      { text: "5", code: false },
      { text: "null", code: false },
    ],
    answer: "5",
    explanation: {
      text: "`var` is function-scoped, not block-scoped. So even though it's declared inside the `if` block, it's accessible in the rest of the function.",
      code: false,
    },
  },

  // JAVASCRIPT — FUNCTIONS (IDs 6–9)
  {
    id: 6,
    topic: "JavaScript",
    question:
      "What is the main difference between a function declaration and a function expression?",
    code: false,
    language: false,
    options: [
      {
        text: "Function expressions can be named, declarations can't",
        code: false,
      },
      { text: "Function declarations are hoisted", code: false },
      { text: "Function expressions are hoisted", code: false },
      { text: "Function declarations can’t access `this`", code: false },
    ],
    answer: "Function declarations are hoisted",
    explanation: {
      text: "Function declarations are hoisted and can be called before they appear in the code. Function expressions are not hoisted.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "JavaScript",
    question: "What will this code output?",
    language: "javascript",
    code: `const add = (a, b) => {
  return a + b;
};
console.log(add(2, 3));`,
    options: [
      { text: "23", code: false },
      { text: "5", code: false },
      { text: "undefined", code: false },
      { text: "NaN", code: false },
    ],
    answer: "5",
    explanation: {
      text: "The arrow function returns the sum of the two numbers correctly.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "JavaScript",
    question: "What is an IIFE (Immediately Invoked Function Expression)?",
    code: false,
    language: false,
    options: [
      { text: "A function that calls itself inside the body", code: false },
      { text: "A function defined in the global scope", code: false },
      { text: "A function that runs as soon as it is defined", code: false },
      { text: "A function that cannot be reused", code: false },
    ],
    answer: "A function that runs as soon as it is defined",
    explanation: {
      text: "An IIFE is a function that is executed immediately after it is created. It's commonly wrapped in parentheses to execute right away.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `function outer() {
  const message = "Hello";
  function inner() {
    console.log(message);
  }
  return inner;
}
const sayHello = outer();
sayHello();`,
    options: [
      { text: `"Hello"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `"message"`, code: false },
      { text: `ReferenceError`, code: false },
    ],
    answer: `"Hello"`,
    explanation: {
      text: "This is an example of a closure — `inner` still has access to the `message` variable from `outer`'s scope.",
      code: false,
    },
  },

  // JAVASCRIPT — ASYNC JS (IDs 10–14)

  {
    id: 10,
    topic: "JavaScript",
    question: "What does a Promise represent in JavaScript?",
    code: false,
    language: false,
    options: [
      { text: "A synchronous operation", code: false },
      {
        text: "A future value or eventual completion of an async operation",
        code: false,
      },
      { text: "A callback function", code: false },
      { text: "An immediately executed function", code: false },
    ],
    answer: "A future value or eventual completion of an async operation",
    explanation: {
      text: "A Promise represents a value that may be available now, or in the future, or never. It's used to handle asynchronous operations.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `console.log("A");
setTimeout(() => console.log("B"), 0);
console.log("C");`,
    options: [
      { text: "A B C", code: false },
      { text: "A C B", code: false },
      { text: "C A B", code: false },
      { text: "B A C", code: false },
    ],
    answer: "A C B",
    explanation: {
      text: "`setTimeout` is asynchronous. The main thread logs A and C first. B is placed in the task queue and logs after.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "JavaScript",
    question:
      "What keyword is used to pause code execution until a Promise resolves?",
    code: false,
    language: false,
    options: [
      { text: "await", code: false },
      { text: "pause", code: false },
      { text: "yield", code: false },
      { text: "defer", code: false },
    ],
    answer: "await",
    explanation: {
      text: "`await` is used with async functions to pause execution until the Promise is resolved or rejected.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `async function fetchData() {
  return "Done";
}
fetchData().then(res => console.log(res));`,
    options: [
      { text: `"Done"`, code: false },
      { text: `undefined`, code: false },
      { text: `Promise`, code: false },
      { text: `ReferenceError`, code: false },
    ],
    answer: `"Done"`,
    explanation: {
      text: "`async` functions always return a Promise, which resolves to the returned value. Here, it resolves to 'Done'.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "JavaScript",
    question:
      "Which part of the JavaScript runtime handles `setTimeout` callbacks?",
    code: false,
    language: false,
    options: [
      { text: "Call stack", code: false },
      { text: "Web APIs / Browser APIs", code: false },
      { text: "Promise queue", code: false },
      { text: "Heap", code: false },
    ],
    answer: "Web APIs / Browser APIs",
    explanation: {
      text: "Functions like `setTimeout` are handled by the browser environment (Web APIs) and placed in the callback queue when done.",
      code: false,
    },
  },

  // JAVASCRIPT — OBJECTS & ARRAYS (IDs 15–18)

  {
    id: 15,
    topic: "JavaScript",
    question: "What is the result of the following code?",
    language: "javascript",
    code: `const obj1 = { a: 1 };
const obj2 = obj1;
obj2.a = 2;
console.log(obj1.a);`,
    options: [
      { text: "1", code: false },
      { text: "2", code: false },
      { text: "undefined", code: false },
      { text: "ReferenceError", code: false },
    ],
    answer: "2",
    explanation: {
      text: "Objects are passed by reference in JavaScript. Changing `obj2.a` also changes `obj1.a` since both point to the same object.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "JavaScript",
    question: "What is the spread operator used for in JavaScript?",
    code: false,
    language: false,
    options: [
      { text: "To convert a string to a number", code: false },
      { text: "To copy and expand arrays or objects", code: false },
      { text: "To create a Promise", code: false },
      { text: "To bind `this`", code: false },
    ],
    answer: "To copy and expand arrays or objects",
    explanation: {
      text: "The spread operator (`...`) is used to expand iterable values (like arrays or objects) into individual elements or properties.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `const [a, b] = [1, 2, 3];
console.log(a, b);`,
    options: [
      { text: "1 2", code: false },
      { text: "1 3", code: false },
      { text: "undefined undefined", code: false },
      { text: "3 1", code: false },
    ],
    answer: "1 2",
    explanation: {
      text: "Destructuring assigns the first two values of the array to variables `a` and `b`.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "JavaScript",
    question:
      "Which method creates a new array with only elements that pass a condition?",
    code: false,
    language: false,
    options: [
      { text: "map()", code: false },
      { text: "forEach()", code: false },
      { text: "filter()", code: false },
      { text: "reduce()", code: false },
    ],
    answer: "filter()",
    explanation: {
      text: "`filter()` returns a new array containing elements for which the callback returns `true`.",
      code: false,
    },
  },
  // JAVASCRIPT — DOM & BOM (IDs 19–21)

  {
    id: 19,
    topic: "JavaScript",
    question: 'What does `document.querySelector(".my-class")` return?',
    code: false,
    language: false,
    options: [
      { text: "A NodeList of matching elements", code: false },
      { text: "An array of elements with the class 'my-class'", code: false },
      { text: "The first element that matches the selector", code: false },
      { text: "null if no element is found", code: false },
    ],
    answer: "The first element that matches the selector",
    explanation: {
      text: "`querySelector()` returns the first element that matches the given CSS selector. Use `querySelectorAll()` for a NodeList of all matches.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "JavaScript",
    question:
      "Which of the following methods is used to attach an event listener to a DOM element?",
    code: false,
    language: false,
    options: [
      { text: "addEvent()", code: false },
      { text: "onEvent()", code: false },
      { text: "addEventListener()", code: false },
      { text: "attachEvent()", code: false },
    ],
    answer: "addEventListener()",
    explanation: {
      text: "`addEventListener()` is the modern method for registering event handlers on DOM elements.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "JavaScript",
    question: "What is the purpose of `window.setInterval()`?",
    code: false,
    language: false,
    options: [
      { text: "To run code after a delay", code: false },
      {
        text: "To execute a function repeatedly at a specified interval",
        code: false,
      },
      { text: "To create a loop", code: false },
      { text: "To run code once when the page loads", code: false },
    ],
    answer: "To execute a function repeatedly at a specified interval",
    explanation: {
      text: "`setInterval()` repeatedly calls a function with a fixed time delay between each call, until cleared with `clearInterval()`.",
      code: false,
    },
  },

  // JAVASCRIPT — THIS / CALL / APPLY / BIND (IDs 22–24)

  {
    id: 22,
    topic: "JavaScript",
    question:
      "What does `this` refer to inside a regular function (not an arrow function) in non-strict mode?",
    code: false,
    language: false,
    options: [
      { text: "The global object (e.g. `window`)", code: false },
      { text: "undefined", code: false },
      { text: "The function itself", code: false },
      { text: "The object that called it", code: false },
    ],
    answer: "The global object (e.g. `window`)",
    explanation: {
      text: "In non-strict mode, regular functions default `this` to the global object if not called as a method.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "JavaScript",
    question:
      "Which method allows you to call a function with a specific `this` value and arguments as an array?",
    code: false,
    language: false,
    options: [
      { text: "call()", code: false },
      { text: "apply()", code: false },
      { text: "bind()", code: false },
      { text: "spread()", code: false },
    ],
    answer: "apply()",
    explanation: {
      text: "`apply()` is used to invoke a function with a specified `this` and arguments passed as an array.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "JavaScript",
    question: "What does the `bind()` method return?",
    code: false,
    language: false,
    options: [
      {
        text: "A function that calls the original function immediately",
        code: false,
      },
      { text: "A new function with permanently bound `this`", code: false },
      { text: "An object", code: false },
      { text: "A reference to the original function", code: false },
    ],
    answer: "A new function with permanently bound `this`",
    explanation: {
      text: "`bind()` returns a new function with a fixed `this` value, without calling the original function immediately.",
      code: false,
    },
  },

  // JAVASCRIPT — TYPE COERCION (IDs 25–27)

  {
    id: 25,
    topic: "JavaScript",
    question: "What is the result of `'5' + 2`?",
    code: false,
    language: false,
    options: [
      { text: `"7"`, code: false },
      { text: `"52"`, code: false },
      { text: `7`, code: false },
      { text: `NaN`, code: false },
    ],
    answer: `"52"`,
    explanation: {
      text: "In JavaScript, the `+` operator with a string and number triggers string concatenation.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "JavaScript",
    question:
      "Which of the following values is loosely equal (`==`) to `false`?",
    code: false,
    language: false,
    options: [
      { text: `"0"`, code: false },
      { text: `"false"`, code: false },
      { text: `"null"`, code: false },
      { text: `"undefined"`, code: false },
    ],
    answer: `"0"`,
    explanation: {
      text: "`'0' == false` is true due to type coercion. JavaScript converts both to numbers before comparing.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "JavaScript",
    question: "Which operator does NOT trigger type coercion?",
    code: false,
    language: false,
    options: [
      { text: `"=="`, code: false },
      { text: `"+"`, code: false },
      { text: `"==="`, code: false },
      { text: `"!="`, code: false },
    ],
    answer: `"==="`,
    explanation: {
      text: "`===` (strict equality) checks both type and value, and does NOT perform type coercion.",
      code: false,
    },
  },

  // JAVASCRIPT — PROTOTYPES (IDs 28–30)

  {
    id: 28,
    topic: "JavaScript",
    question: "What is the prototype chain?",
    code: false,
    language: false,
    options: [
      { text: "A list of all properties of an object", code: false },
      {
        text: "A mechanism to inherit properties from other objects",
        code: false,
      },
      { text: "A way to bind functions", code: false },
      { text: "A loop of function calls", code: false },
    ],
    answer: "A mechanism to inherit properties from other objects",
    explanation: {
      text: "The prototype chain allows objects to inherit methods and properties from their prototype.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "JavaScript",
    question: "What is the prototype of an object created via `{}`?",
    code: false,
    language: false,
    options: [
      { text: "null", code: false },
      { text: "Function.prototype", code: false },
      { text: "Object.prototype", code: false },
      { text: "Array.prototype", code: false },
    ],
    answer: "Object.prototype",
    explanation: {
      text: "`{}` creates a plain object whose prototype is `Object.prototype`.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `function Person(name) {
  this.name = name;
}
Person.prototype.greet = function () {
  return "Hello " + this.name;
};
const user = new Person("Ema");
console.log(user.greet());`,
    options: [
      { text: `"Hello Ema"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `TypeError`, code: false },
      { text: `"Hello"`, code: false },
    ],
    answer: `"Hello Ema"`,
    explanation: {
      text: "The method `greet()` is available via the prototype chain. It uses `this.name` from the instance `user`.",
      code: false,
    },
  },

  // JAVASCRIPT — MISCELLANEOUS (IDs 31–33)

  {
    id: 31,
    topic: "JavaScript",
    question: "What does `typeof NaN` return?",
    code: false,
    language: false,
    options: [
      { text: `"number"`, code: false },
      { text: `"NaN"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `"object"`, code: false },
    ],
    answer: `"number"`,
    explanation: {
      text: "`typeof NaN` returns 'number'. This is a well-known quirk in JavaScript.",
      code: false,
    },
  },
  {
    id: 32,
    topic: "JavaScript",
    question: "What does `Object.freeze()` do?",
    code: false,
    language: false,
    options: [
      { text: "Makes an object immutable", code: false },
      { text: "Deletes all object keys", code: false },
      { text: "Prevents iteration over properties", code: false },
      { text: "Turns the object into a primitive", code: false },
    ],
    answer: "Makes an object immutable",
    explanation: {
      text: "`Object.freeze()` prevents new properties from being added, and existing properties from being changed or deleted.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "JavaScript",
    question:
      "Which global object provides methods for encoding and decoding base64 strings?",
    code: false,
    language: false,
    options: [
      { text: "JSON", code: false },
      { text: "B64", code: false },
      { text: "Base64", code: false },
      { text: "window", code: false },
    ],
    answer: "window",
    explanation: {
      text: "`window.atob()` and `window.btoa()` can be used to decode and encode base64 strings in the browser.",
      code: false,
    },
  },

  // JAVASCRIPT — CODE OUTPUT & ERROR SPOTTING (IDs 34–39)

  {
    id: 34,
    topic: "JavaScript",
    question: "What will this code output?",
    language: "javascript",
    code: `let a = 10;
(function() {
  console.log(a);
  let a = 5;
})();`,
    options: [
      { text: `"10"`, code: false },
      { text: `"5"`, code: false },
      { text: `undefined`, code: false },
      { text: `ReferenceError`, code: false },
    ],
    answer: "ReferenceError",
    explanation: {
      text: "Due to `let`'s temporal dead zone, `a` is hoisted but not initialized. Accessing it before declaration throws a ReferenceError.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "JavaScript",
    question: "What will this code log?",
    language: "javascript",
    code: `const obj = {
  message: "Hello",
  logMessage: function () {
    console.log(this.message);
  },
};
setTimeout(obj.logMessage, 100);`,
    options: [
      { text: `"Hello"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `"logMessage"`, code: false },
      { text: `TypeError`, code: false },
    ],
    answer: `"undefined"`,
    explanation: {
      text: "`setTimeout(obj.logMessage)` detaches the method from the object. `this` becomes `window` (or `undefined` in strict mode), so `this.message` is `undefined`.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "JavaScript",
    question: "What is the result of this code?",
    language: "javascript",
    code: `const result = [] + 1 + 2;
console.log(result);`,
    options: [
      { text: `"3"`, code: false },
      { text: `"12"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `TypeError`, code: false },
    ],
    answer: `"12"`,
    explanation: {
      text: '`[] + 1` results in `"1"`, then `"1" + 2` becomes `"12"`. JavaScript coerces values to strings when using `+` with arrays.',
      code: false,
    },
  },
  {
    id: 37,
    topic: "JavaScript",
    question: "What will this code print?",
    language: "javascript",
    code: `for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 0);
}`,
    options: [
      { text: `"0", "1", "2"`, code: false },
      { text: `"3", "3", "3"`, code: false },
      { text: `"0", "1", "2", "3"`, code: false },
      { text: `"undefined", "undefined", "undefined"`, code: false },
    ],
    answer: `"3", "3", "3"`,
    explanation: {
      text: "Due to `var` being function-scoped, all timeouts share the same `i`, which becomes 3 after the loop ends.",
      code: false,
    },
  },
  {
    id: 38,
    topic: "JavaScript",
    question: "What happens when you run this?",
    language: "javascript",
    code: `let x = 1;
x();`,
    options: [
      { text: `"1"`, code: false },
      { text: `TypeError`, code: false },
      { text: `ReferenceError`, code: false },
      { text: `"x()"`, code: false },
    ],
    answer: "TypeError",
    explanation: {
      text: "`x` is a number, not a function. Calling a non-function like `x()` throws a TypeError.",
      code: false,
    },
  },
  {
    id: 39,
    topic: "JavaScript",
    question: "What is the result of the following code?",
    language: "javascript",
    code: `console.log(typeof null);`,
    options: [
      { text: `"null"`, code: false },
      { text: `"object"`, code: false },
      { text: `"undefined"`, code: false },
      { text: `"NaN"`, code: false },
    ],
    answer: `"object"`,
    explanation: {
      text: "`typeof null` returns `'object'`. This is a long-standing bug in JavaScript that remains for legacy reasons.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// NODE JS QUESTIONS

export const nodeJsQuestions = [
  // 1–4: CORE MODULES (fs, path, os, http)
  {
    id: 1,
    topic: "Node.js",
    question:
      "Which core module is used to work with the file system in Node.js?",
    code: false,
    language: false,
    options: [
      { text: "path", code: false },
      { text: "os", code: false },
      { text: "fs", code: false },
      { text: "http", code: false },
    ],
    answer: "fs",
    explanation: {
      text: "The 'fs' module provides an API for interacting with the file system in Node.js.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "Node.js",
    question:
      "Which core module provides utilities for working with file and directory paths?",
    code: false,
    language: false,
    options: [
      { text: "fs", code: false },
      { text: "path", code: false },
      { text: "http", code: false },
      { text: "os", code: false },
    ],
    answer: "path",
    explanation: {
      text: "The 'path' module helps in handling and transforming file paths.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "Node.js",
    question: "Which method of the 'http' module creates a new HTTP server?",
    code: false,
    language: false,
    options: [
      { text: "http.get()", code: false },
      { text: "http.request()", code: false },
      { text: "http.createServer()", code: false },
      { text: "http.Server()", code: false },
    ],
    answer: "http.createServer()",
    explanation: {
      text: "The 'http.createServer()' method returns a new web server object.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "Node.js",
    question:
      "Which core module provides operating system-related utility methods and properties?",
    code: false,
    language: false,
    options: [
      { text: "process", code: false },
      { text: "cluster", code: false },
      { text: "os", code: false },
      { text: "events", code: false },
    ],
    answer: "os",
    explanation: {
      text: "The 'os' module provides a number of operating system-related utility methods and properties.",
      code: false,
    },
  },

  // 5–8: EVENT LOOP & ASYNC (Call stack, event queue, timers, setImmediate)
  {
    id: 5,
    topic: "Node.js",
    question: "What is the Node.js event loop responsible for?",
    code: false,
    language: false,
    options: [
      { text: "Running only synchronous code", code: false },
      { text: "Managing and dispatching asynchronous callbacks", code: false },
      { text: "Compiling C++ add-ons", code: false },
      { text: "Rendering front-end templates", code: false },
    ],
    answer: "Managing and dispatching asynchronous callbacks",
    explanation: {
      text: "The event loop is the core mechanism that processes asynchronous operations and their callbacks in Node.js.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "Node.js",
    question:
      "In which phase of the event loop are callbacks scheduled by setTimeout() and setInterval() executed?",
    code: false,
    language: false,
    options: [
      { text: "Poll phase", code: false },
      { text: "Timers phase", code: false },
      { text: "Check phase", code: false },
      { text: "Close callbacks phase", code: false },
    ],
    answer: "Timers phase",
    explanation: {
      text: "Callbacks set by setTimeout() and setInterval() are executed in the Timers phase of the Node.js event loop.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "Node.js",
    question:
      "What is the difference between setImmediate() and setTimeout(fn, 0) in Node.js?",
    code: false,
    language: false,
    options: [
      {
        text: "setImmediate() runs immediately, setTimeout(fn, 0) is never called",
        code: false,
      },
      {
        text: "setImmediate() runs after I/O events, setTimeout(fn, 0) schedules a callback in the Timers phase",
        code: false,
      },
      {
        text: "They are both aliases for the same function",
        code: false,
      },
      {
        text: "setImmediate() always runs before setTimeout(fn, 0)",
        code: false,
      },
    ],
    answer:
      "setImmediate() runs after I/O events, setTimeout(fn, 0) schedules a callback in the Timers phase",
    explanation: {
      text: "setTimeout(fn, 0) executes in the Timers phase, while setImmediate(fn) executes after the Poll phase in the Check phase.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "Node.js",
    question:
      "Which built-in module in Node.js can be used to handle and emit custom events?",
    code: false,
    language: false,
    options: [
      { text: "events", code: false },
      { text: "stream", code: false },
      { text: "util", code: false },
      { text: "dns", code: false },
    ],
    answer: "events",
    explanation: {
      text: "The 'events' module allows you to create, fire, and listen to your own events in Node.js using EventEmitter.",
      code: false,
    },
  },

  // 9–11: COMMONJS & ES MODULES (require vs import, module.exports)
  {
    id: 9,
    topic: "Node.js",
    question:
      "Which syntax is used by CommonJS for importing modules in Node.js?",
    code: false,
    language: false,
    options: [
      { text: "import myModule from 'myModule'", code: false },
      { text: "const myModule = require('myModule')", code: false },
      { text: "include 'myModule'", code: false },
      { text: "load('myModule')", code: false },
    ],
    answer: "const myModule = require('myModule')",
    explanation: {
      text: "CommonJS uses require() to import modules. ES Modules use import statements.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "Node.js",
    question: "How do you export a module in CommonJS?",
    code: false,
    language: false,
    options: [
      { text: "export default myFunc", code: false },
      { text: "module.export = myFunc", code: false },
      { text: "module.exports = myFunc", code: false },
      { text: "exports(myFunc)", code: false },
    ],
    answer: "module.exports = myFunc",
    explanation: {
      text: "In CommonJS, module.exports is used to define what a module exports. ES Modules typically use export statements.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "Node.js",
    question:
      "Which property or file extension tells Node.js to treat your code as an ES Module instead of CommonJS?",
    code: false,
    language: false,
    options: [
      {
        text: "Adding 'type': 'module' in package.json or using .mjs extension",
        code: false,
      },
      { text: "Using .esm extension only", code: false },
      { text: "Using the 'export' keyword exclusively", code: false },
      { text: "There is no way to do that in Node.js", code: false },
    ],
    answer: "Adding 'type': 'module' in package.json or using .mjs extension",
    explanation: {
      text: "You can add 'type': 'module' in package.json or rename your files to .mjs to enable ES Module support in Node.js.",
      code: false,
    },
  },

  // 12–14: FILE SYSTEM (read/write files, sync vs async methods)
  {
    id: 12,
    topic: "Node.js",
    question:
      "Which method can be used to read a file asynchronously in Node.js?",
    code: false,
    language: false,
    options: [
      { text: "fs.readFileSync()", code: false },
      { text: "fs.read()", code: false },
      { text: "fs.readFile()", code: false },
      { text: "fs.streamFile()", code: false },
    ],
    answer: "fs.readFile()",
    explanation: {
      text: "fs.readFile() is the asynchronous method for reading files. fs.readFileSync() is the synchronous counterpart.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "Node.js",
    question:
      "Which of the following methods writes data to a file synchronously?",
    code: false,
    language: false,
    options: [
      { text: "fs.writeFile()", code: false },
      { text: "fs.write()", code: false },
      { text: "fs.writeFileSync()", code: false },
      { text: "fs.syncWrite()", code: false },
    ],
    answer: "fs.writeFileSync()",
    explanation: {
      text: "fs.writeFileSync() blocks the event loop until the file has been written, while fs.writeFile() is asynchronous.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "Node.js",
    question:
      "How do you properly handle file system errors with fs.readFile()?",
    code: false,
    language: false,
    options: [
      {
        text: "Ignore the error parameter in the callback",
        code: false,
      },
      {
        text: "Use a try/catch around fs.readFile()",
        code: false,
      },
      {
        text: "Check the error argument in the callback or promise rejection",
        code: false,
      },
      {
        text: "No error handling is necessary",
        code: false,
      },
    ],
    answer: "Check the error argument in the callback or promise rejection",
    explanation: {
      text: "In asynchronous methods, Node.js passes the error as the first callback argument. If using promises, handle with .catch().",
      code: false,
    },
  },

  // 15–17: PROCESS & ENVIRONMENT (process.env, argv, exit, cwd)
  {
    id: 15,
    topic: "Node.js",
    question:
      "How do you access environment variables in a Node.js application?",
    code: false,
    language: false,
    options: [
      { text: "process.env", code: false },
      { text: "env.process", code: false },
      { text: "os.env", code: false },
      { text: "global.envVars", code: false },
    ],
    answer: "process.env",
    explanation: {
      text: "Environment variables are exposed in Node.js through the process.env object.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "Node.js",
    question: "Which property in Node.js provides the command-line arguments?",
    code: false,
    language: false,
    options: [
      { text: "process.args", code: false },
      { text: "process.argv", code: false },
      { text: "process.commandLine", code: false },
      { text: "os.arguments", code: false },
    ],
    answer: "process.argv",
    explanation: {
      text: "process.argv is an array containing the command-line arguments passed when the Node.js process was launched.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "Node.js",
    question: "How do you exit a Node.js process programmatically?",
    code: false,
    language: false,
    options: [
      { text: "process.stop()", code: false },
      { text: "process.exit()", code: false },
      { text: "exit.process()", code: false },
      { text: "global.exit()", code: false },
    ],
    answer: "process.exit()",
    explanation: {
      text: "Calling process.exit() will immediately end the Node.js process with the specified exit code (default is 0).",
      code: false,
    },
  },

  // 18–19: NPM & PACKAGE MANAGEMENT (dependencies, scripts, versioning)
  {
    id: 18,
    topic: "Node.js",
    question:
      "Which section of the package.json file lists the production dependencies of a project?",
    code: false,
    language: false,
    options: [
      { text: "peerDependencies", code: false },
      { text: "devDependencies", code: false },
      { text: "dependencies", code: false },
      { text: "bundledDependencies", code: false },
    ],
    answer: "dependencies",
    explanation: {
      text: "dependencies in package.json are libraries required by your project in production. devDependencies are usually for development/testing.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "Node.js",
    question:
      "How do you run a script named 'build' defined in your package.json?",
    code: false,
    language: false,
    options: [
      { text: "npm build", code: false },
      { text: "node build", code: false },
      { text: "npm run build", code: false },
      { text: "npm script build", code: false },
    ],
    answer: "npm run build",
    explanation: {
      text: "Scripts in package.json can be executed with 'npm run <scriptName>'.",
      code: false,
    },
  },

  // 20–23: EXPRESS.JS BASICS (Routes, middleware, req/res)
  {
    id: 20,
    topic: "Node.js",
    question:
      "Which method is used to define a route for GET requests in an Express app?",
    code: false,
    language: false,
    options: [
      { text: "app.router()", code: false },
      { text: "app.route()", code: false },
      { text: "app.get()", code: false },
      { text: "app.fetch()", code: false },
    ],
    answer: "app.get()",
    explanation: {
      text: "app.get(path, callback) is used to handle GET requests in Express.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "Node.js",
    question: "In Express.js, what is middleware?",
    code: false,
    language: false,
    options: [
      { text: "An HTTP server replacement", code: false },
      {
        text: "A function that runs during the request/response cycle",
        code: false,
      },
      { text: "A database driver", code: false },
      { text: "A logging utility", code: false },
    ],
    answer: "A function that runs during the request/response cycle",
    explanation: {
      text: "Middleware are functions that have access to the req and res objects and can modify them or end the request-response process.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "Node.js",
    question: "How do you access URL parameters (e.g., :id) in Express?",
    code: `app.get("/users/:id", (req, res) => {
  // ?
});`,
    language: "javascript",
    options: [
      { text: "req.body", code: false },
      { text: "req.params", code: false },
      { text: "req.query", code: false },
      { text: "req.id", code: false },
    ],
    answer: "req.params",
    explanation: {
      text: "In Express, named route parameters are captured in req.params. For query strings, use req.query.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "Node.js",
    question:
      "Which object in an Express route handler is used to send a response back to the client?",
    code: false,
    language: false,
    options: [
      { text: "req", code: false },
      { text: "res", code: false },
      { text: "next", code: false },
      { text: "app", code: false },
    ],
    answer: "res",
    explanation: {
      text: "res (short for response) is used to send back the HTTP response (e.g., res.send, res.json).",
      code: false,
    },
  },

  // 24–25: ERROR HANDLING & DEBUGGING (try/catch, async errors, debugging tools)
  {
    id: 24,
    topic: "Node.js",
    question: "How do you handle errors in an async/await function in Node.js?",
    code: false,
    language: false,
    options: [
      {
        text: "Use a try/catch block or handle promise rejections",
        code: false,
      },
      { text: "Node.js automatically handles async errors", code: false },
      { text: "Ignore them because they never occur", code: false },
      { text: "Wrap the code in a synchronous function", code: false },
    ],
    answer: "Use a try/catch block or handle promise rejections",
    explanation: {
      text: "With async/await, you can wrap await calls in try/catch or chain a .catch() on the Promise to handle errors.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "Node.js",
    question:
      "Which Node.js built-in feature allows you to debug your application with breakpoints?",
    code: false,
    language: false,
    options: [
      { text: "The 'debugger' statement and 'node inspect'", code: false },
      { text: "fs debugger method", code: false },
      { text: "setImmediate debugging", code: false },
      { text: "require('debugger') module", code: false },
    ],
    answer: "The 'debugger' statement and 'node inspect'",
    explanation: {
      text: "You can use the 'debugger' keyword in your code and run 'node inspect' to pause execution at breakpoints.",
      code: false,
    },
  },

  // 26–27: MISCELLANEOUS (Global objects, REPL, Node.js CLI tools)
  {
    id: 26,
    topic: "Node.js",
    question:
      "Which global object in Node.js is used to handle the current module's exports?",
    code: false,
    language: false,
    options: [
      { text: "globalThis", code: false },
      { text: "process", code: false },
      { text: "module and exports", code: false },
      { text: "window", code: false },
    ],
    answer: "module and exports",
    explanation: {
      text: "In CommonJS, 'module' and 'exports' are global-like objects that control what a file exports.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "Node.js",
    question: "What is the Node.js REPL used for?",
    code: false,
    language: false,
    options: [
      { text: "A remote event processing library", code: false },
      { text: "A built-in testing framework", code: false },
      {
        text: "An interactive shell for executing JavaScript code",
        code: false,
      },
      { text: "A tool for bundling modules", code: false },
    ],
    answer: "An interactive shell for executing JavaScript code",
    explanation: {
      text: "REPL stands for Read-Eval-Print Loop, allowing you to quickly test and explore JavaScript/Node.js code in an interactive shell.",
      code: false,
    },
  },

  // 28–29: STREAMS
  {
    id: 28,
    topic: "Node.js",
    question: "What is a stream in Node.js?",
    code: false,
    language: false,
    options: [
      { text: "A function that blocks the event loop", code: false },
      {
        text: "A synchronous I/O method for reading/writing data",
        code: false,
      },
      {
        text: "An object that handles continuous reading or writing of data",
        code: false,
      },
      {
        text: "A type of child process created by the 'child_process' module",
        code: false,
      },
    ],
    answer: "An object that handles continuous reading or writing of data",
    explanation: {
      text: "Streams are Node.js' way of handling continuous I/O of data. They can be readable, writable, duplex, or transform streams, and they help with processing data efficiently without reading it all into memory at once.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "Node.js",
    question:
      "What is backpressure in Node.js streams, and how can it be handled?",
    code: false,
    language: false,
    options: [
      {
        text: "When a writable stream closes unexpectedly; handled by catching 'close' events",
        code: false,
      },
      {
        text: "When the OS restricts memory usage in Node; handled by the 'mem' module",
        code: false,
      },
      {
        text: "When a writable stream receives data faster than it can consume; handled by pausing or listening for 'drain' events",
        code: false,
      },
      {
        text: "When a stream automatically flushes internal buffers; handled by 'stream.flush()'",
        code: false,
      },
    ],
    answer:
      "When a writable stream receives data faster than it can consume; handled by pausing or listening for 'drain' events",
    explanation: {
      text: "Backpressure occurs if the consumer of a stream cannot process data as quickly as it’s received. In Node.js, you typically handle this by checking the return value of .write(), listening for 'drain', or pausing/resuming the stream.",
      code: false,
    },
  },

  // 30–31: CHILD PROCESSES
  {
    id: 30,
    topic: "Node.js",
    question:
      "Which method is used to spawn a new process without buffering the output?",
    code: false,
    language: false,
    options: [
      { text: "child_process.exec()", code: false },
      { text: "child_process.spawn()", code: false },
      { text: "child_process.fork()", code: false },
      { text: "child_process.run()", code: false },
    ],
    answer: "child_process.spawn()",
    explanation: {
      text: "child_process.spawn() launches a new process and streams the I/O between the parent and child. By contrast, exec() buffers the output and is best for smaller tasks.",
      code: false,
    },
  },
  {
    id: 31,
    topic: "Node.js",
    question:
      "What is the main difference between child_process.spawn() and child_process.exec()?",
    code: false,
    language: false,
    options: [
      {
        text: "exec() streams data, spawn() buffers data",
        code: false,
      },
      {
        text: "spawn() buffers output and returns it all at once, exec() provides streaming I/O",
        code: false,
      },
      {
        text: "spawn() can handle large outputs via streams, exec() buffers the entire output in memory",
        code: false,
      },
      {
        text: "They are identical except for the command syntax",
        code: false,
      },
    ],
    answer:
      "spawn() can handle large outputs via streams, exec() buffers the entire output in memory",
    explanation: {
      text: "spawn() is suitable for long-running processes or large data, as it streams the output. exec() buffers the entire output, making it simpler for smaller tasks.",
      code: false,
    },
  },

  // 32–33: SECURITY & BEST PRACTICES
  {
    id: 32,
    topic: "Node.js",
    question:
      "Which middleware can help set various HTTP headers for security in an Express app?",
    code: false,
    language: false,
    options: [
      { text: "cors", code: false },
      { text: "helmet", code: false },
      { text: "cookie-parser", code: false },
      { text: "morgan", code: false },
    ],
    answer: "helmet",
    explanation: {
      text: "Helmet is a collection of middleware functions that help set secure HTTP headers in Express-based apps, preventing common vulnerabilities.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "Node.js",
    question:
      "Which practice helps secure sensitive configuration data (e.g., API keys) in Node.js?",
    code: false,
    language: false,
    options: [
      {
        text: "Storing secrets directly in code and committing to Git",
        code: false,
      },
      {
        text: "Using environment variables or .env files with a .gitignore",
        code: false,
      },
      { text: "Keeping all secrets in an unencrypted JSON file", code: false },
      { text: "Hard-coding secrets into package.json", code: false },
    ],
    answer: "Using environment variables or .env files with a .gitignore",
    explanation: {
      text: "For security, sensitive data should never be committed to public repositories. Environment variables (or .env files) keep secrets out of the codebase and can be added to .gitignore.",
      code: false,
    },
  },

  // 34–35: PERFORMANCE & CLUSTERING
  {
    id: 34,
    topic: "Node.js",
    question: "How does the Node.js 'cluster' module help improve performance?",
    code: false,
    language: false,
    options: [
      { text: "By bundling and minifying JS files automatically", code: false },
      {
        text: "By allowing multiple workers to share the same server port and utilize multiple CPU cores",
        code: false,
      },
      { text: "By enabling hot module reloading", code: false },
      { text: "By automatically caching API responses", code: false },
    ],
    answer:
      "By allowing multiple workers to share the same server port and utilize multiple CPU cores",
    explanation: {
      text: "Cluster allows you to create child processes (workers) that share server ports, making better use of multi-core systems.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "Node.js",
    question:
      "Which tool or approach is commonly used for load balancing a clustered Node.js application?",
    code: false,
    language: false,
    options: [
      {
        text: "Using Node.js' built-in HTTP server without clustering",
        code: false,
      },
      {
        text: "Using a process manager like PM2 or an external load balancer (e.g., Nginx)",
        code: false,
      },
      { text: "Using 'fs' module to route requests", code: false },
      {
        text: "Using a single instance with multiple setImmediate() calls",
        code: false,
      },
    ],
    answer:
      "Using a process manager like PM2 or an external load balancer (e.g., Nginx)",
    explanation: {
      text: "Tools like PM2 or Nginx (as a reverse proxy) are common approaches to load balancing multiple Node.js cluster workers or processes.",
      code: false,
    },
  },

  // 36–37: TESTING & DEBUGGING
  {
    id: 36,
    topic: "Node.js",
    question:
      "Which testing framework is often used to write and run tests in Node.js applications?",
    code: false,
    language: false,
    options: [
      { text: "Mocha or Jest", code: false },
      { text: "Babel", code: false },
      { text: "Express", code: false },
      { text: "Webpack", code: false },
    ],
    answer: "Mocha or Jest",
    explanation: {
      text: "Mocha and Jest are two popular testing frameworks for Node.js. They allow you to define test suites and assertions for various parts of your application.",
      code: false,
    },
  },
  {
    id: 37,
    topic: "Node.js",
    question:
      "How can you debug Node.js applications using the built-in tools?",
    code: false,
    language: false,
    options: [
      {
        text: "Add the 'debugger' statement in the code and use 'node inspect' or Chrome DevTools",
        code: false,
      },
      {
        text: "Only console.log() can be used; there are no built-in tools",
        code: false,
      },
      { text: "You must install a third-party native module", code: false },
      { text: "Use the 'fs' module to log debug info to a file", code: false },
    ],
    answer:
      "Add the 'debugger' statement in the code and use 'node inspect' or Chrome DevTools",
    explanation: {
      text: "You can insert 'debugger' in your code, then run 'node inspect <file.js>' (or attach Chrome DevTools) to debug Node.js applications.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// REACT NATIVE QUESTIONS

export const reactNativeQuestions = [
  // 1–3: REACT NATIVE BASICS
  {
    id: 1,
    topic: "React Native",
    question: "What is the purpose of React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "To build cross-platform mobile apps using JavaScript",
        code: false,
      },
      { text: "To create backend servers", code: false },
      { text: "To optimize web apps for mobile devices", code: false },
      { text: "To manage mobile databases", code: false },
    ],
    answer: "To build cross-platform mobile apps using JavaScript",
    explanation: {
      text: "React Native lets you build native-like mobile apps for iOS and Android using JavaScript and React principles.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "React Native",
    question:
      "How does React Native differ from React for the web in terms of rendering?",
    code: false,
    language: false,
    options: [
      {
        text: "React Native renders platform-native components instead of the browser DOM",
        code: false,
      },
      {
        text: "There is no difference; both render HTML elements",
        code: false,
      },
      {
        text: "React Native uses iframes to display content",
        code: false,
      },
      {
        text: "React Native can only render text-based components",
        code: false,
      },
    ],
    answer:
      "React Native renders platform-native components instead of the browser DOM",
    explanation: {
      text: "React Native uses native widgets (e.g., UIView on iOS, View on Android) rather than HTML divs and spans.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "React Native",
    question: "What is Expo in the React Native ecosystem?",
    code: false,
    language: false,
    options: [
      {
        text: "A toolchain that simplifies React Native development with managed workflows",
        code: false,
      },
      {
        text: "A library for building backend APIs",
        code: false,
      },
      {
        text: "A component library for advanced animations",
        code: false,
      },
      {
        text: "An alternative language that compiles to React Native",
        code: false,
      },
    ],
    answer:
      "A toolchain that simplifies React Native development with managed workflows",
    explanation: {
      text: "Expo provides a set of services, an SDK, and a CLI to help quickly start, build, and deploy React Native apps without touching native code (unless you choose to eject).",
      code: false,
    },
  },

  // 4–6: COMPONENTS & PROPS
  {
    id: 4,
    topic: "React Native",
    question:
      "Which React Native core component is used to render text on the screen?",
    code: false,
    language: false,
    options: [
      { text: "Text", code: false },
      { text: "Label", code: false },
      { text: "View", code: false },
      { text: "Span", code: false },
    ],
    answer: "Text",
    explanation: {
      text: "Unlike React for the web (which uses <div> and <span>), React Native has <View> and <Text> for structure and textual content, respectively.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "React Native",
    question:
      "What is the correct way to pass props to a custom React Native component?",
    code: false,
    language: false,
    options: [
      {
        text: "<MyComponent myProp='hello' />",
        code: false,
      },
      {
        text: "<MyComponent props={{ myProp: 'hello' }} />",
        code: false,
      },
      {
        text: "<MyComponent :myProp='hello' />",
        code: false,
      },
      {
        text: "<MyComponent myProp={{ hello: true }} />",
        code: false,
      },
    ],
    answer: "<MyComponent myProp='hello' />",
    explanation: {
      text: "Props are passed the same way as in React for web: by adding attributes to your component element, e.g. <MyComponent propName={someValue} />.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "React Native",
    question:
      "How can you define default prop values for a functional component in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "Using static defaultProps on the component function",
        code: false,
      },
      { text: "Using MyComponent.propDefaults", code: false },
      { text: "Using MyComponent.defaultProps = {}", code: false },
      {
        text: "You cannot define defaultProps in a functional component",
        code: false,
      },
    ],
    answer: "Using MyComponent.defaultProps = {}",
    explanation: {
      text: "Functional components can have defaultProps by assigning a defaultProps property to the component function.",
      code: false,
    },
  },

  // 7–9: STATE & HOOKS
  {
    id: 7,
    topic: "React Native",
    question:
      "Which Hook is used to manage local state in a functional React Native component?",
    code: false,
    language: false,
    options: [
      { text: "useContext", code: false },
      { text: "useReducer", code: false },
      { text: "useState", code: false },
      { text: "useLayoutEffect", code: false },
    ],
    answer: "useState",
    explanation: {
      text: "useState is the basic Hook for managing local state in functional React components (including React Native).",
      code: false,
    },
  },
  {
    id: 8,
    topic: "React Native",
    question:
      "Which Hook is used to perform side effects, like data fetching or event listeners?",
    code: false,
    language: false,
    options: [
      { text: "useMemo", code: false },
      { text: "useEffect", code: false },
      { text: "useCallback", code: false },
      { text: "useLayoutEffect", code: false },
    ],
    answer: "useEffect",
    explanation: {
      text: "useEffect runs after the component renders, enabling side effects like data fetching, subscriptions, or event handling.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "React Native",
    question:
      "Which statement about lifecycle methods vs. Hooks in React Native is true?",
    code: false,
    language: false,
    options: [
      {
        text: "Hooks can only replace setState, not lifecycle methods",
        code: false,
      },
      { text: "Hooks are not supported in React Native", code: false },
      {
        text: "Hooks can replace most class-based lifecycle methods (componentDidMount, etc.) with useEffect",
        code: false,
      },
      {
        text: "Lifecycle methods must still be used even in function components",
        code: false,
      },
    ],
    answer:
      "Hooks can replace most class-based lifecycle methods (componentDidMount, etc.) with useEffect",
    explanation: {
      text: "Using useEffect, you can replicate many lifecycle methods in functional components, including componentDidMount, componentDidUpdate, and componentWillUnmount.",
      code: false,
    },
  },

  // 10–12: STYLING & LAYOUT
  {
    id: 10,
    topic: "React Native",
    question:
      "Which statement best describes how Flexbox works in React Native by default?",
    code: false,
    language: false,
    options: [
      {
        text: "React Native uses row-based flex direction by default, just like in web CSS",
        code: false,
      },
      {
        text: "React Native does not support Flexbox",
        code: false,
      },
      {
        text: "React Native defaults to column-based flex direction",
        code: false,
      },
      {
        text: "Flexbox must be enabled via StyleSheet.configure()",
        code: false,
      },
    ],
    answer: "React Native defaults to column-based flex direction",
    explanation: {
      text: "Unlike standard CSS on the web (which defaults to row), React Native flex containers default to flexDirection: 'column'.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "React Native",
    question: "How do you apply styles to components in React Native?",
    code: false,
    language: false,
    options: [
      { text: "By writing CSS files and importing them", code: false },
      {
        text: "Using inline style objects or StyleSheet.create()",
        code: false,
      },
      { text: "Using <style> tags at the top of the JS file", code: false },
      {
        text: "By referencing an external .css file with a link tag, as in web development",
        code: false,
      },
    ],
    answer: "Using inline style objects or StyleSheet.create()",
    explanation: {
      text: "React Native uses JavaScript objects for styling, typically via the StyleSheet API or inline styles. There's no DOM-based CSS cascade.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "React Native",
    question:
      "What is the primary benefit of using `StyleSheet.create` in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "It allows using normal CSS syntax in React Native files",
        code: false,
      },
      {
        text: "It converts styles to CSS classes behind the scenes",
        code: false,
      },
      {
        text: "It provides a performance optimization by creating a stylesheet reference",
        code: false,
      },
      {
        text: "It automatically minifies and combines styles for production",
        code: false,
      },
    ],
    answer:
      "It provides a performance optimization by creating a stylesheet reference",
    explanation: {
      text: "`StyleSheet.create` helps validate style properties and can potentially optimize references to the styles, though the performance difference is often minimal compared to inline styles.",
      code: false,
    },
  },

  // 13–15: NAVIGATION
  {
    id: 13,
    topic: "React Native",
    question:
      "Which library is most commonly used for navigation in React Native?",
    code: false,
    language: false,
    options: [
      { text: "React Router Native", code: false },
      { text: "React Navigation", code: false },
      { text: "Native Navigator", code: false },
      { text: "Navigator.js", code: false },
    ],
    answer: "React Navigation",
    explanation: {
      text: "React Navigation is a widely used library for handling routing and navigation in React Native apps (Stack, Tab, Drawer, etc.).",
      code: false,
    },
  },
  {
    id: 14,
    topic: "React Native",
    question:
      "What is the main purpose of a Stack Navigator in React Navigation?",
    code: false,
    language: false,
    options: [
      {
        text: "To display multiple screens side-by-side in a horizontal layout",
        code: false,
      },
      {
        text: "To render screens in a stack, allowing you to push/pop screens on top of each other",
        code: false,
      },
      {
        text: "To provide a bottom tab bar with multiple routes",
        code: false,
      },
      { text: "To manage form inputs within a single screen", code: false },
    ],
    answer:
      "To render screens in a stack, allowing you to push/pop screens on top of each other",
    explanation: {
      text: "A Stack Navigator allows you to navigate forward to a new screen, and go back by popping a screen off the stack, mimicking typical smartphone navigation.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "React Native",
    question:
      "How do you pass parameters to a screen in React Navigation (v6)?",
    code: false,
    language: false,
    options: [
      { text: "Using the globalParams object", code: false },
      {
        text: "By directly modifying the route parameter on the destination screen",
        code: false,
      },
      {
        text: "Using navigation.navigate('ScreenName', { paramName: value })",
        code: false,
      },
      { text: "Parameters cannot be passed in React Navigation", code: false },
    ],
    answer: "Using navigation.navigate('ScreenName', { paramName: value })",
    explanation: {
      text: "You can pass parameters as a second argument to navigation.navigate, which become accessible via route.params on the destination screen.",
      code: false,
    },
  },

  // 16–18: STATE MANAGEMENT (BEYOND BASIC HOOKS)
  {
    id: 16,
    topic: "React Native",
    question:
      "What is one primary benefit of using Redux in a React Native application?",
    code: false,
    language: false,
    options: [
      {
        text: "It automatically styles your components based on app state",
        code: false,
      },
      {
        text: "It provides a centralized store for predictable state management",
        code: false,
      },
      {
        text: "It replaces the need for navigation libraries",
        code: false,
      },
      {
        text: "It automatically persists data to the device without any configuration",
        code: false,
      },
    ],
    answer: "It provides a centralized store for predictable state management",
    explanation: {
      text: "Redux helps keep all state in a single store, making data flow predictable and easier to debug.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "React Native",
    question:
      "What does the `useReducer` Hook provide as an alternative to Redux in some cases?",
    code: false,
    language: false,
    options: [
      { text: "Automatic code splitting", code: false },
      { text: "A built-in context store for SSR", code: false },
      {
        text: "A way to manage complex local state with actions and reducers without a global store",
        code: false,
      },
      {
        text: "A simpler form of side-effect management than useEffect",
        code: false,
      },
    ],
    answer:
      "A way to manage complex local state with actions and reducers without a global store",
    explanation: {
      text: "useReducer is useful for local state that follows a reducer pattern, though it doesn’t replace global state solutions in all cases.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "React Native",
    question:
      "Which statement best describes the difference between using the Context API vs. Redux for global state in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "Context API forces you to write more boilerplate than Redux",
        code: false,
      },
      {
        text: "Redux is typically used for large-scale or complex state, while Context API can handle simpler or more localized needs",
        code: false,
      },
      {
        text: "Context API can only store numbers, while Redux can store objects",
        code: false,
      },
      {
        text: "They are the same; Redux is just a special version of useContext",
        code: false,
      },
    ],
    answer:
      "Redux is typically used for large-scale or complex state, while Context API can handle simpler or more localized needs",
    explanation: {
      text: "Redux excels at managing highly complex or frequently updated data across many components. Context API is simpler and works well for smaller apps or less frequent updates.",
      code: false,
    },
  },

  // 19–21: HANDLING INPUTS & FORMS
  {
    id: 19,
    topic: "React Native",
    question:
      "Which component is typically used for text input in React Native?",
    code: false,
    language: false,
    options: [
      { text: "TextField", code: false },
      { text: "Input", code: false },
      { text: "TextInput", code: false },
      { text: "EditText", code: false },
    ],
    answer: "TextInput",
    explanation: {
      text: "TextInput is the core component provided by React Native for text entry.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "React Native",
    question:
      "How can you prevent the on-screen keyboard from covering input fields on smaller screens in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "Use a custom scroll view library that automatically resizes components",
        code: false,
      },
      {
        text: "Use KeyboardAvoidingView or ScrollView with keyboardShouldPersistTaps",
        code: false,
      },
      {
        text: "React Native automatically does this; no extra configuration is needed",
        code: false,
      },
      {
        text: "Disable the keyboard in the AndroidManifest.xml",
        code: false,
      },
    ],
    answer:
      "Use KeyboardAvoidingView or ScrollView with keyboardShouldPersistTaps",
    explanation: {
      text: "KeyboardAvoidingView can adjust layout based on the keyboard’s appearance. Alternatively, a ScrollView can help ensure fields remain visible.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "React Native",
    question:
      "Which library is often used for form handling and validation in React Native?",
    code: false,
    language: false,
    options: [
      { text: "React Navigator", code: false },
      { text: "Formik", code: false },
      { text: "AsyncStorage", code: false },
      { text: "Node Validator", code: false },
    ],
    answer: "Formik",
    explanation: {
      text: "Formik (or React Hook Form) is popular for managing forms, handling validation, and simplifying state management for inputs.",
      code: false,
    },
  },

  // 22–24: PLATFORM APIs & NATIVE MODULES
  {
    id: 22,
    topic: "React Native",
    question:
      "How do you typically access the camera or photo library in a React Native app?",
    code: false,
    language: false,
    options: [
      {
        text: "By directly querying the device’s file system with fs API",
        code: false,
      },
      {
        text: "Using a library like react-native-image-picker or Expo ImagePicker",
        code: false,
      },
      {
        text: "It’s not possible to access the camera in React Native",
        code: false,
      },
      {
        text: "By calling the iOS or Android camera function from the CLI",
        code: false,
      },
    ],
    answer:
      "Using a library like react-native-image-picker or Expo ImagePicker",
    explanation: {
      text: "React Native can’t natively access device hardware unless you use bridging or a third-party module. Popular libraries handle these details.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "React Native",
    question: "What are Native Modules in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "Modules that only work on iOS but not on Android",
        code: false,
      },
      {
        text: "JS libraries that are pre-bundled with React Native",
        code: false,
      },
      {
        text: "Custom Objective-C/Swift or Java/Kotlin modules exposed to JavaScript for device-level functionality",
        code: false,
      },
      {
        text: "A type of built-in debug tool for bridging device logs",
        code: false,
      },
    ],
    answer:
      "Custom Objective-C/Swift or Java/Kotlin modules exposed to JavaScript for device-level functionality",
    explanation: {
      text: "Native Modules allow you to write native code (iOS/Android) and then expose that functionality to your React Native JavaScript code.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "React Native",
    question:
      "Which statement about linking native modules in React Native is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "Manual linking is always required to install any third-party module",
        code: false,
      },
      {
        text: "Autolinking is supported for many React Native libraries, removing the need for manual linking",
        code: false,
      },
      {
        text: "Linking is not needed if you are only using iOS, not Android",
        code: false,
      },
      {
        text: "Linking is only for bridging Swift code; Java modules need a separate process",
        code: false,
      },
    ],
    answer:
      "Autolinking is supported for many React Native libraries, removing the need for manual linking",
    explanation: {
      text: "As of React Native 0.60+, many libraries support automatic linking, which makes bridging native dependencies simpler.",
      code: false,
    },
  },

  // 25–27: NETWORKING & DATA FETCHING
  {
    id: 25,
    topic: "React Native",
    question:
      "What is a key difference between `fetch` and `Axios` for making HTTP requests in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "fetch returns Promises, Axios does not",
        code: false,
      },
      {
        text: "fetch is built-in, while Axios is a third-party library providing additional features like interceptors",
        code: false,
      },
      {
        text: "Axios is slower than fetch for all use cases",
        code: false,
      },
      {
        text: "You cannot handle JSON responses with fetch",
        code: false,
      },
    ],
    answer:
      "fetch is built-in, while Axios is a third-party library providing additional features like interceptors",
    explanation: {
      text: "fetch comes with React Native (part of the window/global scope), whereas Axios is a separate library offering convenience features such as automatic JSON transformations, interceptors, and more robust error handling.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "React Native",
    question:
      "How do you handle an HTTP response in React Native using async/await?",
    code: false,
    language: false,
    options: [
      {
        text: "Use a callback function passed to fetch",
        code: false,
      },
      {
        text: "Use try/catch around an await fetch(...) call, then parse the JSON in another await",
        code: false,
      },
      {
        text: "You cannot use async/await with React Native",
        code: false,
      },
      {
        text: "Use the event loop directly to handle fetch responses",
        code: false,
      },
    ],
    answer:
      "Use try/catch around an await fetch(...) call, then parse the JSON in another await",
    explanation: {
      text: "Async/await allows you to write asynchronous code more synchronously. Typically, you do `const res = await fetch(url)`, and then `const data = await res.json()`, handling errors in a try/catch.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "React Native",
    question:
      "Which storage solution can be used for caching or offline data in React Native?",
    code: false,
    language: false,
    options: [
      { text: "LocalStorage (like in the browser)", code: false },
      { text: "IndexedDB", code: false },
      { text: "AsyncStorage or libraries built on top of it", code: false },
      { text: "Redux DevTools", code: false },
    ],
    answer: "AsyncStorage or libraries built on top of it",
    explanation: {
      text: "AsyncStorage is a simple, unencrypted, asynchronous, persistent, key-value storage system in React Native. Libraries like @react-native-async-storage/async-storage are commonly used, or you can opt for more robust solutions like Realm or SQLite.",
      code: false,
    },
  },

  // 28–30: PERFORMANCE & OPTIMIZATION
  {
    id: 28,
    topic: "React Native",
    question:
      "Which component is recommended for rendering long, scrollable lists in React Native?",
    code: false,
    language: false,
    options: [
      { text: "ListView", code: false },
      { text: "FlatList", code: false },
      { text: "AnimatedList", code: false },
      { text: "ScrollView", code: false },
    ],
    answer: "FlatList",
    explanation: {
      text: "FlatList provides efficient scrolling of a large list of data by rendering only the items that are currently visible (and some buffer). ListView is deprecated, while ScrollView renders all items at once.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "React Native",
    question:
      "What is the purpose of `React.memo` or `memo` in a React Native component?",
    code: false,
    language: false,
    options: [
      {
        text: "To render a component on every state change in the app",
        code: false,
      },
      {
        text: "To memoize HTTP requests for offline use",
        code: false,
      },
      {
        text: "To prevent unnecessary re-renders by shallow comparing props",
        code: false,
      },
      {
        text: "To enable the use of Hooks in class components",
        code: false,
      },
    ],
    answer: "To prevent unnecessary re-renders by shallow comparing props",
    explanation: {
      text: "memo (for functional components) and React.PureComponent (for class components) compare props to avoid re-rendering components that haven’t actually changed.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "React Native",
    question:
      "How can you optimize rendering of a large list with complex row components in React Native?",
    code: false,
    language: false,
    options: [
      {
        text: "Use ScrollView and hope for the best",
        code: false,
      },
      {
        text: "Use FlatList with keyExtractor, getItemLayout, and possibly windowing or virtualization",
        code: false,
      },
      {
        text: "Render the entire list at once, then manually remove items off-screen",
        code: false,
      },
      {
        text: "There is no way to optimize this in React Native",
        code: false,
      },
    ],
    answer:
      "Use FlatList with keyExtractor, getItemLayout, and possibly windowing or virtualization",
    explanation: {
      text: "FlatList has built-in virtualization, and providing keyExtractor, getItemLayout, or using windowSize can further improve performance for large data sets.",
      code: false,
    },
  },

  // 31–33: DEBUGGING & DEVELOPER TOOLS
  {
    id: 31,
    topic: "React Native",
    question:
      "Which is a common way to debug a React Native app on a real device or emulator?",
    code: false,
    language: false,
    options: [
      {
        text: "Use the built-in Safari for iOS, or Chrome/ADB for Android, toggling 'Debug JS Remotely' from the in-app developer menu",
        code: false,
      },
      {
        text: "There is no official way to debug React Native on a real device",
        code: false,
      },
      {
        text: "Only console.log statements are supported; there's no dev menu",
        code: false,
      },
      {
        text: "Use Xcode or Android Studio but they cannot see JavaScript logs",
        code: false,
      },
    ],
    answer:
      "Use the built-in Safari for iOS, or Chrome/ADB for Android, toggling 'Debug JS Remotely' from the in-app developer menu",
    explanation: {
      text: "By shaking the device or pressing Cmd+D (iOS simulator) / Ctrl+M (Android emulator), you can open the dev menu, enabling remote JS debugging in a Chrome or Safari window. Tools like Flipper are also available.",
      code: false,
    },
  },
  {
    id: 32,
    topic: "React Native",
    question: "What is the 'LogBox' (previously 'YellowBox') in React Native?",
    code: false,
    language: false,
    options: [
      { text: "A tool for advanced performance monitoring", code: false },
      {
        text: "A feature for surfacing and categorizing warnings in development mode",
        code: false,
      },
      {
        text: "An alternative console specifically for logging debug info to disk",
        code: false,
      },
      {
        text: "A service that uploads logs to a cloud provider automatically",
        code: false,
      },
    ],
    answer:
      "A feature for surfacing and categorizing warnings in development mode",
    explanation: {
      text: "LogBox (formerly YellowBox) shows warnings and potential issues in your app. You can ignore or fix them based on your needs.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "React Native",
    question:
      "How can you display log messages in the React Native CLI while running your app?",
    code: false,
    language: false,
    options: [
      {
        text: "Use console.log in your code and run 'react-native log-ios' or 'react-native log-android'",
        code: false,
      },
      {
        text: "You must attach a third-party logging library",
        code: false,
      },
      {
        text: "It is not possible to see logs outside of the device screen",
        code: false,
      },
      {
        text: "Only network requests can be logged in the CLI, not general logs",
        code: false,
      },
    ],
    answer:
      "Use console.log in your code and run 'react-native log-ios' or 'react-native log-android'",
    explanation: {
      text: "React Native provides commands like `react-native log-android` to see console logs from your running app directly in the terminal.",
      code: false,
    },
  },

  // 34–36: TESTING
  {
    id: 34,
    topic: "React Native",
    question:
      "Which testing framework is commonly used for unit testing React Native components?",
    code: false,
    language: false,
    options: [
      { text: "Mocha/Chai only", code: false },
      { text: "Jest", code: false },
      { text: "Cypress", code: false },
      { text: "CucumberJS", code: false },
    ],
    answer: "Jest",
    explanation: {
      text: "Jest is the default recommended testing framework that ships with React and works seamlessly with React Native for unit tests and snapshot tests.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "React Native",
    question:
      "Which library helps with component-level testing in React Native, allowing you to render components and interact with them in tests?",
    code: false,
    language: false,
    options: [
      { text: "React Native CLI", code: false },
      { text: "Axios", code: false },
      { text: "React Native Testing Library", code: false },
      { text: "Lodash", code: false },
    ],
    answer: "React Native Testing Library",
    explanation: {
      text: "React Native Testing Library (based on React Testing Library) makes it easier to test React Native components in a way that resembles real user interactions.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "React Native",
    question: "What is Detox used for in React Native development?",
    code: false,
    language: false,
    options: [
      {
        text: "A library for automatically cleaning up memory leaks",
        code: false,
      },
      {
        text: "An end-to-end testing framework for React Native apps",
        code: false,
      },
      {
        text: "A debugging tool that integrates with the React Native dev menu",
        code: false,
      },
      {
        text: "A code formatter similar to Prettier",
        code: false,
      },
    ],
    answer: "An end-to-end testing framework for React Native apps",
    explanation: {
      text: "Detox automates user flows on real devices or emulators, letting you run high-level integration tests for your React Native app.",
      code: false,
    },
  },

  // 37–38: BUILDING & DEPLOYMENT
  {
    id: 37,
    topic: "React Native",
    question:
      "Which command is used to generate a release APK/AAB for Android in a React Native CLI project?",
    code: false,
    language: false,
    options: [
      { text: "npm run build-android", code: false },
      { text: "gradlew assembleRelease (inside android/ folder)", code: false },
      { text: "expo build:android", code: false },
      { text: "react-native start --release", code: false },
    ],
    answer: "gradlew assembleRelease (inside android/ folder)",
    explanation: {
      text: "For React Native CLI projects on Android, you typically run `cd android && ./gradlew assembleRelease` to generate a release APK or AAB. For Expo projects, the process differs (e.g., `expo build:android`).",
      code: false,
    },
  },
  {
    id: 38,
    topic: "React Native",
    question:
      "What is Microsoft CodePush, and how does it benefit React Native deployment?",
    code: false,
    language: false,
    options: [
      {
        text: "A code editor built by Microsoft specifically for React Native",
        code: false,
      },
      {
        text: "A service for over-the-air (OTA) updates of JavaScript bundles without re-submitting to app stores",
        code: false,
      },
      {
        text: "A testing framework for writing unit tests in C#",
        code: false,
      },
      {
        text: "A library for bridging Windows Phone OS APIs to React Native",
        code: false,
      },
    ],
    answer:
      "A service for over-the-air (OTA) updates of JavaScript bundles without re-submitting to app stores",
    explanation: {
      text: "CodePush allows you to deploy JavaScript code changes and assets directly to users without going through the standard App Store / Play Store approval process.",
      code: false,
    },
  },

  // 39–40: BEST PRACTICES & MISC
  {
    id: 39,
    topic: "React Native",
    question:
      "Which approach is generally recommended for organizing files in a larger React Native project?",
    code: false,
    language: false,
    options: [
      {
        text: "All files in a single folder called 'components'",
        code: false,
      },
      {
        text: "Using feature-based or domain-based folder structures (e.g., screens, components, services, etc.)",
        code: false,
      },
      {
        text: "Placing JavaScript files directly in the android or ios folders",
        code: false,
      },
      {
        text: "Using 'wwwroot' and 'css' folders like a web project",
        code: false,
      },
    ],
    answer:
      "Using feature-based or domain-based folder structures (e.g., screens, components, services, etc.)",
    explanation: {
      text: "A common best practice is to separate code by feature/domain rather than lumping everything in a single folder. This keeps larger projects organized and maintainable.",
      code: false,
    },
  },
  {
    id: 40,
    topic: "React Native",
    question: "Which statement about accessibility in React Native is true?",
    code: false,
    language: false,
    options: [
      {
        text: "React Native fully ignores accessibility options; developers must build everything manually",
        code: false,
      },
      {
        text: "Accessibility is automatically perfect on iOS but impossible on Android",
        code: false,
      },
      {
        text: "React Native supports accessibility features like accessibilityLabel, accessible, and importantForAccessibility",
        code: false,
      },
      {
        text: "There's no concept of screen readers in mobile, so accessibility is optional",
        code: false,
      },
    ],
    answer:
      "React Native supports accessibility features like accessibilityLabel, accessible, and importantForAccessibility",
    explanation: {
      text: "React Native provides props to improve accessibility for screen readers and other assistive technologies. It’s recommended to make your app accessible on both iOS and Android.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// API QUESTIONS

export const apiQuestions = [
  // 1–6: HTTP BASICS & FUNDAMENTALS
  {
    id: 1,
    topic: "API",
    question:
      "Which HTTP method is typically used to retrieve data from a server without causing side effects?",
    code: false,
    language: false,
    options: [
      { text: "POST", code: false },
      { text: "GET", code: false },
      { text: "PUT", code: false },
      { text: "DELETE", code: false },
    ],
    answer: "GET",
    explanation: {
      text: "GET requests are intended to retrieve resources without modifying them, making it a safe and idempotent operation.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "API",
    question: "What does HTTP status code 201 indicate?",
    code: false,
    language: false,
    options: [
      { text: "OK", code: false },
      { text: "Created", code: false },
      { text: "Moved Permanently", code: false },
      { text: "Bad Request", code: false },
    ],
    answer: "Created",
    explanation: {
      text: "201 Created indicates that a request has successfully resulted in a new resource being created on the server.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "API",
    question:
      "Which header is commonly used to specify the media type of the resource in an HTTP request/response?",
    code: false,
    language: false,
    options: [
      { text: "Authorization", code: false },
      { text: "Content-Type", code: false },
      { text: "Accept-Encoding", code: false },
      { text: "Host", code: false },
    ],
    answer: "Content-Type",
    explanation: {
      text: "Content-Type indicates the media type (e.g., application/json, text/html) of the body sent in an HTTP message.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "API",
    question:
      "Which HTTP status code represents a client error (4xx) for a malformed request syntax?",
    code: false,
    language: false,
    options: [
      { text: "400 Bad Request", code: false },
      { text: "401 Unauthorized", code: false },
      { text: "500 Internal Server Error", code: false },
      { text: "301 Moved Permanently", code: false },
    ],
    answer: "400 Bad Request",
    explanation: {
      text: "400 Bad Request means the server cannot process the request due to a client error (e.g., malformed request syntax).",
      code: false,
    },
  },
  {
    id: 5,
    topic: "API",
    question:
      "Which HTTP header is essential for controlling access in cross-origin requests?",
    code: false,
    language: false,
    options: [
      { text: "Content-Length", code: false },
      { text: "ETag", code: false },
      { text: "Access-Control-Allow-Origin", code: false },
      { text: "If-Modified-Since", code: false },
    ],
    answer: "Access-Control-Allow-Origin",
    explanation: {
      text: "Access-Control-Allow-Origin specifies which origins can access the resource, a key part of CORS (Cross-Origin Resource Sharing).",
      code: false,
    },
  },
  {
    id: 6,
    topic: "API",
    question: "What is the main difference between HTTP and HTTPS?",
    code: false,
    language: false,
    options: [
      {
        text: "HTTPS uses a different port but is otherwise identical to HTTP",
        code: false,
      },
      {
        text: "HTTPS encrypts data using TLS/SSL, while HTTP sends data in plaintext",
        code: false,
      },
      {
        text: "HTTP can only use POST, while HTTPS can use all methods",
        code: false,
      },
      { text: "There is no difference; both are fully encrypted", code: false },
    ],
    answer:
      "HTTPS encrypts data using TLS/SSL, while HTTP sends data in plaintext",
    explanation: {
      text: "HTTPS provides a secure channel using TLS (or SSL), preventing eavesdropping or tampering of transmitted data.",
      code: false,
    },
  },

  // 7–11: REST PRINCIPLES
  {
    id: 7,
    topic: "API",
    question: "Which architectural style does the acronym REST refer to?",
    code: false,
    language: false,
    options: [
      { text: "Representational State Transfer", code: false },
      { text: "Remote Execution Service Transfer", code: false },
      { text: "Reactive Systems Testing", code: false },
      { text: "Random Event Sourcing Technique", code: false },
    ],
    answer: "Representational State Transfer",
    explanation: {
      text: "REST is an architectural style defined by constraints such as statelessness, client-server separation, and a uniform interface.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "API",
    question: "In RESTful API design, how are resources typically identified?",
    code: false,
    language: false,
    options: [
      { text: "Using SOAP envelopes", code: false },
      { text: "By specifying method names in the request body", code: false },
      { text: "By URIs/URLs representing the resource path", code: false },
      {
        text: "They are identified by server-specific port numbers",
        code: false,
      },
    ],
    answer: "By URIs/URLs representing the resource path",
    explanation: {
      text: "RESTful services use unique resource URIs to identify and manipulate resources (e.g. /users, /users/123).",
      code: false,
    },
  },
  {
    id: 9,
    topic: "API",
    question:
      "Which characteristic is NOT part of the REST architectural constraints?",
    code: false,
    language: false,
    options: [
      { text: "Statelessness", code: false },
      { text: "Client-Server", code: false },
      { text: "Hateoas", code: false },
      { text: "Persistent server-side sessions", code: false },
    ],
    answer: "Persistent server-side sessions",
    explanation: {
      text: "REST requires stateless communication; the server should not store session state between requests. Session info is typically carried by the client via tokens, etc.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "API",
    question: "What does 'idempotent' mean in the context of HTTP methods?",
    code: false,
    language: false,
    options: [
      {
        text: "Repeating the same request multiple times has the same effect as making it once",
        code: false,
      },
      {
        text: "The request can only be made once in the lifetime of the resource",
        code: false,
      },
      { text: "It requires user authentication", code: false },
      { text: "It can only be used in GET operations", code: false },
    ],
    answer:
      "Repeating the same request multiple times has the same effect as making it once",
    explanation: {
      text: "PUT and DELETE are considered idempotent; making them multiple times results in the same final server state as making them once.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "API",
    question:
      "Which HTTP method is typically used to partially update a resource in a RESTful API?",
    code: false,
    language: false,
    options: [
      { text: "PATCH", code: false },
      { text: "PUT", code: false },
      { text: "OPTIONS", code: false },
      { text: "TRACE", code: false },
    ],
    answer: "PATCH",
    explanation: {
      text: "PATCH is used to apply partial modifications to a resource, whereas PUT is generally used to replace a resource entirely.",
      code: false,
    },
  },

  // 12–15: AUTHENTICATION & SECURITY
  {
    id: 12,
    topic: "API",
    question:
      "Which is the most common header for sending bearer tokens in an HTTP request?",
    code: false,
    language: false,
    options: [
      { text: "Content-Type: Bearer <token>", code: false },
      { text: "Accept: Bearer <token>", code: false },
      { text: "Authorization: Bearer <token>", code: false },
      { text: "Bearer-Token: <token>", code: false },
    ],
    answer: "Authorization: Bearer <token>",
    explanation: {
      text: "Bearer tokens are typically sent in the Authorization header with the scheme 'Bearer'.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "API",
    question:
      "What is a common format for creating tokens for authentication/authorization in modern APIs?",
    code: false,
    language: false,
    options: [
      { text: "Plain text strings", code: false },
      { text: "JSON Web Tokens (JWT)", code: false },
      { text: "Binary streams over HTTP/2", code: false },
      { text: "HTML web pages", code: false },
    ],
    answer: "JSON Web Tokens (JWT)",
    explanation: {
      text: "JWTs are widely used tokens that can store user claims and be verified using a secret or public/private key pair.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "API",
    question:
      "What does CORS (Cross-Origin Resource Sharing) primarily protect against?",
    code: false,
    language: false,
    options: [
      {
        text: "Unauthorized server-to-server communication",
        code: false,
      },
      {
        text: "Malicious client code from reading resources on a different origin without explicit permission",
        code: false,
      },
      {
        text: "Denial-of-service (DoS) attacks on the server",
        code: false,
      },
      {
        text: "SQL Injection vulnerabilities",
        code: false,
      },
    ],
    answer:
      "Malicious client code from reading resources on a different origin without explicit permission",
    explanation: {
      text: "CORS is a browser security feature that restricts cross-origin HTTP requests from scripts unless the server explicitly allows them via response headers.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "API",
    question:
      "Which HTTP status code typically indicates a user is not authenticated?",
    code: false,
    language: false,
    options: [
      { text: "403 Forbidden", code: false },
      { text: "401 Unauthorized", code: false },
      { text: "404 Not Found", code: false },
      { text: "400 Bad Request", code: false },
    ],
    answer: "401 Unauthorized",
    explanation: {
      text: "401 Unauthorized means the request lacks valid authentication credentials. 403 Forbidden implies valid credentials but insufficient permissions.",
      code: false,
    },
  },

  // 16–20: API DESIGN & BEST PRACTICES
  {
    id: 16,
    topic: "API",
    question: "Which is a common approach for API versioning?",
    code: false,
    language: false,
    options: [
      {
        text: "Including the version in the resource name, e.g. /v1/users",
        code: false,
      },
      {
        text: "Always using the same endpoint with no versioning",
        code: false,
      },
      {
        text: "Appending version as a query parameter '?version=2'",
        code: false,
      },
      { text: "Storing version info in local storage", code: false },
    ],
    answer: "Including the version in the resource name, e.g. /v1/users",
    explanation: {
      text: "A common practice is to embed the version number in the URL path (e.g. /api/v1/) or sometimes in headers.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "API",
    question:
      "What technique is used to return only a subset of data (e.g. by page) in a large collection?",
    code: false,
    language: false,
    options: [
      { text: "Multiplying the data in the response", code: false },
      { text: "Data hashing", code: false },
      { text: "Pagination", code: false },
      { text: "Offline caching", code: false },
    ],
    answer: "Pagination",
    explanation: {
      text: "Pagination is used to limit the amount of data returned by splitting it into 'pages' so that clients don’t fetch everything at once.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "API",
    question:
      "Which of these is considered a best practice when designing error responses in a REST API?",
    code: false,
    language: false,
    options: [
      { text: "Always return HTTP 200, even on errors", code: false },
      {
        text: "Use the appropriate 4xx or 5xx status code and provide a descriptive error message",
        code: false,
      },
      { text: "Return a full HTML page describing the error", code: false },
      {
        text: "Use a custom X-Error-Code header with no message body",
        code: false,
      },
    ],
    answer:
      "Use the appropriate 4xx or 5xx status code and provide a descriptive error message",
    explanation: {
      text: "Sending the correct status code (e.g., 400 or 404) along with a JSON body describing the error is a common best practice.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "API",
    question:
      "Which is an example of filtering query parameters in a REST API?",
    code: false,
    language: false,
    options: [
      { text: "/users?role=admin", code: false },
      { text: "/users/role/admin", code: false },
      { text: "POST /users { role: admin }", code: false },
      { text: "OPTIONS /admin/users", code: false },
    ],
    answer: "/users?role=admin",
    explanation: {
      text: "Using query parameters (e.g., ?role=admin) for filtering or searching is a common pattern in RESTful APIs.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "API",
    question:
      "What is an appropriate Content-Type header for returning JSON data?",
    code: false,
    language: false,
    options: [
      { text: "application/html", code: false },
      { text: "application/xml", code: false },
      { text: "application/json", code: false },
      { text: "text/plain", code: false },
    ],
    answer: "application/json",
    explanation: {
      text: "JSON data should be served with Content-Type: application/json to allow clients to parse it accordingly.",
      code: false,
    },
  },

  // 21–23: CACHING & PERFORMANCE
  {
    id: 21,
    topic: "API",
    question:
      "Which header can be used to validate cached responses and detect changes to a resource?",
    code: false,
    language: false,
    options: [
      { text: "User-Agent", code: false },
      { text: "ETag", code: false },
      { text: "Authorization", code: false },
      { text: "Allow", code: false },
    ],
    answer: "ETag",
    explanation: {
      text: "The ETag header provides a unique identifier for a specific version of a resource. Clients can use it for conditional requests (If-None-Match).",
      code: false,
    },
  },
  {
    id: 22,
    topic: "API",
    question:
      "Which HTTP header indicates how long a resource is considered fresh for caching purposes?",
    code: false,
    language: false,
    options: [
      { text: "Cache-Control", code: false },
      { text: "Location", code: false },
      { text: "Retry-After", code: false },
      { text: "Vary", code: false },
    ],
    answer: "Cache-Control",
    explanation: {
      text: "Cache-Control can specify directives like max-age and public/private to control how responses are cached by browsers or intermediaries.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "API",
    question:
      "Which benefit does using GZIP or Brotli compression in an API response provide?",
    code: false,
    language: false,
    options: [
      {
        text: "Lowers response payload sizes, reducing bandwidth usage",
        code: false,
      },
      { text: "Eliminates the need for SSL certificates", code: false },
      {
        text: "Guarantees the request will not be intercepted",
        code: false,
      },
      {
        text: "Combines multiple responses into a single chunk",
        code: false,
      },
    ],
    answer: "Lowers response payload sizes, reducing bandwidth usage",
    explanation: {
      text: "Compression algorithms like GZIP or Brotli reduce the size of the HTTP response, improving load times and saving bandwidth.",
      code: false,
    },
  },

  // 24–26: GRAPHQL
  {
    id: 24,
    topic: "API",
    question: "What is a key difference between GraphQL and REST?",
    code: false,
    language: false,
    options: [
      { text: "GraphQL cannot query multiple entities at once", code: false },
      { text: "REST always returns JSON, while GraphQL uses XML", code: false },
      {
        text: "GraphQL uses a single endpoint and allows clients to specify exactly what data to retrieve",
        code: false,
      },
      {
        text: "REST is only for microservices, while GraphQL is for monoliths",
        code: false,
      },
    ],
    answer:
      "GraphQL uses a single endpoint and allows clients to specify exactly what data to retrieve",
    explanation: {
      text: "With GraphQL, the client can shape the response by specifying fields, avoiding over-fetching or under-fetching typical of REST endpoints.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "API",
    question:
      "Which type of GraphQL operation is used to modify or write data?",
    code: false,
    language: false,
    options: [
      { text: "Query", code: false },
      { text: "Fragment", code: false },
      { text: "Subscription", code: false },
      { text: "Mutation", code: false },
    ],
    answer: "Mutation",
    explanation: {
      text: "In GraphQL, queries read data, and mutations are used for creating, updating, or deleting data.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "API",
    question: "What is the purpose of a 'resolver' in a GraphQL server?",
    code: false,
    language: false,
    options: [
      { text: "To define the HTTP method for each query", code: false },
      { text: "To resolve domain names into IP addresses", code: false },
      {
        text: "A function responsible for mapping GraphQL fields to actual data fetch operations",
        code: false,
      },
      {
        text: "An alias for caching GraphQL responses",
        code: false,
      },
    ],
    answer:
      "A function responsible for mapping GraphQL fields to actual data fetch operations",
    explanation: {
      text: "Resolvers are functions that tell a GraphQL server how to fetch the data corresponding to specific fields in a query or mutation.",
      code: false,
    },
  },

  // 27–28: API TESTING & TOOLING
  {
    id: 27,
    topic: "API",
    question:
      "Which tool is commonly used to manually test and document RESTful APIs?",
    code: false,
    language: false,
    options: [
      { text: "Webpack", code: false },
      { text: "Postman", code: false },
      { text: "Docker", code: false },
      { text: "Git", code: false },
    ],
    answer: "Postman",
    explanation: {
      text: "Postman allows you to construct HTTP requests, test responses, and even generate documentation or test collections for RESTful APIs.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "API",
    question:
      "Which specification format is widely used for describing and documenting RESTful APIs?",
    code: false,
    language: false,
    options: [
      { text: "OpenAPI (formerly Swagger)", code: false },
      { text: "GraphQL Schema Definition Language", code: false },
      { text: "WSDL", code: false },
      { text: "Markdown tables", code: false },
    ],
    answer: "OpenAPI (formerly Swagger)",
    explanation: {
      text: "OpenAPI (aka Swagger) is a widely adopted format for describing REST APIs, enabling tools for documentation, code generation, and testing.",
      code: false,
    },
  },

  // 29: SOAP & OTHER PROTOCOLS
  {
    id: 29,
    topic: "API",
    question: "Which statement best describes SOAP in comparison to REST?",
    code: false,
    language: false,
    options: [
      {
        text: "SOAP is a protocol that relies on XML-based envelopes and strict contracts (WSDL), while REST is an architectural style often using JSON",
        code: false,
      },
      {
        text: "SOAP only works over FTP, while REST only works over HTTP",
        code: false,
      },
      {
        text: "SOAP is always faster than REST",
        code: false,
      },
      {
        text: "They are essentially the same approach with different acronyms",
        code: false,
      },
    ],
    answer:
      "SOAP is a protocol that relies on XML-based envelopes and strict contracts (WSDL), while REST is an architectural style often using JSON",
    explanation: {
      text: "SOAP is a protocol with a strict XML envelope structure and WSDL definitions, whereas REST is a looser architectural style using URLs, HTTP methods, and various content formats (commonly JSON).",
      code: false,
    },
  },

  // 30: REAL-TIME APIS
  {
    id: 30,
    topic: "API",
    question:
      "Which technology is used to enable full-duplex, real-time communication between a client and server over a single TCP connection?",
    code: false,
    language: false,
    options: [
      { text: "Polling with setTimeout()", code: false },
      { text: "HTTP long polling", code: false },
      { text: "WebSockets", code: false },
      { text: "SOAP-based queries", code: false },
    ],
    answer: "WebSockets",
    explanation: {
      text: "WebSockets allow both client and server to send data at any time, enabling real-time bidirectional communication over a persistent connection.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// HTML QUESTIONS

export const htmlQuestions = [
  {
    id: 1,
    topic: "HTML",
    question:
      "Which semantic HTML5 element is best suited for wrapping content that is only tangentially related to the main content?",
    code: false,
    language: false,
    options: [
      { text: "<aside>", code: false },
      { text: "<section>", code: false },
      { text: "<main>", code: false },
      { text: "<article>", code: false },
    ],
    answer: "<aside>",
    explanation: {
      text: "`<aside>` is meant for content related to or supporting the surrounding content (e.g., sidebars, pull quotes). It's distinct from `<section>` (generic thematic grouping), `<article>` (self-contained piece), and `<main>` (principal content).",
      code: false,
    },
  },
  {
    id: 2,
    topic: "HTML",
    question:
      "Which HTML5 element is used to represent a scalar measurement within a known range, such as a disk usage indicator?",
    code: false,
    language: false,
    options: [
      { text: "<meter>", code: false },
      { text: "<progress>", code: false },
      { text: "<range>", code: false },
      { text: "<gauge>", code: false },
    ],
    answer: "<meter>",
    explanation: {
      text: "`<meter>` indicates a measurable value or a fractional value within a known range (e.g., disk usage 70% of 100GB). `<progress>` is used for an ongoing process (e.g., a download in progress).",
      code: false,
    },
  },
  {
    id: 3,
    topic: "HTML",
    question:
      "Which HTML attribute is used to provide a machine-readable translation of a human-readable content, often used in microdata or SEO contexts?",
    code: false,
    language: false,
    options: [
      { text: "itemprop", code: false },
      { text: "data-attr", code: false },
      { text: "machine-lang", code: false },
      { text: "aria-label", code: false },
    ],
    answer: "itemprop",
    explanation: {
      text: "`itemprop` is used as part of microdata to specify the property of an item. `aria-label` deals with accessibility, and `data-attr` is a custom data attribute (not specifically for SEO).",
      code: false,
    },
  },
  {
    id: 4,
    topic: "HTML",
    question:
      "In HTML5 forms, which attribute prevents the browser from validating form inputs upon submission?",
    code: false,
    language: false,
    options: [
      { text: "disabled", code: false },
      { text: "inert", code: false },
      { text: "novalidate", code: false },
      { text: "ignore-validation", code: false },
    ],
    answer: "novalidate",
    explanation: {
      text: "`novalidate` on a form element tells the browser to skip built-in validation checks (like `required`, `type` checks, etc.).",
      code: false,
    },
  },
  {
    id: 5,
    topic: "HTML",
    question:
      "When dealing with responsive images, which attribute specifies a list of possible image sources along with their pixel density or width descriptors?",
    code: false,
    language: false,
    options: [
      { text: "src", code: false },
      { text: "sizes", code: false },
      { text: "srcset", code: false },
      { text: "picture", code: false },
    ],
    answer: "srcset",
    explanation: {
      text: "`srcset` contains a set of image candidates (with density or width descriptors), while `sizes` defines the layout space. `<picture>` is an element, not an attribute.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "HTML",
    question:
      "Which HTML5 attribute can be used on `<iframe>` to enhance security by restricting features like running scripts or forms inside the iframe?",
    code: false,
    language: false,
    options: [
      { text: "sandbox", code: false },
      { text: "noscroll", code: false },
      { text: "secure-iframe", code: false },
      { text: "disabler", code: false },
    ],
    answer: "sandbox",
    explanation: {
      text: "`sandbox` allows you to enforce stricter security policies on iframes, disabling or limiting certain actions unless specifically allowed.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "HTML",
    question:
      "Which meta tag is critical for controlling the viewport on mobile devices, allowing for responsive design in HTML5?",
    code: false,
    language: false,
    options: [
      { text: "<meta name='mobile' content='true'>", code: false },
      {
        text: "<meta name='device' content='width=device-width'>",
        code: false,
      },
      {
        text: "<meta name='viewport' content='width=device-width, initial-scale=1.0'>",
        code: false,
      },
      { text: "<meta name='scalable' content='no'>", code: false },
    ],
    answer:
      "<meta name='viewport' content='width=device-width, initial-scale=1.0'>",
    explanation: {
      text: "The `viewport` meta tag configures how a page should be displayed on mobile devices. Setting `width=device-width` and `initial-scale=1.0` helps achieve responsive layouts.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "HTML",
    question:
      "What is the main purpose of the 'rel=\"preload\"' link attribute in HTML?",
    code: false,
    language: false,
    options: [
      {
        text: "To load a resource only if the user requests it explicitly",
        code: false,
      },
      {
        text: "To declare a resource that should be prefetched for a future navigation",
        code: false,
      },
      {
        text: "To fetch a resource as soon as possible to improve performance of current navigation",
        code: false,
      },
      {
        text: "To lazy-load images when they come into the viewport",
        code: false,
      },
    ],
    answer:
      "To fetch a resource as soon as possible to improve performance of current navigation",
    explanation: {
      text: 'rel="preload" signals to the browser to download the resource early, improving performance for critical assets (e.g., fonts, key scripts).',
      code: false,
    },
  },
  {
    id: 9,
    topic: "HTML",
    question:
      "Which HTML5 element would you use to group interactive controls and labels within a web form for better structure or accessibility?",
    code: false,
    language: false,
    options: [
      { text: "<fieldset>", code: false },
      { text: "<section>", code: false },
      { text: "<div>", code: false },
      { text: "<group>", code: false },
    ],
    answer: "<fieldset>",
    explanation: {
      text: "A `<fieldset>` groups related controls and labels. Often used with `<legend>` for better accessibility and clarity.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "HTML",
    question:
      "Which attribute on a `<form>` can be used to associate submit buttons with a form located elsewhere in the DOM?",
    code: false,
    language: false,
    options: [
      { text: "target", code: false },
      { text: "form-data", code: false },
      { text: "data-form-id", code: false },
      { text: "form", code: false },
    ],
    answer: "form",
    explanation: {
      text: 'An input or button with `form="someFormId"` can submit a form that is not its direct ancestor, allowing more flexible layouts.',
      code: false,
    },
  },
  {
    id: 11,
    topic: "HTML",
    question:
      "What is the main difference between the `<section>` and `<article>` elements in HTML5?",
    code: false,
    language: false,
    options: [
      {
        text: "`<article>` cannot contain headings, `<section>` can",
        code: false,
      },
      {
        text: "`<article>` is used for stand-alone, self-contained content; `<section>` is for thematically grouped content",
        code: false,
      },
      {
        text: "They are fully interchangeable in modern browsers",
        code: false,
      },
      {
        text: "They are obsolete elements replaced by `<div role='article'>` and `<div role='section'>`",
        code: false,
      },
    ],
    answer:
      "`<article>` is used for stand-alone, self-contained content; `<section>` is for thematically grouped content",
    explanation: {
      text: "An `<article>` is a self-contained composition (e.g., blog post, magazine article). A `<section>` groups related thematic content (e.g., chapters, sections of a doc).",
      code: false,
    },
  },
  {
    id: 12,
    topic: "HTML",
    question:
      "Which HTML attribute can be used to mark input fields for autocompletion by the browser with domain-specific suggestions?",
    code: false,
    language: false,
    options: [
      { text: "autosuggest", code: false },
      { text: "autocomplete", code: false },
      { text: "autofill", code: false },
      { text: "autohint", code: false },
    ],
    answer: "autocomplete",
    explanation: {
      text: "`autocomplete` can be set to on/off, or to specific tokens like 'name', 'email', etc., so the browser can prefill data from user profiles.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "HTML",
    question: "What is the primary purpose of the <template> element in HTML5?",
    code: false,
    language: false,
    options: [
      {
        text: "To store HTML that won't be rendered until cloned via JavaScript",
        code: false,
      },
      { text: "To define the base style for the entire document", code: false },
      { text: "To house inline SVG assets", code: false },
      {
        text: "To provide a fallback for older browsers that don't support HTML5",
        code: false,
      },
    ],
    answer: "To store HTML that won't be rendered until cloned via JavaScript",
    explanation: {
      text: "`<template>` holds markup that is inert by default. JavaScript can clone and insert it into the DOM when needed. Useful in advanced templating or component patterns.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "HTML",
    question:
      "Which of the following statements about the HTML5 drag-and-drop API is true?",
    code: false,
    language: false,
    options: [
      { text: "It only works on `<img>` elements", code: false },
      { text: "It relies on the contenteditable attribute", code: false },
      {
        text: "It uses draggable attributes and events like ondragstart, ondragover, ondrop",
        code: false,
      },
      {
        text: "It is officially deprecated and replaced by Web Components",
        code: false,
      },
    ],
    answer:
      "It uses draggable attributes and events like ondragstart, ondragover, ondrop",
    explanation: {
      text: "HTML5 introduced a set of events and attributes for drag-and-drop, including `draggable='true'`, `ondragstart`, `ondragover`, and `ondrop`. This can be used on many elements, not just images.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "HTML",
    question:
      "Which attribute can be used on input fields to match a specific regex pattern directly in HTML5, without using JavaScript?",
    code: false,
    language: false,
    options: [
      { text: "pattern", code: false },
      { text: "regex", code: false },
      { text: "validate", code: false },
      { text: "match", code: false },
    ],
    answer: "pattern",
    explanation: {
      text: "The `pattern` attribute on input fields allows specifying a regular expression that the input value must match before form submission is considered valid.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "HTML",
    question:
      "Which HTML element is used to provide alternative sources for a `<video>` or `<audio>` element?",
    code: false,
    language: false,
    options: [
      { text: "<media>", code: false },
      { text: "<track>", code: false },
      { text: "<source>", code: false },
      { text: "<alt>", code: false },
    ],
    answer: "<source>",
    explanation: {
      text: "The `<source>` element within `<video>` or `<audio>` allows specifying multiple media sources (formats, resolutions). `<track>` is for captions/subtitles.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "HTML",
    question: "Which doctype is used for modern HTML5 documents?",
    code: false,
    language: false,
    options: [
      { text: "<!DOCTYPE HTML5>", code: false },
      { text: "<!DOCTYPE html>", code: false },
      {
        text: "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 5.0//EN'>",
        code: false,
      },
      { text: "<!DOCTYPE HTML SYSTEM 'about:legacy-compat'>", code: false },
    ],
    answer: "<!DOCTYPE html>",
    explanation: {
      text: "HTML5 uses a simplified doctype: `<!DOCTYPE html>`. It's case-insensitive but typically written in lowercase.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "HTML",
    question:
      "Which element helps define custom, private attributes (metadata) on HTML elements for use by scripts or styling?",
    code: false,
    language: false,
    options: [
      { text: "data-*", code: false },
      { text: "private-attr", code: false },
      { text: "user-field", code: false },
      { text: "meta-attr", code: false },
    ],
    answer: "data-*",
    explanation: {
      text: "`data-*` attributes allow embedding custom data in HTML elements, accessible via JavaScript (e.g. `dataset`) without conflicting with valid attributes.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "HTML",
    question:
      "What is the purpose of the 'http-equiv' attribute in a <meta> tag?",
    code: false,
    language: false,
    options: [
      {
        text: "It sets the default language for the HTML document",
        code: false,
      },
      {
        text: "It provides compatibility or instructions to the browser, e.g., refresh, content-type",
        code: false,
      },
      {
        text: "It defines the character encoding used by JavaScript only",
        code: false,
      },
      {
        text: "It applies only to debugging tools in modern browsers",
        code: false,
      },
    ],
    answer:
      "It provides compatibility or instructions to the browser, e.g., refresh, content-type",
    explanation: {
      text: "`<meta http-equiv='Content-Type' content='text/html; charset=UTF-8'>` was common in older HTML. Also used for refresh, X-UA-Compatible, etc. Now most prefer `<meta charset='utf-8'>` syntax instead.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "HTML",
    question:
      "Which attribute can instruct browsers not to provide suggestions for form fields, improving security for sensitive data entries?",
    code: false,
    language: false,
    options: [
      { text: "autocomplete='off'", code: false },
      { text: "novalidate='true'", code: false },
      { text: "secure='true'", code: false },
      { text: "hidden='true'", code: false },
    ],
    answer: "autocomplete='off'",
    explanation: {
      text: "Setting `autocomplete='off'` can disable browser autofill or suggestions. Often used on password or OTP fields to enhance security or user experience.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "HTML",
    question:
      "How does the `<picture>` element differ from using `<img>` alone?",
    code: false,
    language: false,
    options: [
      {
        text: "<picture> is just another name for <img>, introduced in HTML4",
        code: false,
      },
      {
        text: "The <picture> element allows specifying multiple <source> elements for different viewport sizes or formats",
        code: false,
      },
      {
        text: "<img> is deprecated in favor of <picture>",
        code: false,
      },
      {
        text: "<picture> can be used only for SVG images",
        code: false,
      },
    ],
    answer:
      "The <picture> element allows specifying multiple <source> elements for different viewport sizes or formats",
    explanation: {
      text: "`<picture>` with `<source>` elements provides advanced responsive image capabilities (e.g., WebP for modern browsers, fallback to JPEG).",
      code: false,
    },
  },
  {
    id: 22,
    topic: "HTML",
    question:
      "Which attribute can help ensure that the browser does not load resources it deems non-critical right away, potentially improving page load times?",
    code: false,
    language: false,
    options: [
      { text: "lazy-load", code: false },
      { text: "async", code: false },
      { text: "defer", code: false },
      { text: "loading='lazy'", code: false },
    ],
    answer: "loading='lazy'",
    explanation: {
      text: "For images and iframes, `loading='lazy'` defers loading until they're close to the viewport. This is distinct from `async`/`defer` used on scripts.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "HTML",
    question:
      "Which statement about the 'lang' attribute in the <html> tag is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "It is only used by the browser to pick the correct dictionary for spell-check",
        code: false,
      },
      {
        text: "It helps screen readers and other assistive technologies interpret the language of the document",
        code: false,
      },
      {
        text: "It can be replaced by a meta tag in HTML5",
        code: false,
      },
      {
        text: "It is used to define time zones for date formatting",
        code: false,
      },
    ],
    answer:
      "It helps screen readers and other assistive technologies interpret the language of the document",
    explanation: {
      text: "The `lang` attribute is important for accessibility and search engines, ensuring correct language settings for screen readers and other tools.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "HTML",
    question:
      "Which feature does the 'download' attribute provide when used in an <a> tag?",
    code: false,
    language: false,
    options: [
      { text: "Streams a video directly in the browser", code: false },
      {
        text: "Hints that the target resource should be downloaded as a file rather than opened",
        code: false,
      },
      { text: "Displays the resource in an iframe", code: false },
      { text: "Embeds the resource as text on the page", code: false },
    ],
    answer:
      "Hints that the target resource should be downloaded as a file rather than opened",
    explanation: {
      text: "Using `download` on an anchor prompts browsers to download the linked resource rather than navigating to or rendering it.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "HTML",
    question:
      "Which HTML element is used to define an interactive widget or custom component with encapsulated styling and behavior (part of Web Components)?",
    code: false,
    language: false,
    options: [
      { text: "<shadow>", code: false },
      { text: "<template>", code: false },
      { text: "<slot>", code: false },
      {
        text: "No single element; you typically define a custom element with customElement.define()",
        code: false,
      },
    ],
    answer:
      "No single element; you typically define a custom element with customElement.define()",
    explanation: {
      text: "Web Components rely on custom elements (e.g. `<my-component>`) plus features like Shadow DOM (`attachShadow`) and `<slot>` for content distribution. There's no single `<shadow>` element for the entire approach.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "HTML",
    question:
      "Which statement about 'role' attributes in HTML (ARIA roles) is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "They are only recognized by CSS for styling purposes",
        code: false,
      },
      {
        text: "They override native semantics of an element for assistive technologies",
        code: false,
      },
      {
        text: "They are required for all HTML5 elements",
        code: false,
      },
      {
        text: "They are used to specify how the element should be validated in forms",
        code: false,
      },
    ],
    answer:
      "They override native semantics of an element for assistive technologies",
    explanation: {
      text: "ARIA `role` attributes can change or define the semantic meaning for screen readers or other AT, especially if an element’s semantics are misaligned with its usage.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "HTML",
    question:
      "Which attribute of the <script> tag ensures the script executes only after the HTML has been parsed, but still in the order they appear in the document?",
    code: false,
    language: false,
    options: [
      { text: "async", code: false },
      { text: "defer", code: false },
      { text: "type='module'", code: false },
      { text: "script-lazy", code: false },
    ],
    answer: "defer",
    explanation: {
      text: "A `defer` attribute loads the script in the background and executes it after the document is fully parsed, maintaining the script load order. `async` does not guarantee order.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "HTML",
    question:
      "Which HTML element or attribute is used to group related autocomplete options for <input> elements, offering suggestions as users type?",
    code: false,
    language: false,
    options: [
      { text: "datalist", code: false },
      { text: "autosuggest", code: false },
      { text: "optionset", code: false },
      { text: "fieldset", code: false },
    ],
    answer: "datalist",
    explanation: {
      text: "The `<datalist>` element holds `<option>` elements that provide suggestions for an `<input list='...'>`. This is separate from select boxes or fieldset usage.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "HTML",
    question:
      "What is a recommended practice for including a fallback font in case a custom web font fails to load?",
    code: false,
    language: false,
    options: [
      { text: "Use <nofont> tags", code: false },
      {
        text: "Add multiple font-family values in a CSS rule, e.g. 'FontA', 'Arial', sans-serif",
        code: false,
      },
      {
        text: "There is no fallback mechanism in HTML/CSS for custom fonts",
        code: false,
      },
      {
        text: "Use an iframe that loads a default font if the custom one fails",
        code: false,
      },
    ],
    answer:
      "Add multiple font-family values in a CSS rule, e.g. 'FontA', 'Arial', sans-serif",
    explanation: {
      text: "Specifying a fallback chain in `font-family` ensures that if the primary font fails, a secondary or system default is used. This is a best practice for robust typography.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "HTML",
    question:
      "Which meta element attribute helps manage Content Security Policy (CSP) to mitigate XSS attacks?",
    code: false,
    language: false,
    options: [
      { text: "http-equiv='X-XSS-Protection'", code: false },
      { text: "http-equiv='Content-Security-Policy'", code: false },
      { text: "content='no-referrer'", code: false },
      { text: "name='xss-protect'", code: false },
    ],
    answer: "http-equiv='Content-Security-Policy'",
    explanation: {
      text: "You can set CSP using a meta tag like `<meta http-equiv='Content-Security-Policy' content=\"default-src 'self';\">`, though setting CSP in HTTP headers is often recommended for stronger security.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// CSS QUESTIONS

export const cssQuestions = [
  // 1–30: STANDARD MULTIPLE-CHOICE (MEDIUM–ADVANCED)

  {
    id: 1,
    topic: "CSS",
    question:
      "Which of the following statements about the CSS box model is true?",
    code: false,
    language: false,
    options: [
      {
        text: "Margin is included in the element's total width when box-sizing is set to border-box",
        code: false,
      },
      {
        text: "Padding is always excluded from the total width, regardless of box-sizing",
        code: false,
      },
      {
        text: "border-box includes padding and border in an element's total width/height",
        code: false,
      },
      {
        text: "content-box includes margin and padding in the total width/height",
        code: false,
      },
    ],
    answer:
      "border-box includes padding and border in an element's total width/height",
    explanation: {
      text: "With box-sizing: border-box, the element's specified width and height include its content area, padding, and border—but not its margin.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "CSS",
    question:
      "Which CSS unit is relative to the font size of the root HTML element?",
    code: false,
    language: false,
    options: [
      { text: "em", code: false },
      { text: "rem", code: false },
      { text: "%", code: false },
      { text: "vw", code: false },
    ],
    answer: "rem",
    explanation: {
      text: "rem units scale relative to the root (html) element’s font size, whereas em units scale relative to the font size of the current element’s parent.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "CSS",
    question:
      "How can you center a block-level element horizontally using modern CSS (assuming no fixed width)?",
    code: false,
    language: false,
    options: [
      { text: "Give the element margin: 0 auto", code: false },
      { text: "Set text-align: center on the element itself", code: false },
      { text: "Apply float: center", code: false },
      {
        text: "Add display: flex and justify-content: center to the element",
        code: false,
      },
    ],
    answer: "Give the element margin: 0 auto",
    explanation: {
      text: "For a block-level element with a fixed width, margin: 0 auto horizontally centers it in its parent container. Alternatively, with flex containers, you'd center via justify-content, but the question references block-level classic approach.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "CSS",
    question:
      "Which of the following pseudo-classes targets an element only if it is currently the target of the URL hash?",
    code: false,
    language: false,
    options: [
      { text: ":target", code: false },
      { text: ":focus-within", code: false },
      { text: ":in-range", code: false },
      { text: ":visited", code: false },
    ],
    answer: ":target",
    explanation: {
      text: ":target selects the element whose id matches the URL’s fragment (hash). For example, #section2 in the URL would target an element with id='section2'.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "CSS",
    question:
      "In CSS Grid, what does the 'auto-fit' keyword do when defining track sizes in repeat()?",
    code: false,
    language: false,
    options: [
      {
        text: "Automatically creates enough rows for the content to fit vertically",
        code: false,
      },
      {
        text: "Fills the container with as many columns/rows of the defined size as possible, possibly creating empty tracks",
        code: false,
      },
      {
        text: "Disables auto-placement of grid items",
        code: false,
      },
      {
        text: "Makes grid items automatically fill leftover space in a container",
        code: false,
      },
    ],
    answer:
      "Fills the container with as many columns/rows of the defined size as possible, possibly creating empty tracks",
    explanation: {
      text: "auto-fit in combination with minmax() can create responsive columns that expand to fill space or collapse if there's not enough space.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "CSS",
    question: "Which of these statements about CSS specificity is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "Inline styles have lower specificity than IDs",
        code: false,
      },
      {
        text: "IDs have higher specificity than classes",
        code: false,
      },
      {
        text: "Type selectors (e.g., h1) have higher specificity than classes",
        code: false,
      },
      {
        text: "Universal selectors (*) override everything",
        code: false,
      },
    ],
    answer: "IDs have higher specificity than classes",
    explanation: {
      text: "The specificity order (lowest to highest) is typically: universal selectors < type selectors < classes < attributes/pseudo-classes < IDs < inline styles < !important. IDs outrank classes.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "CSS",
    question: "What does the 'clearfix' hack typically address?",
    code: false,
    language: false,
    options: [
      {
        text: "Forcing older browsers to treat fonts consistently across OSes",
        code: false,
      },
      {
        text: "Stopping floating child elements from overflowing their parent container",
        code: false,
      },
      {
        text: "Clearing out default paddings and margins of elements",
        code: false,
      },
      {
        text: "Enabling flex layouts in older IE browsers",
        code: false,
      },
    ],
    answer:
      "Stopping floating child elements from overflowing their parent container",
    explanation: {
      text: "The clearfix hack (e.g. .clearfix::after { content: ''; display: block; clear: both; }) helps parent elements to wrap floated children properly.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "CSS",
    question:
      "Which property is used to create a 3D effect by modifying the z-axis position of an element in CSS transforms?",
    code: false,
    language: false,
    options: [
      { text: "transform: perspective()", code: false },
      { text: "transform: rotateZ()", code: false },
      { text: "transform: translateZ()", code: false },
      { text: "transform: matrix3d()", code: false },
    ],
    answer: "transform: translateZ()",
    explanation: {
      text: "translateZ(n) moves the element along the z-axis, potentially giving a 3D effect, especially if there's a perspective set on a parent container.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "CSS",
    question:
      "How can you create a keyframe animation that moves an element from left to right over 2 seconds, repeating infinitely?",
    code: false,
    language: false,
    options: [
      {
        text: "Use transform: scale() from 0 to 1",
        code: false,
      },
      {
        text: "Use transition: left 2s infinite both",
        code: false,
      },
      {
        text: "Define @keyframes, then apply animation: yourAnimation 2s infinite",
        code: false,
      },
      {
        text: "Use the :hover pseudo-class to move the element only on hover",
        code: false,
      },
    ],
    answer:
      "Define @keyframes, then apply animation: yourAnimation 2s infinite",
    explanation: {
      text: "Keyframes with from/to or 0%/100% for transform: translateX() (or left property) combined with animation properties produce a repeating movement.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "CSS",
    question:
      "Which of the following is the correct syntax for a media query targeting screens with a max width of 600px?",
    code: false,
    language: false,
    options: [
      {
        text: "@media (screen) and (max-width: 600px) {}",
        code: false,
      },
      {
        text: "@media screen and (max-width: 600px) {}",
        code: false,
      },
      {
        text: "@media only screen with max-width = 600px {}",
        code: false,
      },
      {
        text: "@media all(max-width=600px) {}",
        code: false,
      },
    ],
    answer: "@media screen and (max-width: 600px) {}",
    explanation: {
      text: "The standard approach is @media screen and (max-width: 600px) { /* rules */ }. The 'only' keyword is optional, and the syntax uses parentheses around (max-width: 600px).",
      code: false,
    },
  },
  {
    id: 11,
    topic: "CSS",
    question:
      "Which property ensures that an element maintains a certain aspect ratio if either width or height changes, commonly used for responsive iframes or videos?",
    code: false,
    language: false,
    options: [
      { text: "aspect-ratio", code: false },
      { text: "ratio-box", code: false },
      { text: "object-fit", code: false },
      { text: "object-position", code: false },
    ],
    answer: "aspect-ratio",
    explanation: {
      text: "The `aspect-ratio` property (e.g., aspect-ratio: 16/9) ensures the box’s height and width maintain that ratio in modern browsers.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "CSS",
    question:
      "Which technique can be used to visually hide text but keep it accessible to screen readers?",
    code: false,
    language: false,
    options: [
      { text: "display: none;", code: false },
      { text: "text-opacity: 0;", code: false },
      { text: "visibility: hidden;", code: false },
      {
        text: "Using a clip/clip-path or absolute positioning off-screen technique",
        code: false,
      },
    ],
    answer:
      "Using a clip/clip-path or absolute positioning off-screen technique",
    explanation: {
      text: "display: none; and visibility: hidden; remove the element from screen readers. A common pattern is `.sr-only { position: absolute; left: -9999px; }` or a clipping method to hide visually but not to AT.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "CSS",
    question:
      "In a Flexbox container, which property controls how remaining space is distributed among flex items?",
    code: false,
    language: false,
    options: [
      { text: "flex: 1 1 auto", code: false },
      { text: "justify-content", code: false },
      { text: "align-items", code: false },
      { text: "flex-grow", code: false },
    ],
    answer: "flex-grow",
    explanation: {
      text: "flex-grow determines how much a flex item will grow relative to the rest of the flex items when there's available space. It's the first value in the shorthand flex property (flex-grow flex-shrink flex-basis).",
      code: false,
    },
  },
  {
    id: 14,
    topic: "CSS",
    question:
      "Which rule prevents a flex item from shrinking below its content size?",
    code: false,
    language: false,
    options: [
      { text: "flex-shrink: 1", code: false },
      { text: "flex-basis: content", code: false },
      { text: "flex-shrink: 0", code: false },
      { text: "align-self: stretch", code: false },
    ],
    answer: "flex-shrink: 0",
    explanation: {
      text: "Setting flex-shrink: 0 tells the item not to shrink when there's not enough space in the flex container.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "CSS",
    question:
      "Which method is typically used to serve different CSS files for older browsers (like IE) without affecting modern browsers?",
    code: false,
    language: false,
    options: [
      {
        text: "Using conditional comments (e.g., <!--[if lte IE 9]> <link ...> <![endif]--> )",
        code: false,
      },
      { text: "Using a partial <doctype> to trick the browser", code: false },
      { text: "All modern browsers ignore CSS anyway", code: false },
      { text: "Use @media legacy in the main stylesheet", code: false },
    ],
    answer:
      "Using conditional comments (e.g., <!--[if lte IE 9]> <link ...> <![endif]--> )",
    explanation: {
      text: "Conditional comments are recognized by old versions of Internet Explorer, letting you serve fallback or polyfill CSS. Modern browsers ignore them.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "CSS",
    question: "Which of the following statements about CSS animations is true?",
    code: false,
    language: false,
    options: [
      {
        text: "Animations always require JavaScript to define keyframes",
        code: false,
      },
      {
        text: "An animation-duration must be set, or the animation won't run",
        code: false,
      },
      {
        text: "CSS animations cannot be repeated automatically",
        code: false,
      },
      {
        text: "transition and animation are the same property used interchangeably",
        code: false,
      },
    ],
    answer: "An animation-duration must be set, or the animation won't run",
    explanation: {
      text: "Without a duration, CSS animations won't play. It's required along with the animation-name or keyframes definition.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "CSS",
    question:
      "What does the 'contain' value do in the background-size property?",
    code: false,
    language: false,
    options: [
      {
        text: "Scales the background image to fill the container, possibly cropping",
        code: false,
      },
      {
        text: "Scales the image to the smallest size such that both width and height fit inside the container",
        code: false,
      },
      { text: "Repeats the image in both directions", code: false },
      { text: "Keeps the image at its original size", code: false },
    ],
    answer:
      "Scales the image to the smallest size such that both width and height fit inside the container",
    explanation: {
      text: "background-size: contain ensures the entire image is visible, fitting either width or height to the container's boundary. 'cover' is the one that may crop.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "CSS",
    question:
      "Which CSS technique helps avoid FOUC (Flash of Unstyled Content) when using web fonts?",
    code: false,
    language: false,
    options: [
      {
        text: "Manually loading fonts via JavaScript, then adding them to the DOM once ready",
        code: false,
      },
      {
        text: "Ensuring the font is loaded over HTTP instead of HTTPS",
        code: false,
      },
      {
        text: "Using the font-display descriptor (e.g., font-display: swap) or a font loading strategy",
        code: false,
      },
      {
        text: "Defining the font last in the CSS file to override everything",
        code: false,
      },
    ],
    answer:
      "Using the font-display descriptor (e.g., font-display: swap) or a font loading strategy",
    explanation: {
      text: "FOUC can be minimized by specifying how the font is displayed while loading (swap, optional, fallback) or by using a JS-based loading approach (e.g., Font Face Observer).",
      code: false,
    },
  },
  {
    id: 19,
    topic: "CSS",
    question:
      "Which of the following is a benefit of using BEM (Block, Element, Modifier) naming methodology?",
    code: false,
    language: false,
    options: [
      { text: "Reduces the length of class names significantly", code: false },
      {
        text: "Makes CSS more predictable and avoids collisions by creating clear naming conventions",
        code: false,
      },
      { text: "Eliminates the need for media queries", code: false },
      { text: "Allows inline JavaScript in CSS rules", code: false },
    ],
    answer:
      "Makes CSS more predictable and avoids collisions by creating clear naming conventions",
    explanation: {
      text: "BEM's naming rules help keep styles modular and avoid collisions, improving maintainability. It usually results in longer class names but better clarity.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "CSS",
    question:
      "Which property specifies how an element's content should be fitted if the content is too big for its container in a flex or grid context?",
    code: false,
    language: false,
    options: [
      { text: "object-fit", code: false },
      { text: "overflow-wrap", code: false },
      { text: "justify-items", code: false },
      { text: "align-content", code: false },
    ],
    answer: "overflow-wrap",
    explanation: {
      text: "overflow-wrap (formerly word-wrap) determines how text will break if it overflows. object-fit is for images/videos in a replaced element context, not text or general content layout.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "CSS",
    question:
      "Which pseudo-element can be used to insert content before an element's content?",
    code: false,
    language: false,
    options: [
      { text: "::before", code: false },
      { text: "::first-line", code: false },
      { text: "::placeholder", code: false },
      { text: "::backdrop", code: false },
    ],
    answer: "::before",
    explanation: {
      text: "::before (or :before in old syntax) inserts content before the element’s main content. ::backdrop is used for fullscreen modals, ::placeholder is for input placeholders, and ::first-line modifies the first line of text only.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "CSS",
    question:
      "In CSS transitions, what does the 'transition-timing-function' property define?",
    code: false,
    language: false,
    options: [
      { text: "The total duration of the transition", code: false },
      {
        text: "How property values change speed over the transition's duration (e.g., ease-in)",
        code: false,
      },
      { text: "The number of times the transition repeats", code: false },
      {
        text: "Whether the transition also changes background images",
        code: false,
      },
    ],
    answer:
      "How property values change speed over the transition's duration (e.g., ease-in)",
    explanation: {
      text: "transition-timing-function (ease, linear, ease-in-out, etc.) controls the acceleration curve of the transition between start and end states.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "CSS",
    question:
      "Which property can help prevent child elements from 'floating' outside a container that does not have a defined height?",
    code: false,
    language: false,
    options: [
      { text: "overflow: auto;", code: false },
      { text: "height: 100%;", code: false },
      { text: "position: relative;", code: false },
      { text: "float: none;", code: false },
    ],
    answer: "overflow: auto;",
    explanation: {
      text: "Setting overflow: auto (or hidden) on a parent can force it to expand around floated children. Alternatively, the clearfix hack or display: flow-root can be used.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "CSS",
    question:
      "Which of the following is true about the layering of positioned elements via z-index?",
    code: false,
    language: false,
    options: [
      {
        text: "z-index works on statically positioned elements by default",
        code: false,
      },
      {
        text: "A higher z-index always places an element on top, regardless of stacking contexts",
        code: false,
      },
      {
        text: "Only positioned elements (relative, absolute, fixed) can have a z-index effect",
        code: false,
      },
      {
        text: "A z-index of -1 is invalid in modern browsers",
        code: false,
      },
    ],
    answer:
      "Only positioned elements (relative, absolute, fixed) can have a z-index effect",
    explanation: {
      text: "z-index only applies to elements that have a position set to something other than static (relative, absolute, fixed, sticky). Also, each stacking context is important to consider.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "CSS",
    question:
      "Which at-rule in CSS allows you to define custom variables (properties) that can be reused throughout a stylesheet?",
    code: false,
    language: false,
    options: [
      { text: "@custom-variables", code: false },
      { text: "@var", code: false },
      { text: ":root {}", code: false },
      {
        text: "Trick question: custom properties are declared directly in a selector, not an at-rule",
        code: false,
      },
    ],
    answer:
      "Trick question: custom properties are declared directly in a selector, not an at-rule",
    explanation: {
      text: "CSS custom properties (variables) are declared using `--propertyName` inside a selector, often `:root { --mainColor: #333; }`. There's no dedicated @var or @custom-variables at-rule for them in CSS.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "CSS",
    question:
      "Which preprocessors provide features like mixins, nesting, and variables, compiling down to valid CSS?",
    code: false,
    language: false,
    options: [
      { text: "LESS, Sass/SCSS, Stylus", code: false },
      { text: "TypeScript, Flow, Babel", code: false },
      { text: "EJS, Handlebars, Mustache", code: false },
      { text: "Jest, Mocha, Cypress", code: false },
    ],
    answer: "LESS, Sass/SCSS, Stylus",
    explanation: {
      text: "LESS, SASS/SCSS, and Stylus are common CSS preprocessors that add advanced features, compiled to plain CSS for browsers.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "CSS",
    question:
      "Which property can help maintain consistent spacing between flex items, replacing the need for margins on child elements?",
    code: false,
    language: false,
    options: [
      { text: "column-gap / row-gap (or gap)", code: false },
      { text: "margin-inline", code: false },
      { text: "outline-spacing", code: false },
      { text: "flex-spacing", code: false },
    ],
    answer: "column-gap / row-gap (or gap)",
    explanation: {
      text: "In modern browsers, 'gap' works in flex containers similarly to how grid-gap works in CSS Grid, simplifying consistent spacing between items.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "CSS",
    question:
      "Which value of 'display' creates a new block-level formatting context for the element, ignoring floats from sibling elements?",
    code: false,
    language: false,
    options: [
      { text: "display: table", code: false },
      { text: "display: block", code: false },
      { text: "display: flow-root", code: false },
      { text: "display: flex", code: false },
    ],
    answer: "display: flow-root",
    explanation: {
      text: "flow-root sets an element to become a new block formatting context (like a 'clearfix' effect), preventing floats from overlapping outside of it.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "CSS",
    question:
      "Which of the following statements about layering multiple background images is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "You cannot layer multiple backgrounds; only one background image is allowed by CSS",
        code: false,
      },
      {
        text: "Multiple images can be specified in the background-image property, separated by commas",
        code: false,
      },
      {
        text: "You have to use z-index to stack multiple background images",
        code: false,
      },
      {
        text: "background: top, middle, bottom are used to define separate layers",
        code: false,
      },
    ],
    answer:
      "Multiple images can be specified in the background-image property, separated by commas",
    explanation: {
      text: "For example: `background-image: url('img1.png'), url('img2.png');` You can also define multiple background-size, background-position, etc., for each layer separated by commas in the same order.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "CSS",
    question:
      "Which of the following is a recommended approach to improving CSS performance?",
    code: false,
    language: false,
    options: [
      {
        text: "Use many universal selectors (*) to style multiple elements quickly",
        code: false,
      },
      {
        text: "Rely heavily on descendant selectors (e.g., .nav ul li a) for clarity",
        code: false,
      },
      {
        text: "Use more specific selectors with IDs to override everything easily",
        code: false,
      },
      {
        text: "Keep selectors shallow (avoid deeply nested descendants) and reduce unnecessary complexity",
        code: false,
      },
    ],
    answer:
      "Keep selectors shallow (avoid deeply nested descendants) and reduce unnecessary complexity",
    explanation: {
      text: "Deeply nested or highly specific selectors can impact performance and maintainability. Minimizing complexity (e.g. short class-based selectors) is generally recommended.",
      code: false,
    },
  },

  // 31–40: CODE COMPLETION / SPOT THE ERROR

  // 31
  {
    id: 31,
    topic: "CSS",
    question:
      "Spot the error: Why doesn't this snippet center the text horizontally?\n\nbody {\n  text-align: center;\n}\n.container {\n  width: 80%;\n  margin: auto;\n  text-align: left;\n}\n",
    code: `body {
  text-align: center;
}
.container {
  width: 80%;
  margin: auto;
  text-align: left;
}`,
    language: "css",
    options: [
      {
        text: "text-align is overridden by .container { text-align: left }",
        code: false,
      },
      {
        text: "margin: auto has no effect on .container",
        code: false,
      },
      {
        text: "You need an inline element for text-align: center to work",
        code: false,
      },
      {
        text: "text-align: center must be placed in .container not the body",
        code: false,
      },
    ],
    answer: "text-align is overridden by .container { text-align: left }",
    explanation: {
      text: "The .container rule sets text-align: left, overriding the body rule, so text won't be centered within .container.",
      code: false,
    },
  },

  // 32
  {
    id: 32,
    topic: "CSS",
    question:
      "Complete the code: If you want a transition on hover from red to blue background over 0.5 seconds, which code snippet is correct?\n\n.button {\n  background-color: red;\n  transition: __________;\n}\n.button:hover {\n  background-color: blue;\n}",
    code: ` .button {
  background-color: red;
  transition: /* ? */;
}
.button:hover {
  background-color: blue;
}`,
    language: "css",
    options: [
      {
        text: "transition: background-color 0.5s;",
        code: false,
      },
      {
        text: "transition: 0.5s;",
        code: false,
      },
      {
        text: "transition-duration: color 0.5s;",
        code: false,
      },
      {
        text: "transition-property: background; transition-duration: 0.5ms;",
        code: false,
      },
    ],
    answer: "transition: background-color 0.5s;",
    explanation: {
      text: "You need to specify which property is transitioning and the duration. The correct property is background-color, and 0.5s is the time.",
      code: false,
    },
  },

  // 33
  {
    id: 33,
    topic: "CSS",
    question:
      "Spot the issue: This code tries to create a 2-column grid, but only one column appears.\n\n.container {\n  display: grid;\n  grid-template-columns: 200px,\n  gap: 20px;\n}",
    code: ` .container {
  display: grid;
  grid-template-columns: 200px,
  gap: 20px;
}`,
    language: "css",
    options: [
      {
        text: "There's a missing second column size in grid-template-columns; it needs at least 2 sizes separated by space or comma",
        code: false,
      },
      {
        text: "gap: 20px is unsupported in modern browsers",
        code: false,
      },
      {
        text: "The display property should be display: inline-grid",
        code: false,
      },
      {
        text: "We must specify grid-template-rows also",
        code: false,
      },
    ],
    answer:
      "There's a missing second column size in grid-template-columns; it needs at least 2 sizes separated by space or comma",
    explanation: {
      text: "To create two columns, you might do grid-template-columns: 200px 1fr; or 200px auto; etc. Here, only one size is defined, so only one column is created.",
      code: false,
    },
  },

  // 34
  {
    id: 34,
    topic: "CSS",
    question:
      "Complete the code to absolutely position an element 50px from the top and 20px from the left, with a width of 200px.\n\n.box {\n  position: absolute;\n  ________: 50px;\n  ________: 20px;\n  ________: 200px;\n}",
    code: `.box {
  position: absolute;
  /* ? */
}`,
    language: "css",
    options: [
      {
        text: "top: 50px; left: 20px; width: 200px;",
        code: false,
      },
      {
        text: "margin-top: 50px; padding-left: 20px; width: 200px;",
        code: false,
      },
      {
        text: "transform: translate(50px, 20px); min-width: 200px;",
        code: false,
      },
      {
        text: "position: relative; top: 50px; width: 200px;",
        code: false,
      },
    ],
    answer: "top: 50px; left: 20px; width: 200px;",
    explanation: {
      text: "For an absolutely positioned element, top/left define the offset from the containing block, and width sets its width. margin-top or transform do not correspond to top/left offsets in absolute positioning.",
      code: false,
    },
  },

  // 35
  {
    id: 35,
    topic: "CSS",
    question:
      "Identify the problem in this SCSS snippet:\n\n$primary: #ff0000\n.btn {\n  color: $primary;\n}\n\nIt doesn't compile. Why?",
    code: `$primary: #ff0000
.btn {
  color: $primary;
}`,
    language: "css",
    options: [
      {
        text: "Sass variables must be declared with var(--primary) syntax",
        code: false,
      },
      {
        text: "There's a missing semicolon after the $primary declaration in SCSS",
        code: false,
      },
      {
        text: "SCSS doesn't allow color variables without an @mixin",
        code: false,
      },
      {
        text: "You must import sass-colors to use color variables",
        code: false,
      },
    ],
    answer:
      "There's a missing semicolon after the $primary declaration in SCSS",
    explanation: {
      text: "In SCSS syntax, each variable assignment must end with a semicolon: `$primary: #ff0000;` Omitting it causes a parse error.",
      code: false,
    },
  },

  // 36
  {
    id: 36,
    topic: "CSS",
    question:
      "Fill in the correct code to create a dashed border of 2px around .box using border shorthand:\n\n.box {\n  ________\n}",
    code: `.box {
  /* ? */
}`,
    language: "css",
    options: [
      {
        text: "border: dashed 2px;",
        code: false,
      },
      {
        text: "border: 2px #000 dashed;",
        code: false,
      },
      {
        text: "border: 2px dashed #000;",
        code: false,
      },
      {
        text: "border: #000 dashed 2px black;",
        code: false,
      },
    ],
    answer: "border: 2px dashed #000;",
    explanation: {
      text: "The typical border shorthand order is width, style, color. e.g. `border: 2px dashed #000;`",
      code: false,
    },
  },

  // 37
  {
    id: 37,
    topic: "CSS",
    question:
      "Spot the issue: The developer wants all paragraphs in .content to be bold, but nothing changes:\n\n.content p {\n  font-weight: bold;\n}\np {\n  font-weight: normal;\n}",
    code: `.content p {
  font-weight: bold;
}
p {
  font-weight: normal;
}`,
    language: "css",
    options: [
      {
        text: "The second p selector has the same specificity, so it overrides .content p if it's declared after it",
        code: false,
      },
      {
        text: ".content p has a higher specificity, so it should override p",
        code: false,
      },
      {
        text: "font-weight doesn't work with paragraphs by default",
        code: false,
      },
      {
        text: "You need !important to override the normal weight",
        code: false,
      },
    ],
    answer:
      "The second p selector has the same specificity, so it overrides .content p if it's declared after it",
    explanation: {
      text: "A type selector (p) and a class plus type selector (.content p) have the same specificity level in terms of classes/elements (not counting universal). Actually, .content p is more specific. But if the p {} rule is placed last, it can override it due to the cascade. One could reorder or increase specificity with .content p { } after p {} or more specific rule.",
      code: false,
    },
  },

  // 38
  {
    id: 38,
    topic: "CSS",
    question:
      "Complete the snippet to create a linear gradient background from red at the top to blue at the bottom:\n\n.box {\n  background: ________;\n}",
    code: `.box {
  background: /* ? */;
}`,
    language: "css",
    options: [
      {
        text: "linear-gradient(to bottom, red, blue)",
        code: false,
      },
      {
        text: "gradient(linear, top, color(red), color(blue))",
        code: false,
      },
      {
        text: "radial-gradient(red, blue)",
        code: false,
      },
      {
        text: "linear-gradient(to right, red, blue)",
        code: false,
      },
    ],
    answer: "linear-gradient(to bottom, red, blue)",
    explanation: {
      text: "A linear-gradient with 'to bottom' means top is red, bottom is blue. Another valid approach is linear-gradient(red, blue) which defaults top to bottom, but 'to bottom' is clearer.",
      code: false,
    },
  },

  // 39
  {
    id: 39,
    topic: "CSS",
    question:
      "Spot the error: The developer is trying to apply a box-shadow, but nothing appears:\n\n.shadow {\n  box-shadow: 0 2px 5px 0;\n}",
    code: `.shadow {
  box-shadow: 0 2px 5px 0;
}`,
    language: "css",
    options: [
      {
        text: "box-shadow requires the color parameter (e.g., rgba(0,0,0,0.3))",
        code: false,
      },
      {
        text: "You must add !important to box-shadow",
        code: false,
      },
      {
        text: "Positioning must be relative for box-shadow to appear",
        code: false,
      },
      {
        text: "The box-shadow property is only for text shadows, not box shadows",
        code: false,
      },
    ],
    answer: "box-shadow requires the color parameter (e.g., rgba(0,0,0,0.3))",
    explanation: {
      text: "box-shadow syntax includes offsets, blur, spread, and color. At least a color is needed to see the shadow. Example: `box-shadow: 0 2px 5px 0 rgba(0,0,0,0.3);`",
      code: false,
    },
  },

  // 40
  {
    id: 40,
    topic: "CSS",
    question:
      'Complete the snippet to import a Google font in CSS:\n\n@import url("________");',
    code: `@import url("/* ? */");`,
    language: "css",
    options: [
      {
        text: "https://fonts.google.com/someFont.css",
        code: false,
      },
      {
        text: "https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap",
        code: false,
      },
      {
        text: "https://fonts.googleapis.com/ImportFonts?OpenSans",
        code: false,
      },
      {
        text: "You cannot import fonts via @import in CSS",
        code: false,
      },
    ],
    answer:
      "https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap",
    explanation: {
      text: "Google Fonts typically uses an @import link from the fonts.googleapis.com domain with the desired font family, weights, and display param. Example: `@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap');`",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// TYPESCRIPT QUESTIONS

export const typeScriptQuestions = [
  // 1–30: STANDARD MULTIPLE-CHOICE

  {
    id: 1,
    topic: "TypeScript",
    question:
      "Which TypeScript type is safer than 'any' and forces you to narrow it before usage?",
    code: false,
    language: false,
    options: [
      { text: "unknown", code: false },
      { text: "never", code: false },
      { text: "undefined", code: false },
      { text: "object", code: false },
    ],
    answer: "unknown",
    explanation: {
      text: "`unknown` must be narrowed by checks or type assertions before it's used. By contrast, `any` lets you do anything without type safety.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "TypeScript",
    question:
      "Which statement is true regarding 'interface' vs. 'type' aliases in TypeScript?",
    code: false,
    language: false,
    options: [
      {
        text: "Type aliases cannot create union types, only interfaces can",
        code: false,
      },
      {
        text: "Interfaces support declaration merging, while type aliases do not",
        code: false,
      },
      {
        text: "Type aliases are limited to object shapes, but interfaces can define primitives",
        code: false,
      },
      {
        text: "They are fully interchangeable in every scenario",
        code: false,
      },
    ],
    answer: "Interfaces support declaration merging, while type aliases do not",
    explanation: {
      text: "Type aliases are more flexible for unions, intersections, etc. Interfaces allow declaration merging and are mainly used to describe object shapes or classes.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "TypeScript",
    question: "What is the purpose of the 'strictNullChecks' compiler option?",
    code: false,
    language: false,
    options: [
      {
        text: "It disallows using 'null' and 'undefined' entirely in the codebase",
        code: false,
      },
      {
        text: "It treats 'null' and 'undefined' as distinct types that must be explicitly handled",
        code: false,
      },
      {
        text: "It automatically replaces 'null' with an empty string",
        code: false,
      },
      {
        text: "It forces all variables to be nullable by default",
        code: false,
      },
    ],
    answer:
      "It treats 'null' and 'undefined' as distinct types that must be explicitly handled",
    explanation: {
      text: "When 'strictNullChecks' is enabled, 'null' and 'undefined' are not assignable to other types without a union, reducing runtime errors from unhandled null/undefined.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "TypeScript",
    question: "Which of these describes 'structural typing' in TypeScript?",
    code: false,
    language: false,
    options: [
      {
        text: "Objects must share the same class to be considered compatible",
        code: false,
      },
      {
        text: "Compatibility is based on the shape (properties/methods) rather than explicit declarations",
        code: false,
      },
      {
        text: "It requires the 'declare structural' directive in tsconfig.json",
        code: false,
      },
      {
        text: "It only applies to primitive types like string or number",
        code: false,
      },
    ],
    answer:
      "Compatibility is based on the shape (properties/methods) rather than explicit declarations",
    explanation: {
      text: "TypeScript’s type system is structural, meaning two types are compatible if they have the same structure, regardless of whether they share the same explicit type name.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "TypeScript",
    question:
      "Which type is used to represent a value that logically should never occur (e.g., a function that never returns)?",
    code: false,
    language: false,
    options: [
      { text: "unknown", code: false },
      { text: "never", code: false },
      { text: "void", code: false },
      { text: "any", code: false },
    ],
    answer: "never",
    explanation: {
      text: "A function returning 'never' indicates it either throws an error or loops forever, thus never producing a value.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "TypeScript",
    question:
      "Which utility type makes all properties of a given type optional?",
    code: false,
    language: false,
    options: [
      { text: "Required<T>", code: false },
      { text: "Partial<T>", code: false },
      { text: "Pick<T>", code: false },
      { text: "Record<K, T>", code: false },
    ],
    answer: "Partial<T>",
    explanation: {
      text: "Partial<T> constructs a new type with all properties of T set to optional. Required<T> is the opposite, making them non-optional.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "TypeScript",
    question:
      "Which approach is used to create an intersection type from two or more existing types?",
    code: false,
    language: false,
    options: [
      { text: "Using the & operator (e.g. TypeA & TypeB)", code: false },
      { text: "Using the + operator (e.g. TypeA + TypeB)", code: false },
      { text: "Using extends TypeA, TypeB in an interface", code: false },
      { text: "Using the union operator (TypeA | TypeB)", code: false },
    ],
    answer: "Using the & operator (e.g. TypeA & TypeB)",
    explanation: {
      text: "The ampersand (&) in TypeScript forms an intersection type, requiring the resulting type to satisfy both TypeA and TypeB simultaneously.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "TypeScript",
    question:
      "How do you specify that a generic type parameter extends another type?",
    code: false,
    language: false,
    options: [
      { text: "function foo<T inherits U>(arg: T) {}", code: false },
      { text: "function foo<T extends U>(arg: T) {}", code: false },
      { text: "function foo<T => U>(arg: T) {}", code: false },
      { text: "function foo<T : U>(arg: T) {}", code: false },
    ],
    answer: "function foo<T extends U>(arg: T) {}",
    explanation: {
      text: "In TypeScript generics, 'extends' is used to constrain T to a subtype of U.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "TypeScript",
    question:
      "Which compile option in tsconfig.json allows you to output both .js and corresponding .d.ts files for library usage?",
    code: false,
    language: false,
    options: [
      { text: "allowJs", code: false },
      { text: "declaration", code: false },
      { text: "removeComments", code: false },
      { text: "esModuleInterop", code: false },
    ],
    answer: "declaration",
    explanation: {
      text: "Setting `declaration: true` emits .d.ts files alongside your compiled .js, enabling external usage of your type definitions.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "TypeScript",
    question:
      "Which is the correct way to define a numeric enum in TypeScript?",
    code: false,
    language: false,
    options: [
      {
        text: "type MyEnum = { A: 0, B: 1, C: 2 }",
        code: false,
      },
      {
        text: "enum MyEnum { A, B, C }",
        code: false,
      },
      {
        text: "interface MyEnum { A: 0, B: 1, C: 2 }",
        code: false,
      },
      {
        text: "You cannot define numeric enums in TypeScript",
        code: false,
      },
    ],
    answer: "enum MyEnum { A, B, C }",
    explanation: {
      text: "Numeric enums in TypeScript can be created with the 'enum' keyword. By default, A=0, B=1, C=2 if not explicitly assigned.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "TypeScript",
    question:
      "Which TypeScript feature is used to check for a property or type at runtime before using it, narrowing the type in a conditional block?",
    code: false,
    language: false,
    options: [
      { text: "Type assertion", code: false },
      { text: "Type guard", code: false },
      { text: "Ambient declaration", code: false },
      { text: "Type erasure", code: false },
    ],
    answer: "Type guard",
    explanation: {
      text: "A type guard is a function or expression (like 'typeof x === \"string\"') that refines the type of a variable within a conditional block.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "TypeScript",
    question:
      "Which command is commonly used to compile TypeScript to JavaScript if you have a local tsconfig.json?",
    code: false,
    language: false,
    options: [
      { text: "tsc", code: false },
      { text: "ts-compile", code: false },
      { text: "typescript compile", code: false },
      { text: "babel ts files", code: false },
    ],
    answer: "tsc",
    explanation: {
      text: "Running `tsc` in a directory with tsconfig.json compiles TypeScript files into the configured JavaScript output.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "TypeScript",
    question:
      "How does TypeScript interpret the 'as const' assertion on an array or object?",
    code: false,
    language: false,
    options: [
      {
        text: "It makes the array or object read-only and infers literal types for elements",
        code: false,
      },
      { text: "It casts the array or object to type 'any'", code: false },
      {
        text: "It prevents the object from being exported as a module",
        code: false,
      },
      { text: "It changes the compile target to ESNext", code: false },
    ],
    answer:
      "It makes the array or object read-only and infers literal types for elements",
    explanation: {
      text: "Using 'as const' tells TypeScript to treat array elements or object properties as constant (immutable) and infer narrow literal types instead of broader ones.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "TypeScript",
    question: "What does the 'noImplicitAny' compiler option enforce?",
    code: false,
    language: false,
    options: [
      {
        text: "All variables must explicitly be declared as 'any'",
        code: false,
      },
      {
        text: "Functions and variables with no type infer 'any' implicitly",
        code: false,
      },
      {
        text: "An error is thrown when the compiler infers a type of 'any' for a variable or function parameter",
        code: false,
      },
      {
        text: "It automatically converts all 'any' types to 'unknown'",
        code: false,
      },
    ],
    answer:
      "An error is thrown when the compiler infers a type of 'any' for a variable or function parameter",
    explanation: {
      text: "With noImplicitAny, you must provide explicit type annotations or ensure the compiler can infer a more specific type. Otherwise, it raises an error.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "TypeScript",
    question:
      "Which type in TypeScript is used for values that may be a 'string' or 'number', but nothing else?",
    code: false,
    language: false,
    options: [
      { text: "union of string and number (string | number)", code: false },
      { text: "any", code: false },
      { text: "never", code: false },
      { text: "unknown", code: false },
    ],
    answer: "union of string and number (string | number)",
    explanation: {
      text: "A union type (string | number) restricts values to either 'string' or 'number', disallowing other types without further checks or conversions.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "TypeScript",
    question:
      "When using 'declare' in a .d.ts file, what is it typically used for?",
    code: false,
    language: false,
    options: [
      {
        text: "Defining actual runtime implementations for classes or functions",
        code: false,
      },
      {
        text: "Creating ambient declarations for types that exist at runtime but not in TypeScript",
        code: false,
      },
      {
        text: "Marking a function as deprecated",
        code: false,
      },
      {
        text: "Enabling strict mode in TypeScript",
        code: false,
      },
    ],
    answer:
      "Creating ambient declarations for types that exist at runtime but not in TypeScript",
    explanation: {
      text: "The 'declare' keyword in .d.ts files creates type declarations for external libraries or global variables without providing an implementation. It’s purely for type information.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "TypeScript",
    question:
      "Which is a difference between 'public' and 'private' members in a TypeScript class?",
    code: false,
    language: false,
    options: [
      { text: "private members can be accessed from anywhere", code: false },
      {
        text: "public is the default visibility, private restricts access within the class only",
        code: false,
      },
      {
        text: "private is only recognized at runtime, not compile-time",
        code: false,
      },
      {
        text: "There is no difference, both are effectively the same in TypeScript",
        code: false,
      },
    ],
    answer:
      "public is the default visibility, private restricts access within the class only",
    explanation: {
      text: "In TypeScript, members are public by default. private restricts usage to the class itself. TypeScript enforces this at compile-time (not at runtime).",
      code: false,
    },
  },
  {
    id: 18,
    topic: "TypeScript",
    question:
      "Which type best describes a function that does not return a value?",
    code: false,
    language: false,
    options: [
      { text: "never", code: false },
      { text: "unknown", code: false },
      { text: "void", code: false },
      { text: "any", code: false },
    ],
    answer: "void",
    explanation: {
      text: "A function returning void does not have a usable return value. 'never' indicates a function that never completes at all (throw or infinite loop).",
      code: false,
    },
  },
  {
    id: 19,
    topic: "TypeScript",
    question: "Which statement about 'decorators' in TypeScript is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "They are always enabled by default in every TypeScript project",
        code: false,
      },
      {
        text: "They are an experimental feature requiring 'experimentalDecorators' in tsconfig",
        code: false,
      },
      {
        text: "They only work for third-party libraries, not user-defined classes",
        code: false,
      },
      {
        text: "They are used to create union types on the fly",
        code: false,
      },
    ],
    answer:
      "They are an experimental feature requiring 'experimentalDecorators' in tsconfig",
    explanation: {
      text: "Decorators must be enabled via 'experimentalDecorators': true. They let you annotate and modify classes, methods, properties, etc., at design time.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "TypeScript",
    question:
      "Which type of import/export syntax is supported by 'esModuleInterop' or 'allowSyntheticDefaultImports' in TypeScript?",
    code: false,
    language: false,
    options: [
      { text: "CommonJS require() only", code: false },
      { text: "Named AMD imports", code: false },
      {
        text: "Default imports from modules that only export = in JavaScript",
        code: false,
      },
      {
        text: "It does not affect module resolution in any way",
        code: false,
      },
    ],
    answer: "Default imports from modules that only export = in JavaScript",
    explanation: {
      text: "Enabling esModuleInterop or allowSyntheticDefaultImports allows default import syntax for modules that do not have an actual default export (like certain CommonJS modules).",
      code: false,
    },
  },
  {
    id: 21,
    topic: "TypeScript",
    question: "What is the main advantage of using 'unknown' over 'any'?",
    code: false,
    language: false,
    options: [
      {
        text: "Unknown can be assigned to other types without type checks",
        code: false,
      },
      {
        text: "Unknown forces explicit type narrowing before usage, reducing runtime errors",
        code: false,
      },
      {
        text: "Unknown is only for number-based operations",
        code: false,
      },
      {
        text: "They are identical; 'unknown' is just an alias for 'any'",
        code: false,
      },
    ],
    answer:
      "Unknown forces explicit type narrowing before usage, reducing runtime errors",
    explanation: {
      text: "Unlike 'any', you must check or assert 'unknown' before using it as a specific type. This enforces safer usage patterns.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "TypeScript",
    question:
      "Which TypeScript feature helps when a function can have multiple call signatures with different parameter types?",
    code: false,
    language: false,
    options: [
      { text: "Generic constraints", code: false },
      { text: "Function overloading", code: false },
      { text: "Interface merging", code: false },
      { text: "Mapped types", code: false },
    ],
    answer: "Function overloading",
    explanation: {
      text: "Function overloading in TS allows multiple function signatures for the same function, each specifying different parameters and return types, with a single implementation.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "TypeScript",
    question:
      "Which approach can convert a broad type (like string) into a more specific literal type (e.g., 'hello') at compile time?",
    code: false,
    language: false,
    options: [
      {
        text: "Using type inference in a variable with let str = 'hello' as string",
        code: false,
      },
      {
        text: "Using an explicit type assertion like const str = 'hello' as const",
        code: false,
      },
      {
        text: "TypeScript automatically narrows all string literals to literal types",
        code: false,
      },
      {
        text: "It's impossible to create literal types from string variables",
        code: false,
      },
    ],
    answer:
      "Using an explicit type assertion like const str = 'hello' as const",
    explanation: {
      text: "By default, 'hello' is typed as string, but 'as const' or a const assertion can preserve 'hello' as a string literal type.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "TypeScript",
    question: "Which statement about the 'never' type is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "'never' can be assigned to all other types without error",
        code: false,
      },
      {
        text: "Functions that throw exceptions or never terminate can have return type 'never'",
        code: false,
      },
      {
        text: "It's a subtype of all types except 'any'",
        code: false,
      },
      {
        text: "'never' is used to represent null or undefined",
        code: false,
      },
    ],
    answer:
      "Functions that throw exceptions or never terminate can have return type 'never'",
    explanation: {
      text: "'never' indicates code paths that cannot produce a value. It's often used for error-throwing or infinite loop functions.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "TypeScript",
    question:
      "What is the effect of setting 'skipLibCheck' to true in tsconfig.json?",
    code: false,
    language: false,
    options: [
      {
        text: "It skips type checking of .d.ts files, speeding up compilation",
        code: false,
      },
      {
        text: "It skips over all compile errors in your codebase",
        code: false,
      },
      {
        text: "It disallows usage of external libraries",
        code: false,
      },
      {
        text: "It only checks code in node_modules but skips user code",
        code: false,
      },
    ],
    answer: "It skips type checking of .d.ts files, speeding up compilation",
    explanation: {
      text: "skipLibCheck = true can speed up builds by not type-checking declaration files from libraries, usually safe if those files are well-maintained.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "TypeScript",
    question:
      "Which TypeScript feature allows you to transform types by iterating over properties (like creating a mapped version of each property as optional)?",
    code: false,
    language: false,
    options: [
      { text: "Mapped types", code: false },
      { text: "Index signatures", code: false },
      { text: "Polymorphic this", code: false },
      { text: "Ambient modules", code: false },
    ],
    answer: "Mapped types",
    explanation: {
      text: "Mapped types let you iterate over keys in a type (e.g. { [K in keyof T]?: T[K] }) to transform or modify property definitions.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "TypeScript",
    question: "Which statement about 'any' type usage is best practice?",
    code: false,
    language: false,
    options: [
      {
        text: "'any' is recommended for all function parameters to speed coding",
        code: false,
      },
      {
        text: "Use 'any' sparingly; it disables compile-time checks and can hide errors",
        code: false,
      },
      {
        text: "'any' is safer than 'unknown'",
        code: false,
      },
      {
        text: "It is impossible to use 'any' if strict mode is on",
        code: false,
      },
    ],
    answer:
      "Use 'any' sparingly; it disables compile-time checks and can hide errors",
    explanation: {
      text: "'any' effectively opts out of type checking. It's a fallback if you can't specify a more precise type, but it should be avoided when possible.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "TypeScript",
    question:
      "Which TypeScript compiler option allows default imports from modules that only export using CommonJS exports?",
    code: false,
    language: false,
    options: [
      { text: "allowJs", code: false },
      { text: "skipDefaultImports", code: false },
      { text: "allowSyntheticDefaultImports", code: false },
      { text: "resolveJsonModule", code: false },
    ],
    answer: "allowSyntheticDefaultImports",
    explanation: {
      text: "allowSyntheticDefaultImports (and esModuleInterop) let you use import foo from 'foo' even if 'foo' only exports with module.exports in plain JS.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "TypeScript",
    question:
      "Which of the following statements about 'esModuleInterop' in TypeScript is correct?",
    code: false,
    language: false,
    options: [
      { text: "It prevents any usage of default imports", code: false },
      {
        text: "It enables emit __importStar and __importDefault helpers for better compatibility with CommonJS modules",
        code: false,
      },
      { text: "It is deprecated in the latest TS versions", code: false },
      {
        text: "It only works if you also disable 'strictNullChecks'",
        code: false,
      },
    ],
    answer:
      "It enables emit __importStar and __importDefault helpers for better compatibility with CommonJS modules",
    explanation: {
      text: "esModuleInterop compiles default and named imports in a way that behaves more consistently with ES module semantics, using __importStar / __importDefault under the hood.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "TypeScript",
    question:
      "What is the main difference between 'interface merging' and 'type alias merging' in TypeScript?",
    code: false,
    language: false,
    options: [
      { text: "Both are fully supported in all TS versions", code: false },
      {
        text: "Interfaces can merge declarations with the same name, while type aliases cannot",
        code: false,
      },
      {
        text: "Type aliases can only merge in .d.ts files, interfaces can only merge in .ts files",
        code: false,
      },
      {
        text: "They are identical if you use the same identifier",
        code: false,
      },
    ],
    answer:
      "Interfaces can merge declarations with the same name, while type aliases cannot",
    explanation: {
      text: "Type aliases don't support merging. If you declare multiple type aliases of the same name, it’s an error. Interfaces with the same name do combine their definitions.",
      code: false,
    },
  },

  // 31–40: CODE / ERROR-SPOTTING / COMPLETION

  {
    id: 31,
    topic: "TypeScript",
    question:
      "Complete the generic function signature to ensure 'T' must be a subtype of 'number' or 'string':\n\nfunction toStrLength<T _____ (number | string)>(value: T): number {\n  return value.toString().length;\n}",
    code: `function toStrLength<T _______ (number | string)>(value: T): number {
  return value.toString().length;
}`,
    language: "typescript",
    options: [
      { text: "extends", code: false },
      { text: "super", code: false },
      { text: "implements", code: false },
      { text: ":", code: false },
    ],
    answer: "extends",
    explanation: {
      text: "Generic constraints use extends in TypeScript. Example: function toStrLength<T extends (number | string)>(value: T).",
      code: false,
    },
  },
  {
    id: 32,
    topic: "TypeScript",
    question:
      "Spot the error in the code:\n\nfunction doWork(input: any) {\n  console.log(input.toFixed(2));\n}\n\nIt compiles, but might fail at runtime. Why?",
    code: `function doWork(input: any) {
  console.log(input.toFixed(2));
}`,
    language: "typescript",
    options: [
      {
        text: "toFixed is not a valid function in JavaScript",
        code: false,
      },
      {
        text: "The code uses any, so input could be a string or object that has no toFixed method, causing runtime errors",
        code: false,
      },
      {
        text: "You must import toFixed from 'lib:math'",
        code: false,
      },
      {
        text: "input is a reserved keyword in TypeScript",
        code: false,
      },
    ],
    answer:
      "The code uses any, so input could be a string or object that has no toFixed method, causing runtime errors",
    explanation: {
      text: "Because input is 'any', there's no compile-time guarantee that it’s a number. If it's not a number, calling toFixed will crash at runtime.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "TypeScript",
    question:
      "Complete the code to define an interface with an optional property:\n\ninterface Person {\n  name: string;\n  ________ age?: number;\n}",
    code: `interface Person {
  name: string;
  /* ? */ age?: number;
}`,
    language: "typescript",
    options: [
      { text: "let", code: false },
      { text: "readonly", code: false },
      { text: "public", code: false },
      { text: "// no extra keyword needed", code: false },
    ],
    answer: "// no extra keyword needed",
    explanation: {
      text: "Just age?: number is enough to make the property optional. No let/readonly/public are used inside interface property definitions in that manner.",
      code: false,
    },
  },
  {
    id: 34,
    topic: "TypeScript",
    question:
      "Why does this code produce an error?\n\nfunction greet(msg: string) {\n  msg = 42;\n  console.log(msg);\n}",
    code: `function greet(msg: string) {
  msg = 42;
  console.log(msg);
}`,
    language: "typescript",
    options: [
      {
        text: "You cannot reassign function parameters in TypeScript",
        code: false,
      },
      {
        text: "42 is not assignable to type string, causing a type error",
        code: false,
      },
      {
        text: "console.log is not allowed on msg variables",
        code: false,
      },
      {
        text: "You must declare msg with let inside the function block",
        code: false,
      },
    ],
    answer: "42 is not assignable to type string, causing a type error",
    explanation: {
      text: "Parameters typed as string cannot be assigned a number without a type assertion or union type. This violates TypeScript’s static type checking.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "TypeScript",
    question:
      "Complete this function overload set so that TS can differentiate calls:\n\nfunction pick(value: string[]): string;\nfunction pick(value: number[]): number;\nfunction pick(value: (string | number)[]): string | number {\n  return value[0];\n}\n\nWhat is missing?",
    code: `function pick(value: string[]): string;
function pick(value: number[]): number;
function pick(value: (string | number)[]): string | number {
  return value[0];
}`,
    language: "typescript",
    options: [
      {
        text: "A return type annotation on the function implementation is required",
        code: false,
      },
      {
        text: "Nothing is missing, this is fully correct overload usage",
        code: false,
      },
      {
        text: "You need 'declare' in front of each signature",
        code: false,
      },
      {
        text: "An explicit function name for the implementation is needed: function pickImpl(...)",
        code: false,
      },
    ],
    answer: "Nothing is missing, this is fully correct overload usage",
    explanation: {
      text: "In TS, you define multiple overload signatures plus a single implementation signature that is compatible with all. This example is correct.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "TypeScript",
    question:
      "Spot the error in the code:\n\nconst obj = {\n  title: 'Hello',\n};\nobj.title = 'World';\n\nObject.freeze(obj);\nobj.title = 'Again';\n\nIt compiles but may fail at runtime. Why?",
    code: `const obj = {
  title: 'Hello',
};
obj.title = 'World';

Object.freeze(obj);
obj.title = 'Again';`,
    language: "typescript",
    options: [
      {
        text: "TypeScript doesn't enforce immutability from Object.freeze at compile time; it still sees obj.title as writable",
        code: false,
      },
      {
        text: "You must declare the property as 'readonly title'",
        code: false,
      },
      {
        text: "You can’t use const on an object if you want to modify properties",
        code: false,
      },
      {
        text: "Object.freeze is not supported in TypeScript",
        code: false,
      },
    ],
    answer:
      "TypeScript doesn't enforce immutability from Object.freeze at compile time; it still sees obj.title as writable",
    explanation: {
      text: "Object.freeze is a runtime method; TS won't infer that 'title' is read-only. A typical fix is to cast the object as a Readonly type or use 'as const'.",
      code: false,
    },
  },
  {
    id: 37,
    topic: "TypeScript",
    question:
      "Complete the code so that 'user' is typed as a record with string keys and boolean values:\n\nconst user: ________ = {\n  isAdmin: true,\n  canEdit: false,\n};",
    code: `const user: /* ? */ = {
  isAdmin: true,
  canEdit: false,
};`,
    language: "typescript",
    options: [
      { text: "Record<string, boolean>", code: false },
      { text: "{ [key: string]: number }", code: false },
      { text: "Partial<string, boolean>", code: false },
      { text: "Map<string, boolean>", code: false },
    ],
    answer: "Record<string, boolean>",
    explanation: {
      text: "Record<K, V> is a TS utility type that creates an object type with keys of type K and values of type V. Here, K=string, V=boolean.",
      code: false,
    },
  },
  {
    id: 38,
    topic: "TypeScript",
    question:
      "Spot the error:\n\nlet val: number | null = 10;\nconsole.log(val.toFixed(2));\n\n// TS error: 'val' could be null.\n// How to fix it properly?",
    code: `let val: number | null = 10;
console.log(val.toFixed(2));`,
    language: "typescript",
    options: [
      {
        text: "Change the type to 'number' only, removing null entirely",
        code: false,
      },
      {
        text: "Narrow or check for null first, e.g. if(val !== null) console.log(val.toFixed(2))",
        code: false,
      },
      {
        text: "Use val ? val.toFixed(2) : 0 with a ternary, or non-null assertion operator",
        code: false,
      },
      {
        text: "Any approach is acceptable; TS never warns about null",
        code: false,
      },
    ],
    answer:
      "Narrow or check for null first, e.g. if(val !== null) console.log(val.toFixed(2))",
    explanation: {
      text: "Because val might be null, you must handle that possibility. Checking val !== null or using optional chaining or the non-null assertion (!) would fix the error.",
      code: false,
    },
  },
  {
    id: 39,
    topic: "TypeScript",
    question:
      "Complete the snippet:\n\nfunction getLength(arr: ReadonlyArray<string>): number {\n  return ________;\n}\n\nWe want to return the number of elements in arr, but cannot modify it.",
    code: `function getLength(arr: ReadonlyArray<string>): number {
  return /* ? */;
}`,
    language: "typescript",
    options: [
      { text: "arr.size", code: false },
      { text: "arr.length", code: false },
      { text: "arr.pop()", code: false },
      { text: "arr.splice(0,0).length", code: false },
    ],
    answer: "arr.length",
    explanation: {
      text: "A ReadonlyArray doesn't allow mutating methods, but length is still available for reading the number of elements.",
      code: false,
    },
  },
  {
    id: 40,
    topic: "TypeScript",
    question:
      "Spot the error:\n\nfunction logNames(names: string[]): void {\n  names.forEach(name => console.log(name.toUppercase()));\n}\n\nTS says: 'Property toUppercase does not exist on type string'. Correct fix?",
    code: `function logNames(names: string[]): void {
  names.forEach(name => console.log(name.toUppercase()));
}`,
    language: "typescript",
    options: [
      {
        text: "Change name: string to any so TS won't complain",
        code: false,
      },
      {
        text: "Use the correct method name toUpperCase() instead of toUppercase()",
        code: false,
      },
      {
        text: "Remove console.log calls; they're not allowed in TS",
        code: false,
      },
      {
        text: "Type assertion: (name as string).toUppercase()",
        code: false,
      },
    ],
    answer:
      "Use the correct method name toUpperCase() instead of toUppercase()",
    explanation: {
      text: "In JavaScript/TypeScript, the method is toUpperCase(), not toUppercase(). TS correctly flags a non-existent method as an error.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// BLOCKCHAIN QUESTIONS

export const blockchainQuestions = [
  // 1–30: MIXED DIFFICULTY MULTIPLE-CHOICE

  {
    id: 1,
    topic: "Blockchain",
    question:
      "What is the fundamental data structure used in most blockchain implementations?",
    code: false,
    language: false,
    options: [
      { text: "Linked list", code: false },
      { text: "Hash tree (Merkle tree)", code: false },
      { text: "Binary search tree", code: false },
      { text: "Directed acyclic graph", code: false },
    ],
    answer: "Hash tree (Merkle tree)",
    explanation: {
      text: "Blockchains frequently use Merkle trees to efficiently summarize and verify the integrity of large sets of data (e.g., transactions) within each block.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "Blockchain",
    question:
      "Which of the following is NOT a characteristic of a public, permissionless blockchain?",
    code: false,
    language: false,
    options: [
      { text: "Anyone can read the ledger", code: false },
      { text: "Anyone can propose blocks or transactions", code: false },
      { text: "It relies on a centralized certificate authority", code: false },
      {
        text: "It uses a consensus mechanism like Proof of Work or Proof of Stake",
        code: false,
      },
    ],
    answer: "It relies on a centralized certificate authority",
    explanation: {
      text: "A public, permissionless blockchain typically does not depend on a single centralized authority. Anyone can join, read, and validate blocks.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "Blockchain",
    question:
      "In Bitcoin, what is the main purpose of the block reward (the newly minted coins given to miners)?",
    code: false,
    language: false,
    options: [
      {
        text: "To punish nodes that broadcast invalid transactions",
        code: false,
      },
      { text: "To pay for transaction fees in the network", code: false },
      {
        text: "To incentivize miners to secure the network and process transactions",
        code: false,
      },
      {
        text: "To finance the development of the Bitcoin protocol",
        code: false,
      },
    ],
    answer:
      "To incentivize miners to secure the network and process transactions",
    explanation: {
      text: "Miners receive block rewards and transaction fees, which motivates them to provide computational power (hashing) and secure the blockchain.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "Blockchain",
    question: "What is a smart contract in the context of Ethereum?",
    code: false,
    language: false,
    options: [
      {
        text: "A contract that is signed by AI or machine learning systems",
        code: false,
      },
      {
        text: "A self-executing piece of code deployed on the Ethereum blockchain that runs when certain conditions are met",
        code: false,
      },
      {
        text: "A legal agreement automatically recognized by courts worldwide",
        code: false,
      },
      {
        text: "A contract that charges no transaction fees",
        code: false,
      },
    ],
    answer:
      "A self-executing piece of code deployed on the Ethereum blockchain that runs when certain conditions are met",
    explanation: {
      text: "On Ethereum, a smart contract is essentially code (written often in Solidity) that executes on the Ethereum Virtual Machine (EVM).",
      code: false,
    },
  },
  {
    id: 5,
    topic: "Blockchain",
    question:
      "Which consensus mechanism involves miners competing to solve a cryptographic puzzle, thereby expending real-world resources (electricity)?",
    code: false,
    language: false,
    options: [
      { text: "Proof of Stake", code: false },
      { text: "Proof of Work", code: false },
      { text: "Delegated Proof of Stake", code: false },
      { text: "Proof of Authority", code: false },
    ],
    answer: "Proof of Work",
    explanation: {
      text: "Proof of Work requires computational power (and thus electricity) to solve cryptographic puzzles (hashes). Bitcoin is a well-known PoW blockchain.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "Blockchain",
    question:
      "What does the term '51% attack' refer to in blockchain security?",
    code: false,
    language: false,
    options: [
      {
        text: "When over half the nodes crash simultaneously, causing network downtime",
        code: false,
      },
      {
        text: "When a single miner or group controls over 51% of the hashing or staking power, potentially allowing double-spend attacks",
        code: false,
      },
      {
        text: "A vulnerability where 51% of the transactions have invalid signatures",
        code: false,
      },
      {
        text: "A planned hard fork requiring 51% user approval",
        code: false,
      },
    ],
    answer:
      "When a single miner or group controls over 51% of the hashing or staking power, potentially allowing double-spend attacks",
    explanation: {
      text: "Controlling the majority of computational or staking power lets an attacker potentially exclude or manipulate transactions, rewriting the blockchain to their advantage.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "Blockchain",
    question:
      "Which is a key difference between permissioned (private) blockchains and public blockchains?",
    code: false,
    language: false,
    options: [
      {
        text: "Permissioned blockchains are always faster than public blockchains",
        code: false,
      },
      {
        text: "Public blockchains encrypt all data, whereas permissioned blockchains do not",
        code: false,
      },
      {
        text: "Permissioned blockchains restrict who can participate in validation or read data, whereas public blockchains allow anyone to join",
        code: false,
      },
      {
        text: "Public blockchains require proof of identity (KYC) to mine new blocks",
        code: false,
      },
    ],
    answer:
      "Permissioned blockchains restrict who can participate in validation or read data, whereas public blockchains allow anyone to join",
    explanation: {
      text: "A permissioned (private) blockchain typically has an access control layer restricting read or write capabilities, whereas a public chain is open to everyone.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "Blockchain",
    question: "What is a 'nonce' in the context of Proof of Work mining?",
    code: false,
    language: false,
    options: [
      {
        text: "A type of transaction that carries zero value",
        code: false,
      },
      {
        text: "A random or pseudo-random number used once in hashing to find a target difficulty",
        code: false,
      },
      {
        text: "An address format used in Ethereum for contract deployment",
        code: false,
      },
      {
        text: "An error code that indicates an invalid block",
        code: false,
      },
    ],
    answer:
      "A random or pseudo-random number used once in hashing to find a target difficulty",
    explanation: {
      text: "Miners vary the 'nonce' and hash the block data repeatedly to find a hash value below the difficulty target in Proof of Work.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "Blockchain",
    question:
      "Which blockchain property ensures that once data is written, it cannot be changed or deleted easily (immutability)?",
    code: false,
    language: false,
    options: [
      { text: "Hash chaining of blocks", code: false },
      { text: "Using a single centralized server for all data", code: false },
      { text: "Offline backups at multiple sites", code: false },
      { text: "Private keys stored locally", code: false },
    ],
    answer: "Hash chaining of blocks",
    explanation: {
      text: "Blocks reference the hash of the previous block. Altering a block changes its hash, invalidating subsequent blocks unless one re-mines or re-stakes the chain, which is computationally expensive.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "Blockchain",
    question: "Which statement best describes 'gas' in the Ethereum network?",
    code: false,
    language: false,
    options: [
      {
        text: "An actual physical resource used to power the network",
        code: false,
      },
      {
        text: "A measure of the computational effort required to execute operations, paid in Ether",
        code: false,
      },
      {
        text: "A separate cryptocurrency pegged 1:1 with USD",
        code: false,
      },
      {
        text: "A JSON-RPC method for retrieving transaction history",
        code: false,
      },
    ],
    answer:
      "A measure of the computational effort required to execute operations, paid in Ether",
    explanation: {
      text: "Gas represents the cost (in units) of computational steps. The gas price in Ether determines how much one pays for each unit of gas used by a transaction or contract execution.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "Blockchain",
    question: "What is a 'fork' in the context of blockchain technology?",
    code: false,
    language: false,
    options: [
      {
        text: "When multiple peers momentarily disagree on the best chain tip",
        code: false,
      },
      {
        text: "A protocol upgrade or chain split that creates two different versions of the blockchain",
        code: false,
      },
      { text: "An attack that manipulates node communications", code: false },
      { text: "A placeholder transaction used for debugging", code: false },
    ],
    answer:
      "A protocol upgrade or chain split that creates two different versions of the blockchain",
    explanation: {
      text: "A 'fork' can be soft (backward compatible changes) or hard (incompatible changes), sometimes causing chain splits (e.g., Ethereum/Ethereum Classic).",
      code: false,
    },
  },
  {
    id: 12,
    topic: "Blockchain",
    question: "What does ERC-20 signify in the Ethereum ecosystem?",
    code: false,
    language: false,
    options: [
      {
        text: "A standard for fungible tokens that define common methods like transfer, balanceOf",
        code: false,
      },
      {
        text: "A governance process for EIPs (Ethereum Improvement Proposals)",
        code: false,
      },
      {
        text: "A consensus mechanism to replace Proof of Work",
        code: false,
      },
      {
        text: "A standard for minting NFTs (non-fungible tokens)",
        code: false,
      },
    ],
    answer:
      "A standard for fungible tokens that define common methods like transfer, balanceOf",
    explanation: {
      text: "ERC-20 tokens are interchangeable/fungible and follow a standard interface for token contracts. For NFTs, there's ERC-721 or ERC-1155, etc.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "Blockchain",
    question:
      "Which of the following is typically the largest advantage of a proof-of-stake (PoS) consensus mechanism?",
    code: false,
    language: false,
    options: [
      {
        text: "It guarantees transactions are free of charge",
        code: false,
      },
      {
        text: "It reduces energy consumption compared to proof-of-work",
        code: false,
      },
      {
        text: "It eliminates the possibility of a 51% attack",
        code: false,
      },
      {
        text: "It requires no hardware to validate blocks",
        code: false,
      },
    ],
    answer: "It reduces energy consumption compared to proof-of-work",
    explanation: {
      text: "PoS selects validators based on staked coins, significantly reducing the need for high computing power and thus energy usage, though it doesn't eliminate 51% attacks entirely (one can accumulate 51% of stake).",
      code: false,
    },
  },
  {
    id: 14,
    topic: "Blockchain",
    question:
      "Which function typically hashes Ethereum contract functions and arguments to find the correct function call?",
    code: false,
    language: false,
    options: [
      {
        text: "ABI encoding function or 'keccak256' of the signature",
        code: false,
      },
      { text: "Merkle root generation", code: false },
      { text: "ECDSA signature creation", code: false },
      { text: "The consensus function in mining", code: false },
    ],
    answer: "ABI encoding function or 'keccak256' of the signature",
    explanation: {
      text: "Ethereum uses an ABI (Application Binary Interface). For function calls, the first 4 bytes of keccak256(functionSignature) are used to identify which contract function is invoked.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "Blockchain",
    question:
      "In a typical blockchain wallet, why is it crucial to secure the private key?",
    code: false,
    language: false,
    options: [
      {
        text: "Because it is used to decrypt all network traffic",
        code: false,
      },
      {
        text: "Because it signs transactions, granting full control over the associated funds",
        code: false,
      },
      {
        text: "Because it is only used to generate block rewards",
        code: false,
      },
      {
        text: "Because it is publicly viewable on block explorers",
        code: false,
      },
    ],
    answer:
      "Because it signs transactions, granting full control over the associated funds",
    explanation: {
      text: "A private key is used to sign transactions from that wallet’s address. If compromised, an attacker can spend or transfer the funds at will.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "Blockchain",
    question:
      "What is the purpose of 'sharding' in blockchain scalability solutions?",
    code: false,
    language: false,
    options: [
      { text: "To store transaction data off-chain completely", code: false },
      {
        text: "To split the network state or transaction load into separate partitions for parallel processing",
        code: false,
      },
      { text: "To remove the need for consensus entirely", code: false },
      {
        text: "To revert the chain to a specific block after errors",
        code: false,
      },
    ],
    answer:
      "To split the network state or transaction load into separate partitions for parallel processing",
    explanation: {
      text: "Sharding partitions the blockchain into shards, each handling a subset of transactions, potentially increasing throughput compared to a single chain handling all transactions.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "Blockchain",
    question: "What is a 'merkle root' in a block header used for?",
    code: false,
    language: false,
    options: [
      {
        text: "It points to the next block in the chain",
        code: false,
      },
      {
        text: "It is the address of the block miner",
        code: false,
      },
      {
        text: "It is a single hash representing all the transactions in that block for fast verification",
        code: false,
      },
      {
        text: "It is a backup of the entire blockchain state",
        code: false,
      },
    ],
    answer:
      "It is a single hash representing all the transactions in that block for fast verification",
    explanation: {
      text: "A merkle root is derived from hashing all transactions in a pairwise merkle tree, enabling quick checks of individual transaction inclusion without storing/rehashing the entire set.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "Blockchain",
    question:
      "Which best describes an 'oracle' in the context of smart contracts?",
    code: false,
    language: false,
    options: [
      { text: "A node that can override consensus rules", code: false },
      {
        text: "A data feed or service that provides off-chain information to on-chain contracts",
        code: false,
      },
      {
        text: "A cryptographic function used for hashing transactions",
        code: false,
      },
      {
        text: "A user who runs a full node and a miner simultaneously",
        code: false,
      },
    ],
    answer:
      "A data feed or service that provides off-chain information to on-chain contracts",
    explanation: {
      text: "Smart contracts are deterministic and typically only know on-chain data. An oracle bridges real-world or off-chain data (e.g., price feeds) into the contract's execution environment.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "Blockchain",
    question:
      "Which mechanism ensures transactions are digitally signed to prove ownership of funds without revealing private keys?",
    code: false,
    language: false,
    options: [
      { text: "Zero-knowledge proofs exclusively", code: false },
      {
        text: "Elliptic Curve Digital Signature Algorithm (ECDSA) or similar",
        code: false,
      },
      { text: "Symmetric encryption with a shared key", code: false },
      { text: "Quantum-safe hashing with SHA-512", code: false },
    ],
    answer: "Elliptic Curve Digital Signature Algorithm (ECDSA) or similar",
    explanation: {
      text: "Most blockchains (Bitcoin, Ethereum, etc.) rely on public key cryptography (often ECDSA). Users sign transactions with their private key to prove ownership without revealing the key itself.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "Blockchain",
    question: "What is a 'hard fork'?",
    code: false,
    language: false,
    options: [
      {
        text: "A soft fork that was not accepted by 51% of the community",
        code: false,
      },
      {
        text: "A backward-compatible upgrade to the blockchain protocol",
        code: false,
      },
      {
        text: "A network split where the upgrade introduces rules incompatible with the old protocol",
        code: false,
      },
      {
        text: "A special block that merges two competing chains",
        code: false,
      },
    ],
    answer:
      "A network split where the upgrade introduces rules incompatible with the old protocol",
    explanation: {
      text: "A hard fork is an incompatible protocol change. Nodes that don’t upgrade can’t validate blocks produced under the new rules, leading to a chain split if disagreement persists.",
      code: false,
    },
  },
  {
    id: 21,
    topic: "Blockchain",
    question:
      "Which of the following is a typical advantage of layer-2 solutions (e.g., Lightning Network, Plasma)?",
    code: false,
    language: false,
    options: [
      { text: "They remove the need for main chain security", code: false },
      {
        text: "They increase transaction throughput by handling transactions off-chain or in side-chains",
        code: false,
      },
      {
        text: "They store every transaction in on-chain blocks for greater transparency",
        code: false,
      },
      {
        text: "They replace the consensus algorithm with a simpler one",
        code: false,
      },
    ],
    answer:
      "They increase transaction throughput by handling transactions off-chain or in side-chains",
    explanation: {
      text: "Layer-2 solutions process the majority of transactions off the main chain and only settle or checkpoint on-chain, reducing main chain congestion and fees.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "Blockchain",
    question:
      "Which property of blockchain addresses ensures that generating a new address does not require direct interaction with the network or a central authority?",
    code: false,
    language: false,
    options: [
      { text: "They are minted by a central registry", code: false },
      {
        text: "They rely on a proof-of-identity check with the central authority",
        code: false,
      },
      {
        text: "They are derived from asymmetric cryptography (public-private keys)",
        code: false,
      },
      {
        text: "They must be pre-approved by block validators before use",
        code: false,
      },
    ],
    answer:
      "They are derived from asymmetric cryptography (public-private keys)",
    explanation: {
      text: "Anyone can generate a valid public/private key pair offline, and the address is derived from the public key—no need for a central authority.",
      code: false,
    },
  },
  {
    id: 23,
    topic: "Blockchain",
    question: "What is the role of 'gas limit' in an Ethereum transaction?",
    code: false,
    language: false,
    options: [
      {
        text: "It limits the maximum Ether one can spend in a single transaction",
        code: false,
      },
      {
        text: "It specifies how many ERC-20 tokens are minted as transaction fees",
        code: false,
      },
      {
        text: "It caps the computational steps a transaction can use before running out of gas and reverting",
        code: false,
      },
      {
        text: "It sets the block reward for miners",
        code: false,
      },
    ],
    answer:
      "It caps the computational steps a transaction can use before running out of gas and reverting",
    explanation: {
      text: "The gas limit is how many units of gas the sender is willing to spend on execution. If execution needs more gas than supplied, it reverts (out of gas error).",
      code: false,
    },
  },
  {
    id: 24,
    topic: "Blockchain",
    question:
      "Which of the following is an example of a non-fungible token (NFT) standard on Ethereum?",
    code: false,
    language: false,
    options: [
      { text: "ERC-20", code: false },
      { text: "ERC-721", code: false },
      { text: "ERC-1155", code: false },
      { text: "Both ERC-721 and ERC-1155 can handle NFTs", code: false },
    ],
    answer: "Both ERC-721 and ERC-1155 can handle NFTs",
    explanation: {
      text: "ERC-721 is the classic NFT standard for unique tokens. ERC-1155 supports both fungible and non-fungible tokens within a single contract. So both can handle NFTs.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "Blockchain",
    question: "What is a 'block explorer' in the blockchain ecosystem?",
    code: false,
    language: false,
    options: [
      {
        text: "A protocol-level function to find orphaned blocks",
        code: false,
      },
      {
        text: "A web or application interface allowing users to view transactions, blocks, and addresses on a blockchain",
        code: false,
      },
      {
        text: "A software library used for writing smart contracts",
        code: false,
      },
      {
        text: "A scanning tool that hacks into private keys",
        code: false,
      },
    ],
    answer:
      "A web or application interface allowing users to view transactions, blocks, and addresses on a blockchain",
    explanation: {
      text: "Block explorers (e.g., Etherscan for Ethereum, Blockchain.com for Bitcoin) provide public read-only access to transaction data, block details, and addresses.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "Blockchain",
    question:
      "Which cryptographic technique underlies many privacy-oriented blockchains (e.g., Zcash) to prove validity of a transaction without revealing its details?",
    code: false,
    language: false,
    options: [
      { text: "Zero-knowledge proofs (ZKP)", code: false },
      { text: "RSA encryption", code: false },
      { text: "MD5 hashing", code: false },
      { text: "ECDSA signatures", code: false },
    ],
    answer: "Zero-knowledge proofs (ZKP)",
    explanation: {
      text: "Zero-knowledge proofs allow one party to prove they know or own something without revealing the actual data. Zcash famously implements zk-SNARKs for private transactions.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "Blockchain",
    question: "In blockchain, what does 'finality' refer to?",
    code: false,
    language: false,
    options: [
      {
        text: "The guarantee that once a block is appended, it cannot be reversed or altered after a certain point",
        code: false,
      },
      {
        text: "The last block in a chain before a hard fork occurs",
        code: false,
      },
      {
        text: "The ephemeral state of pending transactions in the mempool",
        code: false,
      },
      {
        text: "A proof that no more blocks can be mined",
        code: false,
      },
    ],
    answer:
      "The guarantee that once a block is appended, it cannot be reversed or altered after a certain point",
    explanation: {
      text: "Finality means that after enough confirmations (or in PoS protocols, certain finalized checkpoints), the block is extremely unlikely to be reverted, ensuring transaction permanence.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "Blockchain",
    question: "Which statement about 'light clients' is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "They store the entire blockchain and validate every block fully",
        code: false,
      },
      {
        text: "They rely on only block headers or a subset of data to verify transactions, reducing storage and computation requirements",
        code: false,
      },
      {
        text: "They only connect to test networks, not mainnets",
        code: false,
      },
      {
        text: "They are used exclusively for mining blocks",
        code: false,
      },
    ],
    answer:
      "They rely on only block headers or a subset of data to verify transactions, reducing storage and computation requirements",
    explanation: {
      text: "Light clients only need a small subset of the blockchain (like block headers and merkle proofs) to validate transactions and ensure they are included in a valid chain.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "Blockchain",
    question:
      "What is a 'UTXO' (Unspent Transaction Output) model used by blockchains like Bitcoin?",
    code: false,
    language: false,
    options: [
      {
        text: "A representation of account balances with an internal ledger",
        code: false,
      },
      { text: "A method for storing block headers in a DAG", code: false },
      {
        text: "A design where each transaction input must reference a previous unspent output, and leftover funds become a new output",
        code: false,
      },
      {
        text: "A state transition system used only by smart contracts",
        code: false,
      },
    ],
    answer:
      "A design where each transaction input must reference a previous unspent output, and leftover funds become a new output",
    explanation: {
      text: "In UTXO-based systems (like Bitcoin), transactions consume unspent outputs from prior transactions and create new outputs, forming a chain of ownership.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "Blockchain",
    question:
      "Which of the following best describes a 'DAO' (Decentralized Autonomous Organization)?",
    code: false,
    language: false,
    options: [
      {
        text: "A single company controlling blockchain consensus",
        code: false,
      },
      {
        text: "A self-governing entity encoded in smart contracts, allowing token holders to vote on proposals",
        code: false,
      },
      {
        text: "A private key management system for offline wallets",
        code: false,
      },
      {
        text: "A legal entity recognized by international law",
        code: false,
      },
    ],
    answer:
      "A self-governing entity encoded in smart contracts, allowing token holders to vote on proposals",
    explanation: {
      text: "DAOs are groups organized around smart contracts; governance and decision-making are handled through on-chain proposals and votes, without a centralized leadership.",
      code: false,
    },
  },

  // 31–45: DEVELOPER-ORIENTED QUESTIONS

  {
    id: 31,
    topic: "Blockchain",
    question:
      "Which language is primarily used to write smart contracts on the Ethereum blockchain?",
    code: false,
    language: false,
    options: [
      { text: "Golang", code: false },
      { text: "Rust", code: false },
      { text: "Solidity", code: false },
      { text: "C++", code: false },
    ],
    answer: "Solidity",
    explanation: {
      text: "While there are other options (Vyper, etc.), Solidity is by far the most common language for writing Ethereum smart contracts.",
      code: false,
    },
  },
  {
    id: 32,
    topic: "Blockchain",
    question:
      "Which library is commonly used in JavaScript/TypeScript to interact with Ethereum and other EVM-compatible blockchains?",
    code: false,
    language: false,
    options: [
      { text: "axios", code: false },
      { text: "ethers.js or web3.js", code: false },
      { text: "jQuery", code: false },
      { text: "Hardhat.js", code: false },
    ],
    answer: "ethers.js or web3.js",
    explanation: {
      text: "web3.js and ethers.js are the two most popular libraries for dApp development, enabling you to send transactions, call smart contract functions, and listen to events from JavaScript/TypeScript.",
      code: false,
    },
  },
  {
    id: 33,
    topic: "Blockchain",
    question:
      "In a Solidity contract, which function is invoked if no other function matches the call data (and often used to receive plain Ether transfers)?",
    code: false,
    language: false,
    options: [
      { text: "constructor()", code: false },
      { text: "fallback() or receive()", code: false },
      { text: "noMatch()", code: false },
      { text: "unsupportedCall()", code: false },
    ],
    answer: "fallback() or receive()",
    explanation: {
      text: "The fallback() function is triggered when a contract call does not match any existing function signature. For direct Ether transfers (no call data), receive() can handle it (in Solidity >=0.6).",
      code: false,
    },
  },
  {
    id: 34,
    topic: "Blockchain",
    question:
      "What is the difference between 'require' and 'assert' in Solidity?",
    code: false,
    language: false,
    options: [
      {
        text: "'assert' is used for user input checks, 'require' is for internal invariants only",
        code: false,
      },
      {
        text: "'require' reverts on false conditions and refunds gas, while 'assert' is meant for internal invariants and uses up all gas on failure",
        code: false,
      },
      {
        text: "'require' and 'assert' do exactly the same thing in all Solidity versions",
        code: false,
      },
      {
        text: "'assert' logs a warning but doesn't revert, while 'require' reverts",
        code: false,
      },
    ],
    answer:
      "'require' reverts on false conditions and refunds gas, while 'assert' is meant for internal invariants and uses up all gas on failure",
    explanation: {
      text: "Best practice: use require() for input validation and conditions, use assert() to catch truly impossible states or serious internal logic errors. Failing an assert can consume all gas, indicating a bug rather than a user error.",
      code: false,
    },
  },
  {
    id: 35,
    topic: "Blockchain",
    question:
      "Which framework is widely used for compiling, deploying, and testing Solidity contracts in a local or test network environment?",
    code: false,
    language: false,
    options: [
      { text: "Truffle", code: false },
      { text: "Geth", code: false },
      { text: "Babel", code: false },
      { text: "React Native", code: false },
    ],
    answer: "Truffle",
    explanation: {
      text: "Truffle is a well-known suite for managing Solidity contract compilation, migration, and testing. Hardhat is another popular alternative.",
      code: false,
    },
  },
  {
    id: 36,
    topic: "Blockchain",
    question:
      "Which Hardhat plugin or command can automatically run tests against a local Ethereum network, enabling easy debugging of smart contracts?",
    code: false,
    language: false,
    options: [
      { text: "hardhat run-tests", code: false },
      { text: "hardhat test", code: false },
      { text: "hardhat console", code: false },
      { text: "hardhat debug-run", code: false },
    ],
    answer: "hardhat test",
    explanation: {
      text: "With Hardhat, you can write tests in JavaScript/TypeScript or even Solidity. `npx hardhat test` spins up an in-process local network, compiles contracts, and runs the tests automatically.",
      code: false,
    },
  },
  {
    id: 37,
    topic: "Blockchain",
    question:
      "What is 're-entrancy' in the context of smart contract security?",
    code: false,
    language: false,
    options: [
      {
        text: "A function that calls itself recursively until the contract runs out of gas",
        code: false,
      },
      {
        text: "When an external call to another contract can call back into the original contract before its first execution finishes, potentially altering the contract's state unexpectedly",
        code: false,
      },
      {
        text: "A special type of fallback function that only triggers once",
        code: false,
      },
      {
        text: "The process of removing an attacker from the validator set",
        code: false,
      },
    ],
    answer:
      "When an external call to another contract can call back into the original contract before its first execution finishes, potentially altering the contract's state unexpectedly",
    explanation: {
      text: "Re-entrancy is a major vulnerability if a contract updates its state after sending Ether or calling an untrusted external contract. The external contract might call back in re-entrantly, exploiting inconsistent state.",
      code: false,
    },
  },
  {
    id: 38,
    topic: "Blockchain",
    question:
      "Which design pattern is recommended to prevent re-entrancy attacks in Solidity?",
    code: false,
    language: false,
    options: [
      {
        text: "Use a global variable called reentryGuard with a boolean switch",
        code: false,
      },
      {
        text: "Check-Effects-Interactions pattern: update contract state before external calls",
        code: false,
      },
      {
        text: "Always use revert statements before sending Ether",
        code: false,
      },
      {
        text: "Implement a fallback function that reverts by default",
        code: false,
      },
    ],
    answer:
      "Check-Effects-Interactions pattern: update contract state before external calls",
    explanation: {
      text: "By updating the internal contract state (effects) before making external calls (interactions), you reduce the risk of re-entrancy vulnerabilities. Alternatively, you can use re-entrancy guards from libraries like OpenZeppelin.",
      code: false,
    },
  },
  {
    id: 39,
    topic: "Blockchain",
    question:
      "Which method in ethers.js retrieves a smart contract instance to call functions or send transactions?",
    code: false,
    language: false,
    options: [
      { text: "provider.getContractInterface()", code: false },
      { text: "ethers.Contract(address, abi, signerOrProvider)", code: false },
      { text: "ethers.fetchContract(address)", code: false },
      { text: "ethers.getConnection(address, abi)", code: false },
    ],
    answer: "ethers.Contract(address, abi, signerOrProvider)",
    explanation: {
      text: "To interact with a deployed contract in ethers.js, you typically create a new Contract object: `new ethers.Contract(contractAddress, contractABI, providerOrSigner)`.",
      code: false,
    },
  },
  {
    id: 40,
    topic: "Blockchain",
    question:
      "What is an 'Event' in Solidity, and how is it used in dApp development?",
    code: false,
    language: false,
    options: [
      {
        text: "A special fallback function that triggers when Ether is received",
        code: false,
      },
      {
        text: "A placeholder for console logs in production",
        code: false,
      },
      {
        text: "A way to emit logs on the blockchain that can be indexed and queried by off-chain applications (like front-end UIs)",
        code: false,
      },
      {
        text: "A method to create random numbers natively in Solidity",
        code: false,
      },
    ],
    answer:
      "A way to emit logs on the blockchain that can be indexed and queried by off-chain applications (like front-end UIs)",
    explanation: {
      text: "Events are logs that allow off-chain tools to listen for specific contract activity (e.g., a Transfer event in an ERC-20 token). They don't directly affect on-chain logic, but they are crucial for UIs and watchers.",
      code: false,
    },
  },
  {
    id: 41,
    topic: "Blockchain",
    question:
      "Which function in Solidity is used to send Ether with a 2300 gas stipend, and automatically reverts on failure?",
    code: false,
    language: false,
    options: [
      { text: "transfer()", code: false },
      { text: "call.value()()", code: false },
      { text: "delegatecall()", code: false },
      { text: "inlinePay()", code: false },
    ],
    answer: "transfer()",
    explanation: {
      text: "Ether sending mechanisms in Solidity include `transfer()` (sends 2300 gas, reverts on failure) and `call.value(...)()` which is more flexible but requires manual error checking. `delegatecall()` is for advanced context switching, not sending Ether.",
      code: false,
    },
  },
  {
    id: 42,
    topic: "Blockchain",
    question:
      "What is the purpose of 'OpenZeppelin' in Ethereum smart contract development?",
    code: false,
    language: false,
    options: [
      {
        text: "It's a standard naming convention for Ether addresses",
        code: false,
      },
      {
        text: "It's a library of secure, audited smart contract templates for ERC-20, ERC-721, etc.",
        code: false,
      },
      {
        text: "It's a framework for building only front-end dApps with React",
        code: false,
      },
      {
        text: "It's a blockchain explorer alternative to Etherscan",
        code: false,
      },
    ],
    answer:
      "It's a library of secure, audited smart contract templates for ERC-20, ERC-721, etc.",
    explanation: {
      text: "OpenZeppelin is a widely-used set of Solidity libraries for secure smart contract development, including token contracts and utilities like reentrancy guards.",
      code: false,
    },
  },
  {
    id: 43,
    topic: "Blockchain",
    question:
      "Which function in Solidity returns the current block timestamp (Unix epoch in seconds)?",
    code: false,
    language: false,
    options: [
      { text: "block.time()", code: false },
      { text: "timestamp()", code: false },
      { text: "block.timestamp", code: false },
      { text: "this.blockTime()", code: false },
    ],
    answer: "block.timestamp",
    explanation: {
      text: "block.timestamp (an alias for now in older Solidity versions) is a global variable providing the approximate time of the current block, as set by the miner/validator.",
      code: false,
    },
  },
  {
    id: 44,
    topic: "Blockchain",
    question:
      "In a typical local development environment, how do you generate a set of test accounts pre-funded with Ether for contract testing?",
    code: false,
    language: false,
    options: [
      {
        text: "By calling the depositFunds() function on the mainnet",
        code: false,
      },
      {
        text: "Using local blockchain tools like Ganache or Hardhat's built-in accounts",
        code: false,
      },
      { text: "Manually copying private keys from Etherscan", code: false },
      {
        text: "Using 'randomAccountGenerator' contract on mainnet",
        code: false,
      },
    ],
    answer:
      "Using local blockchain tools like Ganache or Hardhat's built-in accounts",
    explanation: {
      text: "Ganache (Truffle suite) or Hardhat's built-in network provide ephemeral accounts loaded with test Ether so you can deploy contracts and run tests without real ETH.",
      code: false,
    },
  },
  {
    id: 45,
    topic: "Blockchain",
    question:
      "Which step is recommended before deploying a production-grade smart contract?",
    code: false,
    language: false,
    options: [
      {
        text: "Rely on test coverage only; no need for third-party review",
        code: false,
      },
      {
        text: "Perform audits or security reviews (manual or automated) to identify vulnerabilities",
        code: false,
      },
      {
        text: "Hard-code private keys into the source code for easy verification",
        code: false,
      },
      {
        text: "Set the fallback function to selfdestruct the contract if anything goes wrong",
        code: false,
      },
    ],
    answer:
      "Perform audits or security reviews (manual or automated) to identify vulnerabilities",
    explanation: {
      text: "Production contracts often handle real assets. Auditing the code (via internal checks, formal verification, or third-party security firms) is critical to minimize the risk of exploits.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// DATABASE QUESTIONS

export const databaseQuestions = [
  // 1–20: THEORY (RELATIONAL & NOSQL)

  {
    id: 1,
    topic: "Database",
    question:
      "Which of the following is NOT a characteristic of a relational database?",
    code: false,
    language: false,
    options: [
      {
        text: "Data is organized into tables with rows and columns",
        code: false,
      },
      {
        text: "Schema-less design enabling flexible, unstructured data",
        code: false,
      },
      { text: "Enforced relationships via foreign keys", code: false },
      { text: "SQL is typically used for queries", code: false },
    ],
    answer: "Schema-less design enabling flexible, unstructured data",
    explanation: {
      text: "Relational databases generally have a fixed schema. Schema-less or flexible data structures are more characteristic of many NoSQL databases.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "Database",
    question:
      "In the context of ACID transactions, what does the 'A' stand for?",
    code: false,
    language: false,
    options: [
      { text: "Atomicity", code: false },
      { text: "Availability", code: false },
      { text: "Authentication", code: false },
      { text: "Aggregation", code: false },
    ],
    answer: "Atomicity",
    explanation: {
      text: "ACID stands for Atomicity, Consistency, Isolation, Durability—properties ensuring reliable transaction processing in relational databases.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "Database",
    question:
      "Which SQL clause is used to filter rows after the GROUP BY aggregation has been applied?",
    code: false,
    language: false,
    options: [
      { text: "WHERE", code: false },
      { text: "ORDER BY", code: false },
      { text: "HAVING", code: false },
      { text: "JOIN", code: false },
    ],
    answer: "HAVING",
    explanation: {
      text: "HAVING filters aggregated results after GROUP BY. WHERE filters rows before grouping.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "Database",
    question:
      "Which normal form requires that a table has no transitive dependencies on a non-key attribute?",
    code: false,
    language: false,
    options: [
      { text: "1st Normal Form", code: false },
      { text: "2nd Normal Form", code: false },
      { text: "3rd Normal Form", code: false },
      { text: "Boyce-Codd Normal Form", code: false },
    ],
    answer: "3rd Normal Form",
    explanation: {
      text: "3rd Normal Form requires no transitive dependencies of non-key attributes. In simpler terms, non-key attributes must depend only on the primary key.",
      code: false,
    },
  },
  {
    id: 5,
    topic: "Database",
    question:
      "Which of the following is an advantage of using a NoSQL database (e.g., MongoDB)?",
    code: false,
    language: false,
    options: [
      { text: "Schema is strictly enforced by default", code: false },
      {
        text: "Horizontal scaling (sharding) is often easier to implement",
        code: false,
      },
      {
        text: "Joins are natively supported at the same level as SQL",
        code: false,
      },
      { text: "They require transactions to write any data", code: false },
    ],
    answer: "Horizontal scaling (sharding) is often easier to implement",
    explanation: {
      text: "Many NoSQL systems are built for horizontal scalability, making it simpler to distribute data across multiple nodes. They often have looser schemas and limited joins.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "Database",
    question:
      "Which indexing strategy is typically used to speed up equality lookups on a single column in SQL databases?",
    code: false,
    language: false,
    options: [
      { text: "B-tree index", code: false },
      { text: "Bitmap index", code: false },
      { text: "Hash index", code: false },
      { text: "Full-text index", code: false },
    ],
    answer: "Hash index",
    explanation: {
      text: "While B-trees are the default in many SQL engines for a wide range of queries, a hash index is especially optimized for equality lookups. (Note that not all RDBMS support hash indexes natively, but conceptually they’re for equality ops.)",
      code: false,
    },
  },
  {
    id: 7,
    topic: "Database",
    question:
      "Which of the following isolation levels ensures that if a transaction reads a row, no other transaction can modify that row until the first transaction completes?",
    code: false,
    language: false,
    options: [
      { text: "Read Uncommitted", code: false },
      { text: "Read Committed", code: false },
      { text: "Repeatable Read", code: false },
      { text: "Serializable", code: false },
    ],
    answer: "Serializable",
    explanation: {
      text: "Serializable is the strictest isolation level, preventing phantom reads, non-repeatable reads, and effectively serializing transactions. In practice, many engines rely on row locking or MVCC to emulate it.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "Database",
    question:
      "Which SQL statement can you use to remove an entire table from the database schema?",
    code: false,
    language: false,
    options: [
      { text: "TRUNCATE TABLE table_name;", code: false },
      { text: "DROP TABLE table_name;", code: false },
      { text: "DELETE FROM table_name;", code: false },
      { text: "ALTER TABLE table_name DROP ALL;", code: false },
    ],
    answer: "DROP TABLE table_name;",
    explanation: {
      text: "DROP TABLE permanently deletes the table structure and data. TRUNCATE removes all rows but keeps the table structure.",
      code: false,
    },
  },
  {
    id: 9,
    topic: "Database",
    question: "In MongoDB, which data format is used to store documents?",
    code: false,
    language: false,
    options: [
      { text: "Plain text files", code: false },
      { text: "XML", code: false },
      { text: "BSON (binary JSON)", code: false },
      { text: "YAML", code: false },
    ],
    answer: "BSON (binary JSON)",
    explanation: {
      text: "MongoDB uses BSON, a binary-encoded JSON-like format, to store documents efficiently with additional type information (e.g., date, int).",
      code: false,
    },
  },
  {
    id: 10,
    topic: "Database",
    question:
      "Which of the following best describes 'sharding' in a database context?",
    code: false,
    language: false,
    options: [
      {
        text: "Partitioning data horizontally across multiple machines to handle large datasets or high throughput",
        code: false,
      },
      { text: "Duplicating the entire database for backup", code: false },
      {
        text: "Using columns instead of rows to store data",
        code: false,
      },
      {
        text: "Storing data on a single node with replication turned off",
        code: false,
      },
    ],
    answer:
      "Partitioning data horizontally across multiple machines to handle large datasets or high throughput",
    explanation: {
      text: "Sharding splits a dataset into smaller “shards” and distributes them, improving scalability for read/write operations across many nodes.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "Database",
    question:
      "In PostgreSQL, which data type can store a JSON object while preserving indexing possibilities using a specialized index (like GIN)?",
    code: false,
    language: false,
    options: [
      { text: "TEXT", code: false },
      { text: "VARCHAR", code: false },
      { text: "JSONB", code: false },
      { text: "JSONARRAY", code: false },
    ],
    answer: "JSONB",
    explanation: {
      text: "PostgreSQL offers JSON and JSONB. JSONB is a binary-serialized JSON, allowing efficient indexing and operations on the stored data.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "Database",
    question:
      "Which NoSQL model organizes data as a collection of key-value pairs, allowing extremely simple reads/writes based on a single key?",
    code: false,
    language: false,
    options: [
      { text: "Key-value store", code: false },
      { text: "Document store", code: false },
      { text: "Column-family store", code: false },
      { text: "Graph database", code: false },
    ],
    answer: "Key-value store",
    explanation: {
      text: "Key-value databases (e.g., Redis) store data as a simple key to arbitrary blob mapping, focusing on fast lookups by key.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "Database",
    question: "Which statement about database transactions is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "They allow partial commits of data even if errors occur during the transaction",
        code: false,
      },
      {
        text: "They bundle multiple read/write operations into a single logical unit of work, which either commits or rolls back atomically",
        code: false,
      },
      {
        text: "They are only supported in NoSQL databases",
        code: false,
      },
      {
        text: "They automatically scale writes across multiple shards with no conflicts",
        code: false,
      },
    ],
    answer:
      "They bundle multiple read/write operations into a single logical unit of work, which either commits or rolls back atomically",
    explanation: {
      text: "Transactions ensure either all or none of the operations occur (Atomicity), letting you maintain data integrity across multiple statements.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "Database",
    question:
      "In MySQL or MariaDB, which storage engine supports row-level locking and transactions?",
    code: false,
    language: false,
    options: [
      { text: "MyISAM", code: false },
      { text: "InnoDB", code: false },
      { text: "CSV", code: false },
      { text: "Memory", code: false },
    ],
    answer: "InnoDB",
    explanation: {
      text: "InnoDB is a default storage engine in newer MySQL/MariaDB versions, supporting transactions, row-level locking, foreign keys, etc. MyISAM does not support transactions or row-level locking.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "Database",
    question:
      "Which of the following is a common reason to use an index on a column?",
    code: false,
    language: false,
    options: [
      { text: "To slow down insert and update operations", code: false },
      { text: "To reduce disk usage", code: false },
      {
        text: "To speed up queries that filter or sort by that column",
        code: false,
      },
      { text: "To merge multiple columns into one", code: false },
    ],
    answer: "To speed up queries that filter or sort by that column",
    explanation: {
      text: "Indexes improve performance for queries that use specific columns in WHERE, JOIN, or ORDER BY clauses. However, they can slow down writes due to maintenance overhead.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "Database",
    question:
      "Which of the following best describes a primary key in a relational table?",
    code: false,
    language: false,
    options: [
      {
        text: "A column or set of columns that uniquely identifies each row",
        code: false,
      },
      { text: "A foreign key referencing another table", code: false },
      {
        text: "A column that can contain duplicates or null values",
        code: false,
      },
      { text: "An automatically generated date/time column", code: false },
    ],
    answer: "A column or set of columns that uniquely identifies each row",
    explanation: {
      text: "Primary keys uniquely identify rows and cannot be NULL or duplicated, ensuring row-level integrity.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "Database",
    question: "In a distributed system, what does the CAP theorem state?",
    code: false,
    language: false,
    options: [
      {
        text: "Consistency, Availability, and Partition Tolerance cannot all be guaranteed simultaneously; you must pick two",
        code: false,
      },
      {
        text: "You can achieve perfect uptime if you scale horizontally",
        code: false,
      },
      {
        text: "It’s about Column, Array, and Partition data structures",
        code: false,
      },
      {
        text: "It states that indexing columns must remain consistent with primary key constraints",
        code: false,
      },
    ],
    answer:
      "Consistency, Availability, and Partition Tolerance cannot all be guaranteed simultaneously; you must pick two",
    explanation: {
      text: "The CAP theorem says in the presence of a network partition, you must sacrifice either strict consistency or full availability. Different databases make different trade-offs.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "Database",
    question: "Which statement about replication is true?",
    code: false,
    language: false,
    options: [
      { text: "It only works in NoSQL databases", code: false },
      {
        text: "A primary node can stream changes to secondary nodes, improving read scalability and fault tolerance",
        code: false,
      },
      {
        text: "It is the same as partitioning data horizontally",
        code: false,
      },
      {
        text: "It automatically merges conflicting writes without any config",
        code: false,
      },
    ],
    answer:
      "A primary node can stream changes to secondary nodes, improving read scalability and fault tolerance",
    explanation: {
      text: "In typical master-slave replication, all writes go to the master (primary) which then replicates changes to slaves (secondaries). This helps distribute reads and improves resilience against node failure.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "Database",
    question: "What is a 'materialized view' in a relational database?",
    code: false,
    language: false,
    options: [
      { text: "An ephemeral temporary table used during queries", code: false },
      {
        text: "A view that is computed and stored physically, allowing faster reads but requiring refresh for updates",
        code: false,
      },
      {
        text: "A subquery that is always inlined for performance",
        code: false,
      },
      {
        text: "A built-in indexing method for columns",
        code: false,
      },
    ],
    answer:
      "A view that is computed and stored physically, allowing faster reads but requiring refresh for updates",
    explanation: {
      text: "Materialized views store the query result. They must be refreshed (manually or automatically) to stay in sync with underlying tables.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "Database",
    question:
      "Which type of NoSQL database models relationships as edges between nodes, commonly used for social networks or recommendation engines?",
    code: false,
    language: false,
    options: [
      { text: "Key-value store", code: false },
      { text: "Document store", code: false },
      { text: "Column-family store", code: false },
      { text: "Graph database", code: false },
    ],
    answer: "Graph database",
    explanation: {
      text: "Graph databases (e.g., Neo4j) model data as nodes and edges, making relationship traversal very efficient for heavily connected data.",
      code: false,
    },
  },

  // 21–30: PRACTICE / CODE SNIPPETS (SQL & NoSQL)

  {
    id: 21,
    topic: "Database",
    question:
      "Given a table 'employees' with columns (id, first_name, last_name, salary), write an SQL query to select employees with a salary greater than 50000:",
    code: false,
    language: "sql",
    options: [
      {
        text: "SELECT * FROM employees WHERE salary > 50000;",
        code: true,
      },
      {
        text: "SELECT * FROM employees HAVING salary > 50000;",
        code: true,
      },
      {
        text: "SELECT employees WHERE salary > 50000;",
        code: true,
      },
      {
        text: "SELECT (id, first_name, last_name, salary) FROM employees FOR salary > 50000;",
        code: true,
      },
    ],
    answer: "SELECT * FROM employees WHERE salary > 50000;",
    explanation: {
      text: "Use a basic SELECT statement with WHERE for filtering. The HAVING clause is used after GROUP BY, so it’s not correct here.",
      code: false,
    },
  },
  {
    id: 22,
    topic: "Database",
    question:
      "Spot the error in this SQL snippet:\n\n```sql\nUPDATE users\nSET email = 'john@example.com'\nWHERE user_id == 123;\n```\n",
    code: `UPDATE users
SET email = 'john@example.com'
WHERE user_id == 123;`,
    language: "sql",
    options: [
      {
        text: "SQL uses '=' or '<>' instead of '==' for comparisons in many dialects",
        code: false,
      },
      {
        text: "You must write WHERE user_id EQUALS '123' in quotes",
        code: false,
      },
      {
        text: "UPDATE cannot set columns in the same query as WHERE",
        code: false,
      },
      {
        text: "This snippet has no error",
        code: false,
      },
    ],
    answer:
      "SQL uses '=' or '<>' instead of '==' for comparisons in many dialects",
    explanation: {
      text: "In standard SQL, the correct syntax is `WHERE user_id = 123`. The double equals (==) is not typically valid in SQL (though some specific dialects might allow it, most mainstream ones do not).",
      code: false,
    },
  },
  {
    id: 23,
    topic: "Database",
    question:
      "Given a 'posts' table with columns (id, title, content, user_id), write an SQL join to retrieve posts along with the matching username from a 'users' table (id, username). Both tables share user_id = id in users:",
    code: false,
    language: "sql",
    options: [
      {
        text: "SELECT p.*, u.username\nFROM posts p\nJOIN users u ON p.user_id = u.id;",
        code: true,
      },
      {
        text: "SELECT p.*, u.username\nFROM posts p\nWHERE p.user_id = u.id;",
        code: true,
      },
      {
        text: "SELECT p.*, u.username\nFROM posts p\nCONCAT users u ON p.user_id = u.id;",
        code: true,
      },
      {
        text: "SELECT p.*, u.username\nFROM posts p\nGROUP BY p.user_id;",
        code: true,
      },
    ],
    answer:
      "SELECT p.*, u.username\nFROM posts p\nJOIN users u ON p.user_id = u.id;",
    explanation: {
      text: "A straightforward INNER JOIN with ON p.user_id = u.id returns rows where the user exists in both tables. The second option uses WHERE but never declared a table alias for u, so it’s incomplete.",
      code: false,
    },
  },
  {
    id: 24,
    topic: "Database",
    question:
      "In MySQL, how would you remove all rows from 'orders' while resetting any AUTO_INCREMENT counters quickly, but keep the table structure?",
    code: false,
    language: "sql",
    options: [
      {
        text: "DELETE FROM orders;",
        code: true,
      },
      {
        text: "DROP TABLE orders;",
        code: true,
      },
      {
        text: "TRUNCATE TABLE orders;",
        code: true,
      },
      {
        text: "ALTER TABLE orders DELETE ALL;",
        code: true,
      },
    ],
    answer: "TRUNCATE TABLE orders;",
    explanation: {
      text: "TRUNCATE quickly deletes all data and resets auto-increment counters. DELETE FROM orders only removes rows but keeps the existing auto-increment value.",
      code: false,
    },
  },
  {
    id: 25,
    topic: "Database",
    question:
      "Which is the correct MongoDB query to find documents in 'products' collection where 'price' is less than 100?",
    code: false,
    language: "javascript",
    options: [
      {
        text: `db.products.find({ price: { $lt: 100 } })`,
        code: true,
      },
      {
        text: `db.products.find({ price: < 100 })`,
        code: true,
      },
      {
        text: `db.products.find("price < 100")`,
        code: true,
      },
      {
        text: `db.products.find($lt=100)`,
        code: true,
      },
    ],
    answer: `db.products.find({ price: { $lt: 100 } })`,
    explanation: {
      text: "MongoDB uses query operators like `$lt` for 'less than'. The correct syntax is an object with `price` key and an operator object `{ $lt: 100 }`.",
      code: false,
    },
  },
  {
    id: 26,
    topic: "Database",
    question:
      "Spot the error in this MongoDB update:\n\n```js\ndb.users.updateOne(\n  { _id: 123 },\n  { name: 'John Doe' }\n);\n```\n",
    code: `db.users.updateOne(
  { _id: 123 },
  { name: 'John Doe' }
);`,
    language: "javascript",
    options: [
      {
        text: "You must specify update operators (e.g., $set: { name: 'John Doe' })",
        code: false,
      },
      {
        text: "updateOne does not exist in MongoDB, only update",
        code: false,
      },
      {
        text: "IDs can't be numeric, so _id: 123 is invalid",
        code: false,
      },
      {
        text: "You need a write concern parameter or it fails",
        code: false,
      },
    ],
    answer:
      "You must specify update operators (e.g., $set: { name: 'John Doe' })",
    explanation: {
      text: "In MongoDB, non-replacement updates require an update operator like `$set`. Otherwise, you’re attempting a replacement update, which would remove all other fields. `updateOne()` with `{ name: 'John Doe' }` would replace the entire document except _id. If that's not intended, you should do `$set`.",
      code: false,
    },
  },
  {
    id: 27,
    topic: "Database",
    question:
      "Given a 'sales' table with columns (region, year, amount). Write a SQL query to group results by region and get the total sales per region, naming the sum as total_amount.",
    code: false,
    language: "sql",
    options: [
      {
        text: `SELECT region, SUM(amount) AS total_amount
FROM sales
GROUP BY region;`,
        code: true,
      },
      {
        text: `SELECT region, amount
FROM sales
GROUP BY region;`,
        code: true,
      },
      {
        text: `SELECT region, SUM(amount) AS total_amount
FROM sales
WHERE region = GROUP;`,
        code: true,
      },
      {
        text: `SELECT region, amount
FROM sales
HAVING SUM(amount)`,
        code: true,
      },
    ],
    answer: `SELECT region, SUM(amount) AS total_amount
FROM sales
GROUP BY region;`,
    explanation: {
      text: "Use GROUP BY region to aggregate sums. The second option doesn’t sum amounts, the third uses invalid syntax, and the fourth is incomplete.",
      code: false,
    },
  },
  {
    id: 28,
    topic: "Database",
    question:
      "How would you create an index on 'username' in a 'users' collection in MongoDB?",
    code: false,
    language: "javascript",
    options: [
      {
        text: `db.users.createIndex({ username: 1 })`,
        code: true,
      },
      {
        text: `db.users.ensureIndex({ username: 'asc' })`,
        code: true,
      },
      {
        text: `db.users.ensure({ username: 1 })`,
        code: true,
      },
      {
        text: `CREATE INDEX username ON users (username ASC);`,
        code: true,
      },
    ],
    answer: `db.users.createIndex({ username: 1 })`,
    explanation: {
      text: "`createIndex` is the standard MongoDB command. `ensureIndex` is deprecated in newer drivers. The last option is standard SQL syntax, not MongoDB.",
      code: false,
    },
  },
  {
    id: 29,
    topic: "Database",
    question:
      "Complete this SQL to rename the column 'age' to 'years' in the table 'people' (assuming a dialect that supports standard syntax):\n\n```sql\nALTER TABLE people \n    _____ age TO years;\n```",
    code: `ALTER TABLE people
    _____ age TO years;`,
    language: "sql",
    options: [
      { text: "CHANGE COLUMN", code: false },
      { text: "RENAME COLUMN", code: false },
      { text: "ALTER COLUMN", code: false },
      { text: "REPLACE COLUMN", code: false },
    ],
    answer: "RENAME COLUMN",
    explanation: {
      text: "Some RDBMS (e.g., PostgreSQL) support `ALTER TABLE table_name RENAME COLUMN old TO new;`. MySQL might require `CHANGE COLUMN age years INT;` or something else. But in standard syntax, RENAME COLUMN is typical.",
      code: false,
    },
  },
  {
    id: 30,
    topic: "Database",
    question:
      "Given a 'customers' table with columns (id, name, city). Spot the issue:\n\n```sql\nSELECT id, name\nFROM customers\nWHERE city = 'Chicago'\nGROUP BY city;\n```\n",
    code: `SELECT id, name
FROM customers
WHERE city = 'Chicago'
GROUP BY city;`,
    language: "sql",
    options: [
      {
        text: "Columns not in the GROUP BY or an aggregate function can't be selected (id, name are neither aggregated nor grouped)",
        code: false,
      },
      {
        text: "Use DISTINCT city, not GROUP BY city in this query",
        code: false,
      },
      {
        text: "You can't use WHERE with GROUP BY in the same query",
        code: false,
      },
      {
        text: "The snippet is correct, no issues",
        code: false,
      },
    ],
    answer:
      "Columns not in the GROUP BY or an aggregate function can't be selected (id, name are neither aggregated nor grouped)",
    explanation: {
      text: "In standard SQL, if you GROUP BY city, you cannot directly select id or name unless they're aggregated (e.g. MIN(name)) or included in GROUP BY. Otherwise, this query will fail or return undefined results in strict SQL modes.",
      code: false,
    },
  },
];

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// CLOUD QUESTIONS

export const cloudQuestions = [
  {
    id: 1,
    topic: "Cloud",
    question:
      "Which of the following describes Infrastructure as a Service (IaaS)?",
    code: false,
    language: false,
    options: [
      {
        text: "A fully managed solution for deploying your code without managing servers",
        code: false,
      },
      {
        text: "Provisioning virtualized computing resources (VMs, networks, storage) over the internet",
        code: false,
      },
      {
        text: "Providing a fully managed platform for building, running, and managing applications",
        code: false,
      },
      {
        text: "Outsourcing all IT operations to a third party, including employees",
        code: false,
      },
    ],
    answer:
      "Provisioning virtualized computing resources (VMs, networks, storage) over the internet",
    explanation: {
      text: "IaaS lets you spin up raw compute instances, storage, and networking, while you manage the OS and runtime. Examples: Amazon EC2, Azure VMs, Google Compute Engine.",
      code: false,
    },
  },
  {
    id: 2,
    topic: "Cloud",
    question: "Which statement about Platform as a Service (PaaS) is accurate?",
    code: false,
    language: false,
    options: [
      {
        text: "PaaS means you manage the underlying VM, networking, and OS patches",
        code: false,
      },
      {
        text: "PaaS provides a platform (runtime, libraries) for developing and running applications, without dealing with lower-level infrastructure",
        code: false,
      },
      {
        text: "PaaS is only available in private data centers, not public clouds",
        code: false,
      },
      {
        text: "PaaS only refers to container orchestration systems like Kubernetes",
        code: false,
      },
    ],
    answer:
      "PaaS provides a platform (runtime, libraries) for developing and running applications, without dealing with lower-level infrastructure",
    explanation: {
      text: "In a PaaS model, the provider manages OS patches, runtime updates, and scaling. Developers deploy code onto the provided framework. Examples: AWS Elastic Beanstalk, Azure App Service, Google App Engine.",
      code: false,
    },
  },
  {
    id: 3,
    topic: "Cloud",
    question: "Which of these is a characteristic of Serverless computing?",
    code: false,
    language: false,
    options: [
      {
        text: "Developers pay for continuous VM uptime, even when the function is idle",
        code: false,
      },
      {
        text: "No servers are involved at all in the data center",
        code: false,
      },
      {
        text: "Automatic scaling based on demand, paying only for actual execution time",
        code: false,
      },
      {
        text: "Only for batch processing, not for web applications",
        code: false,
      },
    ],
    answer:
      "Automatic scaling based on demand, paying only for actual execution time",
    explanation: {
      text: "Serverless platforms (e.g., AWS Lambda, Azure Functions, Google Cloud Functions) handle infrastructure scaling automatically, and billing occurs only for the time functions actually run.",
      code: false,
    },
  },
  {
    id: 4,
    topic: "Cloud",
    question:
      "Which AWS service is used for object storage of files, images, backups, etc.?",
    code: false,
    language: false,
    options: [
      { text: "Amazon EC2", code: false },
      { text: "Amazon RDS", code: false },
      { text: "Amazon DynamoDB", code: false },
      { text: "Amazon S3", code: false },
    ],
    answer: "Amazon S3",
    explanation: {
      text: "Amazon Simple Storage Service (S3) is an object storage service providing scalable storage of files in “buckets.”",
      code: false,
    },
  },
  {
    id: 5,
    topic: "Cloud",
    question:
      "In Azure, which service primarily hosts relational databases like SQL Server in a managed environment?",
    code: false,
    language: false,
    options: [
      { text: "Azure App Service", code: false },
      { text: "Azure SQL Database", code: false },
      { text: "Azure Functions", code: false },
      { text: "Azure Blob Storage", code: false },
    ],
    answer: "Azure SQL Database",
    explanation: {
      text: "Azure SQL Database is a PaaS offering for fully managed SQL Server instances in the cloud. It handles backups, patching, and scaling automatically.",
      code: false,
    },
  },
  {
    id: 6,
    topic: "Cloud",
    question:
      "Which Google Cloud service is used to deploy containerized applications in a managed Kubernetes environment?",
    code: false,
    language: false,
    options: [
      { text: "Google Cloud Run", code: false },
      { text: "Google Kubernetes Engine (GKE)", code: false },
      { text: "Google App Engine", code: false },
      { text: "Compute Engine", code: false },
    ],
    answer: "Google Kubernetes Engine (GKE)",
    explanation: {
      text: "GKE is a managed Kubernetes service that automates cluster creation, node provisioning, and updates. Cloud Run is serverless containers but not the same as a full Kubernetes cluster.",
      code: false,
    },
  },
  {
    id: 7,
    topic: "Cloud",
    question: "What is 'auto-scaling' in a cloud environment?",
    code: false,
    language: false,
    options: [
      {
        text: "A technique that duplicates your entire environment across multiple continents",
        code: false,
      },
      {
        text: "Automatically adjusting the number of compute resources (VMs, containers) based on load metrics (CPU, requests)",
        code: false,
      },
      {
        text: "Manually resizing VMs using the cloud console",
        code: false,
      },
      {
        text: "A feature that only applies to database storage, not compute",
        code: false,
      },
    ],
    answer:
      "Automatically adjusting the number of compute resources (VMs, containers) based on load metrics (CPU, requests)",
    explanation: {
      text: "Auto-scaling can add or remove instances in a cluster or scale container replicas up/down based on demand, optimizing cost and performance.",
      code: false,
    },
  },
  {
    id: 8,
    topic: "Cloud",
    question:
      "Which type of load balancing typically uses OSI Layer 7, allowing routing decisions based on HTTP headers, paths, hostnames, etc.?",
    code: false,
    language: false,
    options: [
      { text: "Network load balancing (Layer 4)", code: false },
      { text: "Application load balancing (Layer 7)", code: false },
      { text: "DNS-based round robin", code: false },
      { text: "Direct server return (DSR) balancing", code: false },
    ],
    answer: "Application load balancing (Layer 7)",
    explanation: {
      text: "Layer 7 load balancers can parse HTTP requests to route traffic based on URL paths, headers, cookies, etc. Network load balancers operate at Layer 4 (TCP/UDP).",
      code: false,
    },
  },
  {
    id: 9,
    topic: "Cloud",
    question:
      "Which AWS service is a fully managed serverless event bus for connecting applications via events?",
    code: false,
    language: false,
    options: [
      { text: "Amazon Kinesis", code: false },
      { text: "Amazon SQS", code: false },
      { text: "Amazon EventBridge", code: false },
      { text: "Amazon SNS", code: false },
    ],
    answer: "Amazon EventBridge",
    explanation: {
      text: "Amazon EventBridge can receive events from various SaaS or AWS sources and route them to targets (Lambda, etc.). It’s an evolution of CloudWatch Events.",
      code: false,
    },
  },
  {
    id: 10,
    topic: "Cloud",
    question: "Which statement about container orchestration is correct?",
    code: false,
    language: false,
    options: [
      {
        text: "It's only needed if you run a single container on one server",
        code: false,
      },
      {
        text: "Systems like Kubernetes or ECS handle container deployment, scaling, and networking across clusters",
        code: false,
      },
      {
        text: "Containers cannot be load balanced across multiple hosts",
        code: false,
      },
      {
        text: "It eliminates the need for any host operating system",
        code: false,
      },
    ],
    answer:
      "Systems like Kubernetes or ECS handle container deployment, scaling, and networking across clusters",
    explanation: {
      text: "Container orchestration platforms (Kubernetes, ECS, Docker Swarm) manage container life cycles, load balancing, updates, and scaling in a cluster environment.",
      code: false,
    },
  },
  {
    id: 11,
    topic: "Cloud",
    question:
      "Which of the following is an advantage of using a multi-AZ (Availability Zone) deployment for databases?",
    code: false,
    language: false,
    options: [
      {
        text: "Reduces the need for backups by storing data in a single location",
        code: false,
      },
      {
        text: "Provides high availability by automatically failing over if the primary AZ goes down",
        code: false,
      },
      {
        text: "Ensures the application code is globally replicated",
        code: false,
      },
      { text: "Eliminates all potential network latency", code: false },
    ],
    answer:
      "Provides high availability by automatically failing over if the primary AZ goes down",
    explanation: {
      text: "Multi-AZ database deployments replicate data synchronously across distinct AZs, improving resilience against AZ-level failures.",
      code: false,
    },
  },
  {
    id: 12,
    topic: "Cloud",
    question:
      "In Azure, which service acts as a global Content Delivery Network (CDN) for caching static content at edge locations?",
    code: false,
    language: false,
    options: [
      { text: "Azure Front Door", code: false },
      { text: "Azure Cache for Redis", code: false },
      { text: "Azure CDN", code: false },
      { text: "Azure Traffic Manager", code: false },
    ],
    answer: "Azure CDN",
    explanation: {
      text: "Azure CDN caches static files like images, CSS, JavaScript at global edge nodes, reducing latency for end users. Azure Front Door can do global load balancing and also caching, but Azure CDN is the dedicated service for static distribution.",
      code: false,
    },
  },
  {
    id: 13,
    topic: "Cloud",
    question:
      "Which best practice helps minimize the blast radius of a security breach in a cloud environment?",
    code: false,
    language: false,
    options: [
      {
        text: "Using a single IAM role for all services and employees",
        code: false,
      },
      {
        text: "Applying the principle of least privilege and dividing infrastructure into multiple subnets or accounts",
        code: false,
      },
      {
        text: "Allowing outbound SSH from any server to the internet",
        code: false,
      },
      {
        text: "Keeping all data in the same publicly accessible S3 bucket",
        code: false,
      },
    ],
    answer:
      "Applying the principle of least privilege and dividing infrastructure into multiple subnets or accounts",
    explanation: {
      text: "Segregating environments, using least-privilege IAM roles, and restricting network boundaries limit the damage if one portion is compromised.",
      code: false,
    },
  },
  {
    id: 14,
    topic: "Cloud",
    question:
      "Which GCP service provides a global HTTP/HTTPS load balancer that can route traffic to services across multiple regions?",
    code: false,
    language: false,
    options: [
      { text: "Cloud Load Balancing", code: false },
      { text: "Compute Engine", code: false },
      { text: "Cloud DNS", code: false },
      { text: "Cloud Storage", code: false },
    ],
    answer: "Cloud Load Balancing",
    explanation: {
      text: "Google Cloud Load Balancing is a managed load-balancing service that can distribute traffic globally across multiple backends and regions for high availability and performance.",
      code: false,
    },
  },
  {
    id: 15,
    topic: "Cloud",
    question:
      "Which AWS service can be used for managed orchestration of complex workflows and tasks, with support for retries and step logic?",
    code: false,
    language: false,
    options: [
      { text: "AWS Step Functions", code: false },
      { text: "Amazon SQS", code: false },
      { text: "Amazon Aurora", code: false },
      { text: "AWS OpsWorks", code: false },
    ],
    answer: "AWS Step Functions",
    explanation: {
      text: "AWS Step Functions let you define state machines for orchestrating multi-step processes, including parallel tasks, branching logic, error handling, and retries, without managing servers.",
      code: false,
    },
  },
  {
    id: 16,
    topic: "Cloud",
    question:
      "Which concept ensures containers are immutable and ephemeral in a cloud-native environment, typically stored in an image registry?",
    code: false,
    language: false,
    options: [
      { text: "Pet servers, each meticulously configured", code: false },
      {
        text: "Container images, built from Dockerfiles or similar, that define everything needed to run an app",
        code: false,
      },
      {
        text: "Virtual machine snapshots that store ephemeral container state",
        code: false,
      },
      {
        text: "Chef or Puppet scripts for persistent configuration changes",
        code: false,
      },
    ],
    answer:
      "Container images, built from Dockerfiles or similar, that define everything needed to run an app",
    explanation: {
      text: "Containers are created from immutable images stored in a registry. This approach ensures consistent, repeatable deployments and ephemeral container lifecycles.",
      code: false,
    },
  },
  {
    id: 17,
    topic: "Cloud",
    question:
      "In AWS, which service is used to securely store and manage encryption keys used to protect data?",
    code: false,
    language: false,
    options: [
      { text: "AWS KMS (Key Management Service)", code: false },
      { text: "Amazon GuardDuty", code: false },
      { text: "AWS Shield", code: false },
      { text: "Amazon Inspector", code: false },
    ],
    answer: "AWS KMS (Key Management Service)",
    explanation: {
      text: "AWS Key Management Service handles the creation, storage, rotation, and auditing of cryptographic keys used for encrypting data at rest or in transit in AWS services.",
      code: false,
    },
  },
  {
    id: 18,
    topic: "Cloud",
    question:
      "Which technique helps reduce cold starts in a serverless environment like AWS Lambda?",
    code: false,
    language: false,
    options: [
      {
        text: "Deploying functions in multiple languages simultaneously",
        code: false,
      },
      {
        text: "Keeping your function idle and never calling it",
        code: false,
      },
      {
        text: "Using provisioned concurrency to keep a certain number of execution environments warm",
        code: false,
      },
      {
        text: "Storing large dependencies inside the function code bundle",
        code: false,
      },
    ],
    answer:
      "Using provisioned concurrency to keep a certain number of execution environments warm",
    explanation: {
      text: "Provisioned Concurrency in AWS Lambda pre-initializes a set number of function environments so they’re ready to handle traffic, reducing latency from cold starts.",
      code: false,
    },
  },
  {
    id: 19,
    topic: "Cloud",
    question: "Which statement best describes 'infrastructure as code' (IaC)?",
    code: false,
    language: false,
    options: [
      {
        text: "Manually creating VMs and networks in a management console",
        code: false,
      },
      {
        text: "Using textual or declarative config files (like Terraform, CloudFormation) to define and provision cloud resources",
        code: false,
      },
      {
        text: "Having an infrastructure team code all scripts in Bash",
        code: false,
      },
      {
        text: "Applying TDD to application code, ignoring infrastructure",
        code: false,
      },
    ],
    answer:
      "Using textual or declarative config files (like Terraform, CloudFormation) to define and provision cloud resources",
    explanation: {
      text: "IaC means describing infrastructure in version-controlled code, enabling repeatable and automated provisioning or teardown of resources.",
      code: false,
    },
  },
  {
    id: 20,
    topic: "Cloud",
    question:
      "Which approach can help with cost optimization in a cloud environment?",
    code: false,
    language: false,
    options: [
      {
        text: "Running large instances at full capacity 24/7, regardless of demand",
        code: false,
      },
      {
        text: "Regularly reviewing resource usage and rightsizing or shutting down idle resources",
        code: false,
      },
      {
        text: "Paying for dedicated on-premises hardware in addition to the cloud",
        code: false,
      },
      {
        text: "Never applying auto-scaling policies",
        code: false,
      },
    ],
    answer:
      "Regularly reviewing resource usage and rightsizing or shutting down idle resources",
    explanation: {
      text: "Cloud bills can grow quickly if unused resources remain active. Rightsizing VM or DB instance sizes, implementing auto-scaling, or removing abandoned resources can significantly reduce costs.",
      code: false,
    },
  },
];
